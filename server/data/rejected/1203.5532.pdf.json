{
  "name" : "1203.5532.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "On the Use of Non-Stationary Policies for Infinite-Horizon Discounted Markov Decision Processes",
    "authors" : [ "Bruno Scherrer" ],
    "emails" : [ ],
    "sections" : [ {
      "heading" : null,
      "text" : "ar X\niv :1\n20 3.\n55 32\nv2 [\ncs .A\nI] 3\n0 M\nar 2\n01 2\nWe consider infinite-horizon γ-discounted Markov Decision Processes, for which it is known that there exists a stationary optimal policy. We consider the algorithm Value Iteration and the sequence of policies π1, . . . , πk it implicitely generates until some iteration k. We provide performance bounds for non-stationary policies involving the last m generated policies that reduce the state-of-the-art bound for the last stationary policy πk by a factor 1−γ\n1−γm . In particular, the use of non-stationary policies allows\nto reduce the usual asymptotic performance bounds of Value Iteration with errors bounded by ǫ at each iteration from γ (1−γ)2 ǫ to γ 1−γ ǫ, which is significant in the usual situation when γ is close to 1. Given Bellman operators that can only be computed with some error ǫ, a surprising consequence of this result is that the problem of “computing an approximately optimal non-stationary policy” is much simpler than that of “computing an approximately optimal stationary policy”, and even slightly simpler than that of “approximately computing the value of some fixed policy”, since this last problem only has a guarantee of 1 1−γ ǫ.\nGiven a Markov Decision Process, suppose on runs an approximate version of Value Iteration, that is one builds a sequence of value-policy pairs as follows:\nPick any πk+1 in Gvk\nvk+1 = Tπk+1vk + ǫk+1\nwhere v0 is arbitrary, Gvk is the set of policies that are greedy 1 with respect to vk, and Tπk is the linear Bellman operator associated to policy πk. Though it does not appear exactly in this form in the literature, the following performance bound is somewhat standard.\nTheorem 1. Let ǫ = max1≤j<k ‖ǫj‖sp be a uniform upper bound on the span seminorm 2 of the errors before iteration k. The loss of policy πk is bounded as follows:\n‖v∗ − vπk‖∞ ≤ 1\n1− γ\n(\nγ − γk\n1− γ ǫ+ γk‖v∗ − v0‖sp\n)\n. (1)\nIn Theorem 2, we will prove a generalization of this result, so we do not provide a proof here. Since for any f , ‖f‖sp ≤ 2‖f‖∞, Theorem 1 constitutes a slight improvement and a (finite-iteration) generalization of the following well-known performance bound (see [1]):\nlim sup k→∞\n‖v∗ − vπk‖∞ ≤ 2γ\n(1− γ)2 max k ‖ǫk‖∞.\n1There may be several greedy policies with respect to some value v, and what we write here holds whichever one is picked. 2For any function f defined on the state space, the span seminorm of f is ‖f‖sp = maxs f(s) − mins f(s). The motivation for using the span seminorm instead of a more usual L∞-norm is twofold: 1) it slightly improves on the state-of-the-art bounds and 2) it simplifies the construction of an example in the proof of the forthcoming Proposition 1.\nAsymptotically, the above bounds involve a γ(1−γ)2 constant that may be really big when γ is close to 1. Compared to a value-iteration algorithm for approximately computing the value of some fixed policy, and for which one can prove a dependency of the form 11−γ ǫ, there is an extra term γ 1−γ that suggests that the problem of “computing an approximately optimal policy” is significantly harder than that of “approximately computing the value of some fixed policy”. To our knowledge, there does not exist any example in the literature that supports the tightness of the above mentionned bounds. The following proposition shows that the bound of Theorem 1 is in fact tight.\nProposition 1. For all ǫ ≥ 0, ∆ ≥ 0, and k > 0, there exists a k+1-state MDP, an initial value v0 such that ‖v∗ − v0‖sp = ∆, a sequence of noise terms (ǫj) with ‖ǫj‖sp ≤ ǫ, such that running Value Iteration during iterations with errors (ǫj) outputs a value function vk−1 of which a greedy policy πk satisfies Equation (1) with equality.\nProof. Consider the deterministic MDP of Figure 1. The only decision is in state sk, where one can stay with reward r = − γ−γ k\n1−γ ǫ − γ k∆ or move to sk−1 with 0 reward. All other transitions give 0 reward. Thus,\nthere are only two policies, the optimal policy π∗ with value equal to 0, and a policy π̄ for which the value in sk is r 1−γ . Take\nv0(sl) =\n{\n−∆ if l = 0 0 else\nand for all j < k, ǫj(sl) =\n{\n−ǫ if j = l 0 else.\nBy induction, it can be seen that for all j ∈ {1, 2, . . . , k − 1},\nvj(sl) =\n{\n−ǫ− γǫ− · · · − γj−1ǫ− γj∆ = − 1−γ j\n1−γ ǫ− γ j∆ if j = l\n0 if j < l ≤ k\nSince γvk−1(sk−1) = r and vk−1(sk) = 0, both policies are greedy with respect to vk−1, and the bound of Equation (1) holds with equality for π̄.\nInstead of running the last stationary policy πk, one may consider running a periodic non-stationary policy, which is made of the last m policies. The following theorem shows that it is indeed a good idea.\nTheorem 2. Let πk,m be the following policy\nπk,m = πk πk−1 · · · πk−m+1 πk πk−1 · · · .\nThen its performance loss is bounded as follows:\n‖v∗ − vπk,m‖∞ ≤ 1\n1− γm\n(\nγ − γk\n1− γ ǫ+ γk‖v∗ − v0‖sp\n)\n.\nWhen m = 1, one exactly recovers the result of Theorem 1. For general m, this new bound is a factor 1−γ 1−γm better than the usual bound. Taking m = k, that is considering all the policies generated from the very start, one obtains the following bound:\n‖v∗ − vπk,k‖∞ ≤\n(\nγ\n1− γ −\nγk\n1− γk\n)\nǫ+ γk\n1− γk ‖v∗ − v0‖sp.\nthat tends to γ1−γ ǫ when k tends to ∞. In other words, we can see here that the problem of “computing a (non stationary) approximately-optimal policy” is not harder than that of “computing approximately the value of some fixed policy”. Since the respective asymptotic errors are γ1−γ ǫ and 1 1−γ ǫ, it seems even simpler !\nProof of Theorem 2. The value of πk,m satisfies:\nvπk,m = TπkTπk−1 · · ·Tπk−m+1vπk,m . (2)\nBy induction, it can be shown that the sequence of values generated by the algorithm satisfies:\nTπkvk−1 = TπkTπk−1 · · ·Tπk−m+1vk−m + m−1 ∑\ni=1\nΓk,iǫk−i (3)\nwhere Γk,i = PπkPπk−1 · · ·Pπk−i+1\nin which, for all π, Pπ denotes the stochastic matrix associated to policy π. By substracting Equations (3) and (2), one obtains:\nTπkvk−1 − vπk,m = Γk,m(vk−m − vπk,m) +\nm−1 ∑\ni=1\nΓk,iǫk−i\nand by taking the norm\n‖Tπkvk−1 − vπk,m‖∞ = γ m‖vk−m − vπk,m‖∞ +\nγ − γm\n1− γ ǫ∞ (4)\nwhere ǫ∞ = max1≤j≤k ‖ǫj‖∞. Essentially, Equation (4) shows that for sufficiently big m, Tπkvk−1 is an γ 1−γ ǫ approximation of the value of the non-stationary policy πk,m (whereas in general, it may be a much poorer approximation of the value of the stationary policy πk.\nBy induction, it can also be proved that\n‖v∗ − vk‖∞ ≤ γ k‖v∗ − v0‖∞ +\n1− γk\n1− γ ǫ∞. (5)\nUsing the fact that ‖Tπ∗v∗ − Tπkvk−1‖∞ ≤ γ‖v∗ − vk−1‖∞ since π∗ (resp. πk) is greedy with respect to v∗ (resp. vk−1), as well as Equations (4) and (5), we can conclude by observing that\n‖v∗ − vπk,m‖∞ ≤ ‖Tπ∗v∗ − Tπkvk−1‖∞ + ‖Tπkvk−1 − vπk,m‖∞\n≤ γ‖v∗ − vk−1‖∞ + γ m‖vk−m − vπk,m‖∞ +\nγ − γm\n1− γ ǫ∞\n≤ γ\n(\nγk−1‖v∗ − v0‖∞ + 1− γk−1\n1− γ ǫ∞\n)\n+ γm ( ‖vk−m − v∗‖∞ + ‖v∗ − vπk,m‖∞ )\n+ γ − γm\n1− γ ǫ∞\n≤ γk‖v∗ − v0‖∞ + γ − γk\n1− γ ǫ∞\n+ γm ( γk−m‖v∗ − v0‖∞ + 1− γk−m\n1− γ ǫ∞ + ‖v∗ − vπk,m‖∞\n)\n+ γ − γm\n1− γ ǫ∞\n= γm‖v∗ − vπk,m‖∞ + 2γ k‖v∗ − v0‖∞ +\n2(γ − γk)\n1− γ ǫ∞.\nAdding a constant to the value vj at any step j of the algorithm does not affect the greedy policy set Gvj and only adds a constant to the next value vj+1. As a consequence, we can assume witout loss of generality that ‖v∗ − v0‖sp = 2‖v∗ − v0‖∞, ‖ǫj‖sp = 2‖ǫj‖∞ and the result follows.\nFrom a bibliographical point of view, the idea of using non-stationary policies to improve error bounds already appears in [2]. However, in these works, the author considers finite-horizon problems where the policy to be computed is naturally non-stationary. The fact that non-stationary policies (that loop over the last m computed policies) can also be useful in an infinite horizon context is to our knowledge new.\nAcknowledgements I thank Boris Lesner for pointing out a flaw in a previous temptative proof of Proposition 1."
    } ],
    "references" : [ {
      "title" : "Neuro-Dynamic Programming",
      "author" : [ "D.P. Bertsekas", "J.N. Tsitsiklis" ],
      "venue" : "Athena Scientific",
      "citeRegEx" : "1",
      "shortCiteRegEx" : null,
      "year" : 1996
    }, {
      "title" : "On the Sample Complexity of Reinforcement Learning",
      "author" : [ "S.M. Kakade" ],
      "venue" : "PhD thesis, University College London",
      "citeRegEx" : "2",
      "shortCiteRegEx" : null,
      "year" : 2003
    } ],
    "referenceMentions" : [ {
      "referenceID" : 0,
      "context" : "Since for any f , ‖f‖sp ≤ 2‖f‖∞, Theorem 1 constitutes a slight improvement and a (finite-iteration) generalization of the following well-known performance bound (see [1]): lim sup k→∞ ‖v∗ − vπk‖∞ ≤ 2γ (1− γ)2 max k ‖ǫk‖∞.",
      "startOffset" : 167,
      "endOffset" : 170
    } ],
    "year" : 2012,
    "abstractText" : "We consider infinite-horizon γ-discounted Markov Decision Processes, for which it is known that there exists a stationary optimal policy. We consider the algorithm Value Iteration and the sequence of policies π1, . . . , πk it implicitely generates until some iteration k. We provide performance bounds for non-stationary policies involving the last m generated policies that reduce the state-of-the-art bound for the last stationary policy πk by a factor 1−γ 1−γm . In particular, the use of non-stationary policies allows to reduce the usual asymptotic performance bounds of Value Iteration with errors bounded by ǫ at each iteration from γ (1−γ)2 ǫ to γ 1−γ ǫ, which is significant in the usual situation when γ is close to 1. Given Bellman operators that can only be computed with some error ǫ, a surprising consequence of this result is that the problem of “computing an approximately optimal non-stationary policy” is much simpler than that of “computing an approximately optimal stationary policy”, and even slightly simpler than that of “approximately computing the value of some fixed policy”, since this last problem only has a guarantee of 1 1−γ ǫ. Given a Markov Decision Process, suppose on runs an approximate version of Value Iteration, that is one builds a sequence of value-policy pairs as follows: Pick any πk+1 in Gvk vk+1 = Tπk+1vk + ǫk+1 where v0 is arbitrary, Gvk is the set of policies that are greedy 1 with respect to vk, and Tπk is the linear Bellman operator associated to policy πk. Though it does not appear exactly in this form in the literature, the following performance bound is somewhat standard. Theorem 1. Let ǫ = max1≤j<k ‖ǫj‖sp be a uniform upper bound on the span seminorm 2 of the errors before iteration k. The loss of policy πk is bounded as follows: ‖v∗ − vπk‖∞ ≤ 1 1− γ ( γ − γ 1− γ ǫ+ γ‖v∗ − v0‖sp ) . (1) In Theorem 2, we will prove a generalization of this result, so we do not provide a proof here. Since for any f , ‖f‖sp ≤ 2‖f‖∞, Theorem 1 constitutes a slight improvement and a (finite-iteration) generalization of the following well-known performance bound (see [1]): lim sup k→∞ ‖v∗ − vπk‖∞ ≤ 2γ (1− γ)2 max k ‖ǫk‖∞. 1There may be several greedy policies with respect to some value v, and what we write here holds whichever one is picked. 2For any function f defined on the state space, the span seminorm of f is ‖f‖sp = maxs f(s) − mins f(s). The motivation for using the span seminorm instead of a more usual L∞-norm is twofold: 1) it slightly improves on the state-of-the-art bounds and 2) it simplifies the construction of an example in the proof of the forthcoming Proposition 1.",
    "creator" : "LaTeX with hyperref package"
  }
}