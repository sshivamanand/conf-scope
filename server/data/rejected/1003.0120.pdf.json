{
  "name" : "1003.0120.pdf",
  "metadata" : {
    "source" : "META",
    "title" : "Learning from Logged Implicit Exploration Data",
    "authors" : [ "Alex Strehl" ],
    "emails" : [ "astrehl@gmail.com", "jl@yahoo-inc.com", "shamkakade@gmail.com" ],
    "sections" : [ {
      "heading" : null,
      "text" : "ar X\niv :1\n00 3.\n01 20\nv2 [\ncs .L\nG ]\n1 4\nJu n\nThe primary challenge in a variety of settings is that the exploration policy, in which “offline” data is logged, is not explicitly known. Prior solutions here require either control of the actions during the learning process, recorded random exploration, or actions chosen obliviously in a repeated manner. The techniques reported here lift these restrictions, allowing the learning of a policy for choosing actions given features from historical data where no randomization occurred or was logged.\nWe empirically verify our solution on a reasonably sized set of real-world data obtained from an online advertising company."
    }, {
      "heading" : "1. The Problem",
      "text" : "Consider the advertisement display problem, where a search engine company chooses an ad to display which is intended to interest the user. Revenue is typically provided to the search engine from the advertiser only when the user clicks on the displayed ad. This problem is of intrinsic economic interest, resulting in a substantial fraction of income for several well known companies such as Google, Yahoo!, and Facebook. Further-\nmore, existing trends imply this problem is of growing importance.\nBefore discussing the approach we propose, it’s important to formalize and generalize the problem, and then consider why more conventional approaches can fail.\nThe warm start problem for contextual exploration\nLet X be an arbitrary input space, and A = {1, · · · , k} be a set of actions. An instance of the contextual bandit problem is specified by a distribution D over tuples (x,~r) where x ∈ X is an input and ~r ∈ [0, 1]k is a vector of rewards (Langford & Zhang, 2008). Events occur on a round by round basis where on each round t:\n1. The world draws (x,~r) ∼ D and announces x.\n2. The algorithm chooses an action a ∈ A, possibly as a function of x and historical information.\n3. The world announces the reward ra of action a.\nIt is critical to understand that this is not a standard supervised learning problem, because the reward of other actions a′ 6= a is not revealed.\nThe standard goal in this setting is to maximize the sum of rewards ra over the rounds of interaction. In order to do this well, it is essential to use previously recorded events to form a good policy on the first round of interaction. This is known as the “warm start” problem, and is the subject of this paper. Formally, given a dataset of the form S = (x, a, ra)\n∗ generated by the interaction of an uncontrolled logging policy, we want to construct a policy h maximizing (or approximately maximizing)\nV h := E(x,~r)∼D[rh(x)]."
    }, {
      "heading" : "Approaches that fail",
      "text" : "There are several approaches that may appear to solve this problem, but turn out to be inadequate:\n1. Supervised learning. We could learn a regressor s : X × A → [0, 1] which is trained to predict the reward, on observed events conditioned on the action a and other information x. From this regressor, a policy is derived according to h(x) = argmaxa∈A s(x, a). A flaw of this approach is that the argmax may extend over a set of choices not included in the training data, and hence may not generalize at all (or only poorly). This can be verified by considering some extreme cases. Suppose that there are two actions a and b with action a occurring 106 times and action b occuring 102 times. Since action b occurs only a 10−4 fraction of the time, a learning algorithm forced to trade off between predicting the expected value of ra and rb overwhelmingly prefers to estimate ra well at the expense of accurate estimation for rb. And yet, in application, action b may be chosen by the argmax. This problem is only worse when action b occurs zero times, as might commonly occur in exploration situations.\n2. Bandit approaches. In the standard setting these approaches suffer from the curse of dimensionality, because they must be applied conditioned on X . In particular, applying them requires data linear in X × A, which is extraordinarily wasteful. In essence, this is a failure to take advantage of generalization.\n3. Contextual Bandits. Existing approaches to contextual bandits such as EXP4 (Auer et al., 2002) or Epoch Greedy (Langford & Zhang, 2008), require either interaction to gather data or require knowledge of the probability the logging policy chose the action a. In our case the probability is unknown, and it may in fact always be 1.\n4. Exploration Scavenging. It is possible to recover exploration information from action visitation frequency when a logging policy chooses actions independent of the input x (but possibly dependent on history) (Langford et al., 2008). This doesn’t fit our setting, where the logging policy is surely dependent on the query."
    }, {
      "heading" : "Our Approach",
      "text" : "Our approach naturally breaks down into three steps.\n1. For each event (x, a, ra), estimate the probability\nπ̂(a|x) that the logging policy chooses action a using regression.\n2. For each event, create a synthetic controlled contextual bandit event according to (x, a, ra, 1/max{π̂(a|x), τ}) where τ > 0 is some parameter. The fourth element in this tuple, 1/max{π̂(a|x), τ}, is an importance weight that specifies how important the current event is for training. The parameter τ may appear mysterious at first, but is critical for numeric stability.\n3. Apply an offline contextual bandit algorithm to the set of synthetic contextual bandit events. In our experimental results a variant of the argmax regressor is used with two critical modifications:\n(a) We limit the scope of the argmax to those actions with positive probability.\n(b) We importance weight events so that the training process emphasizes good estimation for each action equally.\nIt should be emphasized that the theoretical analysis in this paper applies to any algorithm for learning on contextual bandit events—we chose this one because it is a simple modification on existing (but fundamentally broken) approaches.\nThree critical questions arise when considering this approach.\n1. What does π̂(a|x) mean, given that the logging policy may be deterministically choosing an action (ad) a given features x? The essential observation is that a policy which deterministically chooses action a on day 1 and then deterministically chooses action b on day 2 can be treated as randomizing between actions a and b with probability 0.5 when the number of events is the same each day, and the events are IID. Thus π̂(a|x) is an estimate of the expected frequency with which action a would be displayed given features x over the timespan of the logged events. In section 3 we show that this approach is sound in the sense that in expectation it provides an unbiased estimate of the value of new policy.\n2. How do the inevitable errors in π̂(a|x) influence the process? It turns out they have an effect which is dependent on τ . For very small values of τ , the estimates of π̂(a|x) must be extremely accurate to yield good performance while for larger values of τ less accuracy is required. In Section 3.1, we prove this robustness property.\n3. What influence does the parameter τ have on the final result? While creating a bias in the estimation process, it turns out that the form of this bias is mild and relatively reasonable—actions which are displayed with low frequency conditioned on x effectively have an underestimated value. This is exactly as expected for the limit where actions have no frequency. In section 3.1 we prove this.\nWe close with a generalization from policy evaluation to policy selection with a sample complexity bound in section 3.2 and then experimental results in section 4 using a real ad dataset."
    }, {
      "heading" : "2. Formal Problem Setup and Assumptions",
      "text" : "Let π1, ..., πT be T policies, where, for each t, πt is a function mapping an input from X to a (possibly deterministic) distribution over A. The learning algorithm is given a dataset of T samples, each of the form (x, a, ra) ∈ X × A × [0, 1], where (x, r) is drawn from D as described in Section 1, and the action a ∼ πt(x) is chosen according to the tth policy. We denote this random process by (x, a, ra) ∼ (D, πt(·|x)). Similarly, interaction with the T policies results in a sequence S of T samples, which we denote S ∼ (D, πt(·|x)) T t=1. The learner is not given prior knowledge of the πt."
    }, {
      "heading" : "Offline policy estimator",
      "text" : "Given a dataset of the form\nS = {(xt, at, rt,at)} T t=1, (1)\nwhere ∀t, xt ∈ X, at ∈ A, rt,at ∈ [0, 1], we form a predictor π̂ : X×A → [0, 1] and then use it with a threshold τ ∈ [0, 1] to form an offline estimator for the value of a policy h.\nFormally, given a new policy h : X → A and a dataset S, define the estimator:\nV̂ hπ̂ (S) = 1\n|S|\n∑\n(x,a,r)∈S\nraI(h(x) = a)\nmax{π̂(a|x), τ} , (2)\nwhere I(·) denotes the indicator function.\nThe purpose of τ is to upper bound the individual terms in the sum and is similar to previous methods (Owen & Zhou, 1998)."
    }, {
      "heading" : "3. Theoretical Results",
      "text" : "We now present our algorithm and main theoretical results. The main idea is twofold: first, we have a policy estimation step, where we estimate the (unknown)\nlogging policy (analyzed in Subsection 3.1); second, we have a policy optimization step, where our we utilize our estimated logging policy (analyzed in Subsection 3.2). Our main result, Theorem 3.2, provides a generalization bound — addressing the issue of how both the estimation and optimization error contribute to the total error.\nThe logging policy πt may be deterministic, implying that conventional approaches relying on randomization in the logging policy are not applicable. We show next that this is ok when the world is IID and the policy varies over its actions. We effectively substitute the standard approach of randomization in the algorithm for randomization in the world.\nA basic claim is that the estimator is expectation equivalent to a stochastic policy defined as follows:\nπ(a|x) = Et∼UNIF(1,...,T )[πt(a|x)], (3)\nwhere UNIF(· · · ) denotes the uniform distribution. The stochastic policy π chooses an action uniformly at random over the T policies πt. Our first result is that the expected value of our estimator is the same when the world chooses actions according to either π or to the sequence of policies πt. Although this result and its proof are straight-forward, it forms the basis for the rest of the results in our paper. Note that the policies πt may be arbitrary but we have assumed that they do not depend on the data used for evaluation. Allowing for the offline evaluation of policies using the same data they are trained on is an important open problem.\nTheorem 3.1. For any contextual bandit problem D with identical draws over T rounds, for any sequence of possibly stochastic policies πt(a|x) with π derived as above, and for any predictor π̂,\nES∼(D,πt(·|x))Tt=1 V̂ h π̂ (S) = E(x,~r)∼D,a∼π(·|x)\nraI(h(x) = a)\nmax{π̂(a|x), τ} (4)\nThis theorem relates the expected value of our estimator when T policies are used to the much simpler and more standard setting where a single fixed stochastic policy is used."
    }, {
      "heading" : "Proof.",
      "text" : "E(x,~r)∼D,a∼π(·|x) raI(h(x) = a)\nmax{π̂(a|x), τ}\n= E(x,~r)∼D ∑\na\nπ(a|x) raI(h(x) = a)\nmax{π̂(a|x), τ}\n= E(x,~r)∼D ∑\na\n1\nT\n∑\nt\nπt(a|x) raI(h(x) = a)\nmax{π̂(a|x), τ}\n= E(x,~r)∼D 1\nT\n∑\nt\n∑\na\nπt(a|x) raI(h(x) = a)\nmax{π̂(a|x), τ}\n= E(x,~r)∼D 1\nT\n∑\nt\nEa∼πt(·|x) raI(h(x) = a)\nmax{π̂(a|x), τ}\n= E(x,~r)T∼DT 1\nT\n∑\nt\nEat∼πt(·|xt) ri,atI(h(xt) = at)\nmax{π̂(at|xt), τ}\n= E(x,~r)T∼DT ,at∼πt(·|x) 1\nT\n∑\nt\nri,atI(h(xt) = at) max{π̂(at|xt), τ}\n= ES∼(D,πt(·|x))Tt=1 1\n|S|\n∑\n(x,a,r)∈S\nraI(h(x) = a)\nmax{π̂(a|x), τ}\nEach equality follows form linearity of expectation, relabeling, or the definition of expectation. The identical draws assumption is used in 6th equality."
    }, {
      "heading" : "3.1. Policy Estimation",
      "text" : "In this section we show that for a suitable choice of τ and π̂ our estimator is sufficiently accurate for evaluating new policies h. We aggressively use the simplification of the previous section, which shows that we can think of the data as generated by a fixed stochastic policy π, i.e. πt = π for all t.\nFor a given estimate π̂ of π define the “regret” to be a function reg :X → [0, 1] by\nreg(x) = max a∈A\n[ (π(a|x) − π̂(a|x))2 ] . (5)\nOur first result is that the new estimator is consistent. In the following theorem statement, I(·) denotes the indicator function, π(a|x) the probability that the logging policy chooses action a on input x, and V̂ hπ̂ our estimator as defined by Equation 2 based on parameter τ .\nLemma 3.1. Let π̂ be any function from X to distributions over actions A. Let h : X → A be any deterministic policy. Let V h(x) = Er∼D(·|x)[rh(x)] denote the expected value of executing policy h on input x. We have that\nEx\n[\nI(π(h(x)|x) ≥ τ) ·\n(\nV h(x)−\n√\nreg(x)\nτ\n)]\n≤\nE[V̂ hπ̂ ] ≤\nV h + Ex\n[\nI(π(h(x)|x) ≥ τ) ·\n√\nreg(x)\nτ\n]\n.\nIn the above, the expectation E[V̂ hπ̂ ] is taken over all sequences of T tuples (x, a, r) where (x, r) ∼ D and a ∼ π(·|x).1\nThis lemma bounds the bias in our estimate of V h(x). There are two sources of bias—one from the error of π̂(a|x) in estimating π(a|x), and the other from threshold τ . For the first source, it’s crucial that we analyze the result in terms of the squared loss rather than (say) ℓ∞ loss, as reasonable sample complexity bounds on the regret of squared loss estimates are achievable.\nProof. Consider a fixed x. Define the following quantity\nδx = π(h(x)|x)\nmax{π̂(h(x)|x), τ} V h(x)− V h(x).\nThe quantity δx is the error of our estimator conditioned on x and satisfies Ex[δx] = E[V̂ h π̂ ] − V h. Note that |δx| ≤ ∣ ∣ ∣ π(h(x)|x) max{π̂(h(x)|x),τ} − 1 ∣ ∣ ∣ .\nWe consider two disjoint cases.\nFirst, suppose that π(h(x)|x) < τ . Then, δx is less than or equal to zero, due to the max operation in the denominator and the fact that rewards are positive. Thus, we have that E[V̂ hπ̂ ] ≤ V\nh, when the expectation is taken over the x for which π(h(x)|x) < τ . As an aside, note that |δx| can have magnitude as large as 1. In other words, in this situation, the estimator may drastically underestimate the value of policy h but will never overestimate it.\nSecond, suppose that π(h(x)|x) ≥ τ . Then, we have that\n|δx|\n≤\n∣ ∣ ∣ ∣ π(h(x)|x) −max{π̂(h(x)|x), τ}\nmax{π̂(h(x)|x), τ}\n∣ ∣ ∣ ∣\n≤\n√\nreg(x)\nτ .\nExpanding δx and taking the expectation over x for which π(h(x)|x) ≥ τ yields the desired result.\nCorollary 3.1. Let π̂ be any function from X to distributions over actions A. Let h : X → A be any\n1Note that varying T does not change the expectation of our estimator, so T has no effect in the theorem.\ndeterministic policy. If π(h(x)|x) ≥ τ for all inputs x, then\n|E[V̂ hπ̂ ]− V h| ≤\n√\nEx[reg(x)]\nτ . (6)\nProof. Follows from examining the second part of the proof of Lemma 3.1 and applying Jensen’s inequality.\nLemma 3.1 shows that the expected value of our estimate V̂ hπ of a policy h is an approximation to a lower bound of the true value of the policy h where the approximation is due to errors in the estimate π̂ and the lower bound is due to the threshold τ . When π̂ = π, then the statement of Lemma 3.1 simplifies to\nEx\n[ I(π(h(x)|x) ≥ τ) · V h(x) ] ≤ E[V̂ hπ̂ ] ≤ V h.\nThus, with a perfect predictor of π, the expected value of the estimator V̂ hπ̂ is a guaranteed lower bound on the true value of policy h. However, as the left-handside of this statement suggests, it may be a very loose bound, especially if the action chosen by h often has a small probability of being chosen by π.\nThe dependence on 1/τ in Lemma 3.1 is somewhat unsettling, but unavoidable. Consider an instance of the bandit problem with a single input x and two actions a1, a2. Suppose that π(a1|x) = τ + ǫ for some positive ǫ and h(x) = a1 is the policy we are evaluating. Suppose further that the rewards are always 1 and that π̂(a1|x) = τ . Then, the estimator satisfies E[V̂ h π̂ ] = π(a1|x)/π̂(a1|x) = (τ + ǫ)/τ . Thus, the expected error in the estimate is E[V̂ hπ̂ ]−V\nh = |(τ + ǫ)/τ − 1| = ǫ/τ , while the regret of π̂ is (π(a1|x)− π̂(a1|x)) 2 = ǫ2."
    }, {
      "heading" : "3.2. Policy Optimization",
      "text" : "The previous section proves that we can effectively evaluate a policy h by observing a stochastic policy π, as long as the actions chosen by h have adequate support under π, specifically π(h(x)|x) ≥ τ for all inputs x. However, we are often interested in choosing the best policy h from a set of policies H after observing logged data. Furthermore, as described in Section 2, the logged data are generated from T fixed, possibly deterministic, policies π1, . . . , πT as described in section 2 rather than a single stochastic policy. As in Section 3 we define the stochastic policy π by Equation 3,\nπ(a|x) = Et∼UNIF(1,...,T )[πt(a|x)]\nThe results of Section 3.1 apply to the policy optimization problem. However, note that the data are now assumed to be drawn from the execution of a sequence\nof T policies π1, . . . , πT , rather than by T draws from π.\nNext, we show that it is possible to compete well with the best hypothesis in H that has adequate support under π (even though the data are not generated from π).\nTheorem 3.2. Let π̂ be any function from X to distributions over actions A. Let H be any set of deterministic policies. Define H̃ = {h ∈ H | π(h(x)|x) > τ, ∀ x ∈ X} and h̃ = argmaxh∈H̃{V h}. Let ĥ = argmaxh∈H{V̂ h π̂ } be the hypothesis that maximizes the empirical value estimator defined in Equation 2. Then, with probability at least 1− δ,\nV ĥ ≥ V h̃ − 2\nτ\n(\n√\nEx[reg(x)] +\n√\nln(2|H |/δ)\n2T\n)\n, (7)\nwhere reg(x) is defined, with respect to π, in Equation 5.\nProof. First, given a dataset (xt, at, rt,at), t = 1, . . . , T , generated by the process described in Section 2, note that it is straight-forward to apply Hoeffding’s bound (Hoeffding, 1963) to the random variables Xt = I(h(xt)=at)rt,at max{π̂(at|xt),τ} , to show that |V̂ hπ̂ − E[V̂ h π̂ ]| ≤ 1 τ √ ln(2/δ) 2T holds with probability at least 1 − δ, for a fixed policy h. It is important to note here that the Xt are independent but not identical, since the action at time t is chosen according to policy πt. The previous argument can be made to hold for all h ∈ H by replacing δ with δ/|H | and applying the union bound.\nLet Q = (D, πt(·|x)) T t=1 be the distribution over sequences of T samples (x, a, ra) ∈ X ×A× [0, 1] generated by executing the T logging policies πt in sequence, as described in section 2. Let Q′ = (D, a ∼ π(·|x)) be the distribution over samples of the form (x, a, ra) ∈ X × A × [0, 1] such that (x, r) ∼ D and a ∼ π(·|x). The T samples used in the estimator V̂ hπ are obtained from a single draw from Q.\nNow, we have that\nV ĥ\n≥ EQ′ [V̂ ĥ π̂ ]− Ex\n[\nI(π(ĥ(x)|x) ≥ τ) ·\n√\nreg(x)\nτ\n]\n≥ EQ′ [V̂ ĥ π̂ ]− Ex\n[\n√\nreg(x)\nτ\n]\n≥ EQ′ [V̂ ĥ π̂ ]−\n√\nEx[reg(x)]\nτ\n= EQ[V̂ ĥ π̂ ]−\n√\nEx[reg(x)]\nτ\n≥ V̂ ĥπ̂ −\n√\nEx[reg(x)]\nτ −\n1\nτ\n√\nln(2|H |/δ)\n2T\n≥ V̂ h̃π̂ −\n√\nEx[reg(x)]\nτ −\n1\nτ\n√\nln(2|H |/δ)\n2T\n≥ EQ[V̂ h̃ π̂ ]−\n√\nEx[reg(x)]\nτ −\n2\nτ\n√\nln(2|H |/δ)\n2T\n= EQ′ [V̂ h̃ π̂ ]−\n√\nEx[reg(x)]\nτ −\n2\nτ\n√\nln(2|H |/δ)\n2T\n≥ V h̃ − 2 √ Ex[reg(x)]\nτ −\n2\nτ\n√\nln(2|H |/δ)\n2T .\nThe first step follows from Lemma 3.1. The second from the fact that regret is always non-negative. The third from an application of Jensen’s inequality. The forth and eighth from an application of Theorem 3.1. The fifth and seventh from an application of Hoeffding’s bound as detailed above. The sixth from the definition of h̃. The final step follows from Corollary 3.1 and observing that h̃ ∈ H̃.\nThe proof of Theorem 3.2 relies on the lower-bound property of our estimator (the left-hand side of Inequality stated in Lemma 3.1). In other words, if H contains a very good policy that has little support under π, we will not be able to detect that by our estimator. On the other hand, our estimation is safe in the sense that we will never drastically overestimate the value of any policy in H. This “underestimate, but don’t overestimate” property is critical to the application of optimization techniques, as it implies we can use an unrestrained learning algorithm to derive a warm start policy."
    }, {
      "heading" : "4. Empirical Evaluation",
      "text" : "We evaluated our method on a real-world Internet advertising dataset. We have obtained proprietary data from an online advertising company, covering a period of approximately one month. The data are comprised\nof logs of events (x, a, y), where each event represents a visit by a user to a particular web page x, from a set of web pages X . From a large set of advertisements A, the commercial system chooses a single ad a for the topmost, or most prominent position. It also chooses additional ads to display, but these were ignored in our test. The output y is an indicator of whether the user clicked on the ad or not.\nThe total number of ads in the data set is approximately 880, 000. The training data consist of 35 million events. The test data contain 19 million events occurring after the events in the training data. The total number of distinct web pages is approximately 3.4 million.\nWe trained a policy h to choose an ad, based on the current page, to maximize the probability of click. For the purposes of learning, each ad and page was represented internally as a sparse high-dimensional feature vector. The features correspond to the words that appear in the page or ad, weighted by the frequency with which they appear. Each ad contains, on average, 30 ad features and each page, approximately 50 page features. The particular form of f was linear over all features of its input (x, y), which is a sparse high-dimensional feature vector representing the combination of the page and ad.2 For instance, every pair of possible words had a corresponding feature. For example, given the two words “apple” and “ipod”, the corresponding feature “apple-ipod” has a value of 0.25 when the first word, “apple”, appeared in the page x with frequency 0.5 and the second word, “ipod”, appeared in the ad a with frequency 0.5.\nUsing all the data, we modeled the logging policy using simple empirical estimation:\nπ̂(a|x) = |{t|(at = a) ∧ (xt = x)}|\n|{t|xt = x}| . (8)\nIn words, for each page and ad pair (x, a), we computed the number of times a appeared on page x in the data. The decision to use all of the data requires careful consideration. Some alternatives to consider are:\n1. Training data only. Since the set of ads changes over time, many ads appearing in the test data do not occur at all in the training data. Consequently, reliably predicting the performance on test data is problematic.\n2. Training data for training set and test data for test set. This approach has an inherent bias to-\n2Technically the feature vector that the regressor uses is the Cartesian product of the page and ad vectors.\nwards incorrectly high scores on the test set. In an extreme case, suppose that only one ad appears on a (rare) webpage in the test set. Then, any policy selecting from amongst the set of appearing ads must select this ad.\n3. All data. This approach means that policies must generally select from a larger set of ads than are available at any moment in time for the live system, implying that the policy evaluation is generally pessimistic. Note that the logging policy in contrast is optimistically evaluated, because the set of test-time available ads is smaller than the set of ads available over both test-time and traintime ads, implying the frequency estimates for test-time ads on the train+test dataset are generally smaller than an estimate using just test-time ads.3 These smaller-than-necessary frequency estimates imply that the logging policy evaluation is optimistic since events are weighted by the inverse frequency. Consequently, this choice provides a conservative estimate for new policies and an optimistic choice for the older (logging) policy.\nThe particular policy that was optimized, had an argmax form: h(x) = argmaxa∈C(X){f(x, a)}, with a crucial distinction from previous approaches in how f(x, a) was trained. Here f : X×A → [0, 1] is a regression function that is trained to estimate probability of click, and C(X) = {a ∈ A | π̂(a|x) > 0} is a set of feasible ads.\nThe training samples were of the form (x, a, y), where y = 1 if the ad a was clicked after being shown on page x or y = 0 if it wasn’t clicked. The regressor f was chosen to approximately minimize the weighted squared loss: (y−f(x,a)) 2\nmax{π̂(at|xt),τ} .\nStochastic gradient descent was used to minimize the squared loss on the training data.\nDuring the evaluation, we computed the estimator on\n3As an extreme example, suppose we log data for two days and we use the first day for training and the second day for testing. Suppose that only a single ad a1 appears in the train set, and a single ad a2 appears in the test set, due to the fact that the budget for ad a1 ran out after the first day. Our empirical estimate of π̂(a2|x) on the test set used in the denominator of our estimator (Equation 8) will be 1/2. In fact the true probability of a2 on the test set is 1. Thus, the value of the logging policy will be over estimated by a factor of 2. Suppose further that ad a1 is indeed better than a2. The evaluation of a policy that always chooses the better ad, a1, using Equation 8 will be zero, a drastic underestimate of its true value.\nthe test data (xt, at, yt):\nV̂ hπ̂ = 1\nT\nT ∑\nt=1\nytI(h(xt) = at)\nmax{π̂(at|xt), τ} . (9)\nAs mentioned in the introduction, this estimator is biased due to the use of the parameter τ > 0. As shown in the analysis of Section 3, this bias typically results in an underestimate of the true value of the policy h.\nWe experimented with different thresholds τ and parameters of our learning algorithm.4"
    }, {
      "heading" : "4.1. Results",
      "text" : "Method τ Estimate Interval Learned 0.01 0.0193 [0.0187,0.0206] Random 0.01 0.0154 [0.0149,0.0166] Learned 0.05 0.0132 [0.0129,0.0137] Random 0.05 0.0111 [0.0109,0.0116] Naive 0.05 0.0 [0,0.0071]\nThe Interval column is computed using the relative entropy form of the Chernoff bound with δ = 0.05 which holds under the assumption that variables, in our case the samples used in the computation of the estimator (Equation 9), are IID. Note that this computation is slightly complicated because the range of the variables is [0, 1/τ ] rather than [0, 1] as is typical. This is handled by rescaling by τ , applying the bound, and then rescaling the results by 1/τ .\nThe “Random” policy is the policy that chooses randomly from the set of feasible ads: Random(x) = a ∼ UNIF(C(X)), where UNIF(·) denotes the uniform distribution.\nThe “Naive” policy corresponds to the theoretically flawed supervised learning approach detailed in the introduction. The evaluation of this policy is quite expensive, requiring one evaluation per ad per example, so the size of the test set is reduced to 8373 examples with a click, which reduces the significance of the results. We bias the results towards the naive policy by choosing the chronologically first events in the test set (i.e. the events most similar to those in the training set). Nevertheless, the naive policy receives 0 reward, which is significantly less than all other approaches. A possible fear with the evaluation here is that the naive policy is always finding good ads that simply weren’t explored. A quick check shows that this is not correct– the naive argmax simply makes implausible choices.\n4For stochastic gradient descent, we varied the learning rate over 5 fixed numbers (0.2, 0.1, 0.05, 0.02, 0.01) using 1 pass over the data. We report on the test results for the value with the best training error.\nNote that we report only evaluation against τ = 0.05, as the evaluation against τ = 0.01 is not significant, although the reward obviously remains 0.\nThe “Learned” policies do depend on τ . As suggested by Theorem 3.2, as τ is decreased, the effective set of hypotheses we compete with is increased, thus allowing for better performance of the learned policy. Indeed, the estimates for both the learned policy and the random policy improve when we decrease τ from 0.05 to 0.01.\nThe empirical click-through rate on the test set was 0.0213, which is slightly larger than the estimate for the best learned policy. However, this number is not directly comparable since the estimator provides a lower bound on the true value of the policy due to the bias introduced by a nonzero τ and because any deployed policy chooses from only the set of ads which are available to display rather than the set of all ads which might have been displayable at other points in time.\nThe empirical results are generally consistent with the theoretical approach outlined here—they provide a consistently pessimal estimate of policy value which nevertheless has sufficient dynamic range to distinguish learned policies from random policies, learned policies over larger spaces (smaller τ) from smaller spaces (larger τ), and the theoretically unsound naive approach from sounder approaches which choose amongst the the explored space of ads."
    }, {
      "heading" : "5. Conclusion",
      "text" : "We stated, justified, and evaluated theoretically and empirically the first method for solving the warm start problem for exploration from logged data with controlled bias and estimation. This problem is of obvious interest to applications for internet companies that recommend content (such as ads, search results, news stories, etc...) to users.\nHowever, we believe this also may be of interest for other application domains within machine learning. For example, in reinforcement learning, the standard approach to offline policy evaluation is based on importance weighted samples (Kearns et al., 2000; Precup et al., 2000). The basic results stated here could be applied to RL settings, eliminating the need to know the probability of a chosen action explicitly, allowing an RL agent to learn from external observations of other agents.\nThe main restrictive assumption adopted by the Exploration Scavenging paper (Langford et al., 2008) is\nthat the logging policy chooses actions independently of the input. We have introduced a new method that works when this assumption is violated. On the other hand, we have required the logging policy be a sequence of fixed, possibly deterministic, policies, whereas the Exploration Scavenging paper allowed for the use of logging policies that learn and adapt over time. An interesting situation occurs when you allow πt to depend on the history up to time t. In this setting the policy may both adapt (like in the Exploration Scavenging paper) and choose actions dependent on the current input. Is there an offline policy estimator which can work in this setting? The most generic answer is no, but there may exist some natural constraint which encapsulates the approach discussed here, as well as in the earlier paper."
    }, {
      "heading" : "Auer, Peter, Bianchi, Nicolò C., Freund, Yoav, and",
      "text" : "Schapire, Robert E. The nonstochastic multiarmed bandit problem. SIAM Journal on Computing, 32(1):48–77, 2002.\nHoeffding, Wassily. Probability inequalities for sums of bounded random variables. Journal of the American Statistical Association, 58:13–30, 1963."
    }, {
      "heading" : "Kearns, Michael, Mansour, Yishay, and Ng, Andrew Y.",
      "text" : "Approximate planning in large pomdps via reusable trajectories. In NIPS, 2000.\nLangford, John and Zhang, Tong. The epoch-greedy algorithm for multi-armed bandits with side information. In Advances in Neural Information Processing Systems 20, pp. 817–824, 2008."
    }, {
      "heading" : "Langford, John, Strehl, Alexander L., and Wortman, Jenn.",
      "text" : "Exploration scavenging. In ICML-08: Proceedings of the 25rd international conference on Machine learning, 2008."
    }, {
      "heading" : "Owen, Art and Zhou, Yi. Safe and effective importance",
      "text" : "sampling. Journal of the American Statistical Association, 95:135–143, 1998.\nPrecup, Doina, Sutton, Rich, and Singh, Satinder. Eligibility traces for off-policy policy evaluation. In ICML, 2000."
    } ],
    "references" : [ {
      "title" : "The nonstochastic multiarmed bandit problem",
      "author" : [ "Auer", "Peter", "Bianchi", "Nicolò C", "Freund", "Yoav", "Schapire", "Robert E" ],
      "venue" : "SIAM Journal on Computing,",
      "citeRegEx" : "Auer et al\\.,? \\Q2002\\E",
      "shortCiteRegEx" : "Auer et al\\.",
      "year" : 2002
    }, {
      "title" : "Probability inequalities for sums of bounded random variables",
      "author" : [ "Hoeffding", "Wassily" ],
      "venue" : "Journal of the American Statistical Association,",
      "citeRegEx" : "Hoeffding and Wassily.,? \\Q1963\\E",
      "shortCiteRegEx" : "Hoeffding and Wassily.",
      "year" : 1963
    }, {
      "title" : "Approximate planning in large pomdps via reusable trajectories",
      "author" : [ "Kearns", "Michael", "Mansour", "Yishay", "Ng", "Andrew Y" ],
      "venue" : "In NIPS,",
      "citeRegEx" : "Kearns et al\\.,? \\Q2000\\E",
      "shortCiteRegEx" : "Kearns et al\\.",
      "year" : 2000
    }, {
      "title" : "The epoch-greedy algorithm for multi-armed bandits with side information",
      "author" : [ "Langford", "John", "Zhang", "Tong" ],
      "venue" : "In Advances in Neural Information Processing Systems",
      "citeRegEx" : "Langford et al\\.,? \\Q2008\\E",
      "shortCiteRegEx" : "Langford et al\\.",
      "year" : 2008
    }, {
      "title" : "Exploration scavenging",
      "author" : [ "Langford", "John", "Strehl", "Alexander L", "Wortman", "Jenn" ],
      "venue" : "Proceedings of the 25rd international conference on Machine learning,",
      "citeRegEx" : "Langford et al\\.,? \\Q2008\\E",
      "shortCiteRegEx" : "Langford et al\\.",
      "year" : 2008
    }, {
      "title" : "Safe and effective importance sampling",
      "author" : [ "Owen", "Art", "Zhou", "Yi" ],
      "venue" : "Journal of the American Statistical Association,",
      "citeRegEx" : "Owen et al\\.,? \\Q1998\\E",
      "shortCiteRegEx" : "Owen et al\\.",
      "year" : 1998
    }, {
      "title" : "Eligibility traces for off-policy policy evaluation",
      "author" : [ "Precup", "Doina", "Sutton", "Rich", "Singh", "Satinder" ],
      "venue" : "In ICML,",
      "citeRegEx" : "Precup et al\\.,? \\Q2000\\E",
      "shortCiteRegEx" : "Precup et al\\.",
      "year" : 2000
    } ],
    "referenceMentions" : [ {
      "referenceID" : 0,
      "context" : "Existing approaches to contextual bandits such as EXP4 (Auer et al., 2002) or Epoch Greedy (Langford & Zhang, 2008), require either interaction to gather data or require knowledge of the probability the logging policy chose the action a.",
      "startOffset" : 55,
      "endOffset" : 74
    }, {
      "referenceID" : 3,
      "context" : "It is possible to recover exploration information from action visitation frequency when a logging policy chooses actions independent of the input x (but possibly dependent on history) (Langford et al., 2008).",
      "startOffset" : 184,
      "endOffset" : 207
    } ],
    "year" : 2010,
    "abstractText" : "We provide a sound and consistent foundation for the use of nonrandom exploration data in “contextual bandit” or “partially labeled” settings where only the value of a chosen action is learned. The primary challenge in a variety of settings is that the exploration policy, in which “offline” data is logged, is not explicitly known. Prior solutions here require either control of the actions during the learning process, recorded random exploration, or actions chosen obliviously in a repeated manner. The techniques reported here lift these restrictions, allowing the learning of a policy for choosing actions given features from historical data where no randomization occurred or was logged. We empirically verify our solution on a reasonably sized set of real-world data obtained from an online advertising company.",
    "creator" : "LaTeX with hyperref package"
  }
}