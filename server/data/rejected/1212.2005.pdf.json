{
  "name" : "1212.2005.pdf",
  "metadata" : {
    "source" : "META",
    "title" : "The Dynamic Controllability of Conditional STNs with Uncertainty",
    "authors" : [ "Luke Hunsberger", "Roberto Posenato", "Carlo Combi" ],
    "emails" : [ "hunsberg@cs.vassar.edu", "roberto.posenato@univr.it", "carlo.combi@univr.it" ],
    "sections" : [ {
      "heading" : "Introduction and Motivation",
      "text" : "Workflow systems have been used to model business, manufacturing and medical-treatment processes. However, as Bettini et al. (2002) observed: “It would greatly enhance the capabilities of current workflow systems if quantitative temporal constraints on the duration of activities and their synchronization requirements can be specified and reasoned about.” Toward that end, Combi et al. (2007; 2009; 2010) presented a new workflow model that accommodates the following key features: tasks with uncertain/uncontrollable durations; temporal constraints among tasks; and branching paths, where the branch taken is not known in advance. Fig. 1 shows a sample workflow from the health-care domain, similar to one presented by Combi and Posenato (2009). In this workflow, all times are in minutes, and:\n• tasks are represented by rounded boxes; • branching points are represented by nine-sided boxes\ncalled split or join connectors1;\n• tasks and connectors have duration attributes, [x, y]; ∗Funded in part by the Phoebe H. Beadle Science Fund. Copyright c© 2012, Association for the Advancement of Artificial Intelligence (www.aaai.org). All rights reserved.\n1Combi and Posenato (2009) used diamonds for connectors.\n• the flow, represented by solid arrows moving downward, specifies a partial order among tasks and connectors;\n• intervals between consecutive tasks or connectors—called delays—are bounded by intervals of the form [x, y];\n• additional temporal constraints are represented by dashed arrows, also labeled by intervals of the form [x, y].\nThe S and E notations on temporal constraints are used to indicate whether a constraint applies to the starting or ending times of the tasks/connectors it links. For example, the notation S[136, 150]E on the arrow from T4 to T5 indicates that the duration of the interval from the start of T4 to the end of T5 must be in the range, [136, 150].\nThe tasks and their uncontrollable durations are:\nT1: Pre-hospital issues, 2–4 min.\nT2: Initial patient evaluation, 5–20 min.\nT3: Percutaneous Coronary Intervention, 25–45 min.\nT4: Reperfusion Fibrinolytic therapy, 80–90 min.\nT5: Ancillary therapy, 10–20 min.\nThe semantics of execution for workflows stipulates that:\nar X\niv :1\n21 2.\n20 05\nv1 [\ncs .A\nI] 1\n0 D\nec 2\n01 2\n• The agent is free to choose starting times for all tasks, but does not control their durations; instead, the agent merely observes the durations of tasks in real time.\n• The agent is free to choose starting and ending times for all connectors, but does not control which branch a split connector will follow; instead, the agent merely observes which branch is followed in real time.2\nIf a workflow admits a strategy for executing its tasks and connectors such that\n• its execution decisions depend only on past observations of task durations and branch directions; and\n• all delays and temporal constraints are guaranteed to be satisfied no matter how the task durations turn out and no matter which branches are taken,\nthen that workflow is said to be history-dependent controllable (Combi and Posenato 2009; 2010). The workflow in Fig. 1 is history-dependent controllable. A successful strategy must restrict the interval for B2 to be [32, 42] if the branch containing task T4 was taken, or [1, 31] if the branch containing task T3 was taken. Combi and Posenato (2010) presented an exponential-time algorithm for determining whether any workflow is history-dependent controllable.\nThe rest of this paper introduces a Conditional Simple Temporal Network with Uncertainty (CSTNU) that provides a formal representation for the time-points and temporal constraints underlying workflows. A CSTNU is shown to generalize three existing kinds of temporal networks from the literature. Similarly, the concept of dynamic controllability for a CSTNU is shown to generalize analogous concepts for existing kinds of networks, while also being related to the history-dependent controllability for a workflow."
    }, {
      "heading" : "Related Temporal Networks",
      "text" : "This section summarizes three kinds of temporal networks from the literature: Simple Temporal Networks, Conditional Simple Temporal Problems, and Simple Temporal Networks with Uncertainty. For convenience, we replace the Conditional Simple Temporal Problem with an equivalent alternative: the Conditional Simple Temporal Network."
    }, {
      "heading" : "Simple Temporal Networks",
      "text" : "Definition 1 (STN). (Dechter, Meiri, and Pearl 1991) A Simple Temporal Network (STN) is a pair, (T , C), where T is a set of real-valued variables, called time-points, and C is a set of binary constraints, called simple temporal constraints. Each constraint in C has the form, Y − X ≤ δ, where X and Y are any time-points in T , and δ is any real number. A solution to the STN, (T , C), is a complete set of assignments to the variables in T that satisfy all of the constraints in C."
    }, {
      "heading" : "Conditional Simple Temporal Networks",
      "text" : "A Conditional Simple Temporal Problem (CSTP) augments an STN to include observation time-points (or observation nodes) (Tsamardinos, Vidal, and Pollack 2003). Each observation time-point has a proposition associated with it. When\n2This paper restricts attention to conditional connectors. Combi and Posenato (2009) discuss additional kinds of connectors.\nthe observation time-point is executed, the truth-value of its associated proposition becomes known. In addition, each time-point has a label that restricts the scenarios in which that time-point can be executed. For example, a label, A¬B, on a time-point would indicate that that time-point could only be executed in scenarios where the proposition A was true and B was false.\nAlthough not included in the formal definition, the authors made the following reasonability assumptions about CSTPs:\n(A1) A CSTP should not include any constraint relating time-points whose labels are inconsistent.\n(A2) If the label on some time-point T includes a propositionQ, then the observation node, TQ, associated with Q must be executed in all cases in which T is executed, and TQ must be executed before T (i.e., TQ < T ).3\nThis section defines a Conditional Simple Temporal Network (CSTN), which is the same as a CSTP except that: • the CSTN definition explicitly incorporates the reason-\nability assumptions (A1) and (A2) (cf. conditions WD1 and WD2 in Defn. 4, below); and\n• each constraint in a CSTN has a label associated with it that subsumes the labels of the time-points it constrains (cf. conditions WD1 and WD3 in Defn. 4, below).\nPutting labels on the constraints will facilitate the propagation of constraints, as is discussed later on. Definition 2 (Label, Label Universe). Given a set P of propositional letters, a label is any (possibly empty) conjunction of (positive or negative) literals from P . For convenience, the empty label is denoted by . The label universe of P , denoted by P ∗, is the set of all labels whose literals are drawn from P .\nFor example, if P = {A,B}, then P∗ = { , A,B,¬A,¬B,AB,A¬B,¬AB,¬A¬B}.\nDefinition 3 (Consistent labels, label subsumption). • Two labels, `1 and `2, are called consistent, denoted by Con(`1, `2), if and only if `1 ∧ `2 is satisfiable. • A label `1 subsumes a label `2, denoted by Sub(`1, `2),\nif and only if |= (`1 ⇒ `2). To facilitate comparison with the definition of a CSTP, which is not repeated here due to space limitations, the order of arguments in a CSTN is the same as in a CSTP. Definition 4 (CSTN). A Conditional Simple Temporal Network (CSTN) is a tuple, 〈T , C, L,OT ,O, P 〉, where: • T is a finite set of real-valued time-points; • P is a finite set of propositional letters (or propositions); • L : T → P ∗ is a function that assigns a label to each\ntime-point in T ; • OT ⊆ T is a (finite) set of observation time-points; • O : P → OT is a bijection that associates a unique\nobservation time-point to each propositional letter; 3Simple temporal constraints do not allow for strict inequalities such as Y < X; however, in practice, a constraint such as Y −X ≤ − , for some small > 0, achieves the desired effect.\n• C is a set of labeled simple temporal constraints, each having the form, (Y −X ≤ δ, `), where X,Y ∈ T , δ is a real number, and ` ∈ P ∗;\n(WD1) for any labeled constraint, (Y −X ≤ δ, `) ∈ C, the label ` is satisfiable and subsumes both L(X) and L(Y );\n(WD2) for each p ∈ P , and each T ∈ T for which either p or ¬p appears in T ’s label, ◦ Sub(L(T ), L(O(p)), and ◦ (O(p)− T ≤ − , L(T )) ∈ C, for some > 0; and\n(WD3) for each labeled constraint, (Y − X ≤ δ, `), and for each p ∈ P for which either p or ¬p appears in `, ◦ Sub(`, L(O(p))). The following definitions will facilitate the proofs of the\nsubsequent lemmas.\nDefinition 5 (C , LT and O∅). • If C is a set of simple temporal constraints, then C is the\ncorresponding set of labeled simple temporal constraints, where each constraint is labeled by the empty label, . In particular, C = {(Y −X ≤ δ, ) | (Y −X ≤ δ) ∈ C} • For any set T of time-points, LT denotes the labeling\nfunction that assigns the empty label to each time-point. Thus, LT (T ) = for all T ∈ T . When the context allows, we may write L instead of LT . • O∅ denotes the unique function whose domain and range\nare both empty. Thus, O∅ : ∅ → ∅. The following lemmas show that any STN or CSTP can\nbe embedded within a CSTN.\nLemma 1. Let (T , C) be any STN. Then 〈T , C , L , ∅,O∅, ∅〉 is a CSTN. Proof. We need only check that the conditions WD1, WD2 and WD3 from the definition of a CSTN are satisfied. WD2 and WD3 are trivially satsified since P = ∅. As for WD1, each constraint in C has as its label, which is satisfiable. Furthermore,L assigns the empty label to every node. Thus, the empty label on each constraint trivially subsumes the empty label on the relevant nodes.\nLemma 2 (Any CSTP is a CSTN). Let 〈V,E, L,OV,O, P 〉 be any CSTP, as defined by Tsamardinos et al. (2003), that satisfies the reasonability assumptions, A1 and A2. Let S = 〈V, C, L,OV,O, P 〉, where:4\nC = ⋃\n(a≤Y−X≤b)∈E\n{(a ≤ Y −X ≤ b, L(X) ∧ L(Y ))}"
    }, {
      "heading" : "Then S is a CSTN.",
      "text" : "Proof. Conditions WD1, WD2 and WD3 in the definition of a CSTN (Defn. 4) are satisfied as follows.\n(WD1) Each labeled constraint in C has the form, (V −U ≤ δ, L(U)∧L(V )). Note that L(U)∧L(V ) subsumes both L(U) and L(V ). Furthermore, by assumption A1, L(U) and L(V ) must be mutually satisfiable.\n(WD2) WD2 is simply a restatement of assumption A2.\n4 For convenience, we use the expression, a ≤ Y −X ≤ b, to represent the pair of constraints, Y −X ≤ b and X − Y ≤ −a.\n(WD3) Each constraint in C has the form, (V − U ≤ δ, `), where ` = L(U) ∧ L(V ). By WD2, L(U) must subsume L(O(p)). But then ` does too."
    }, {
      "heading" : "Simple Temporal Networks with Uncertainty",
      "text" : "A Simple Temporal Network with Uncertainty (STNU) augments an STN to include a set, L, of contingent links (Morris, Muscettola, and Vidal 2001). Each contingent link has the form, (A, x, y, C), where A and C are time-points, and 0 < x < y <∞. A is called the activation time-point; C is called the contingent time-point. An agent typically activates a contingent link by executing A. After doing so, the execution of C is out of the agent’s control; however, C is guaranteed to execute such that the temporal difference, C − A, is between x and y. Contingent links are used to represent actions with uncertain durations; the agent initiates the action, but then merely observes its completion in real time. Definition 6 (STNU). A Simple Temporal Network with Uncertainty (STNU) is a triple, (T , C,L), where: • (T , C) is an STN; and • L is a set of contingent links, each having the form, (A, x, y, C), whereA and C are distinct time-points in T , 0 < x < y <∞, and: ◦ for each (A, x, y, C) ∈ L, C contains the constraints,\n(x ≤ C −A ≤ y) (cf. Footnote 4); ◦ if (A1, x1, y1, C1) and (A2, x2, y2, C2) are distinct\ncontingent links in L, then C1 and C2 are distinct timepoints; and ◦ the contingent time-point for one contingent link may\nserve as the activation time-point for another—thus, contingent links may form chains or trees—however, contingent links may not form loops.\nAs will be seen, the semantics for contingent links is built into the definition of dynamic controllability.\nNote that if (T , C) is an STN, then (T , C, ∅) is an STNU."
    }, {
      "heading" : "Conditional STNs with Uncertainty",
      "text" : "This section introduces a Conditional STN with Uncertainty (CSTNU) which combines features of CSTNs and STNUs. Definition 7 (bCc). If C is a set of labeled constraints of the form, (Y −X ≤ δ, `), then bCc is the corresponding set of unlabeled constraints: bCc = {(Y −X ≤ δ) | (Y −X ≤ δ, `) ∈ C for some `}.\nDefinition 8 (CSTNU). A Conditional STN with Uncertainty (CSTNU) is a tuple, 〈T , C, L,OT ,O, P,L〉, where: • 〈T , C, L,OT ,O, P 〉 is a CSTN; • (T , bCc,L) is an STNU; and • for each (A, x, y, C) ∈ L, L(A) = L(C), and C contains the labeled constraints, (x ≤ C −A ≤ y, L(A)).5\nThe following lemmas show that any STNU or CSTN can be embedded within a CSTNU. Lemma 3. If (T , C,L) is an STNU, then 〈T , C , L , ∅,O∅, ∅,L〉 is a CSTNU.\n5(x ≤ C − A ≤ y, L(A)) is shorthand for the pair of labeled constraints, (A− C ≤ −x, L(A)) and (C −A ≤ y, L(A)).\nProof. Let (T , C,L) be any STNU. Then (T , C) is an STN. By Lemma 1, 〈T , C , L , ∅,O∅, ∅〉 is a CSTN. In addition, since bC c is necessarily the same as C, (T , bC c,L) must be an STNU. Finally, for each (A, x, y, C) ∈ L, C contains the constraints, (x ≤ C −A ≤ y), which implies that C contains the labeled constraints, (x ≤ C −A ≤ y, ). Since L assigns the empty label to each node, the last condition of Defn. 8 is satisfied.\nLemma 4. If 〈T , C, L,OT ,O, P 〉 is an CSTN, then 〈T , C, L,OT ,O, P, ∅〉 is a CSTNU. Proof. Let 〈T , C, L,OT ,O, P 〉 be any CSTN. Then (T , bCc) is an STN, whence (T , bCc, ∅) is an STNU. Since L is empty, the last condition of Defn. 8 is satisfied."
    }, {
      "heading" : "The CSTNU Underlying a Worklow",
      "text" : "Recall the sample workflow from Fig. 1. This workflow has an underlying CSTNU that is derived by\n• replacing each task with a corresponding contingent link; • replacing each split connector by a pair of (starting and\nending) time-points, linked by a duration constraint, and where the ending time-point is an observation node for a proposition whose possible values correspond to the different branching decisions; and\n• replacing each join connector by a pair of time-points, linked by a duration constraint.\nFig. 2 shows the CSTNU underlying the workflow from Fig. 1. In this CSTNU, each contingent link from Ai to Ci corresponds to the task Ti from the workflow; and observation nodes are circled. Note that the branch containing task T4 is labeled by P , whereas the alternative branch containing task T3 is labeled by ¬P . Similarly, the branch containing task T5 is labeled by Q, and the alternative branch is labeled by ¬Q. Note, too, that labels on edges subsume the la-\nbels on the time-points they connect. Dashed edges are kept dashed to facilitate comparison with the workflow in Fig. 1."
    }, {
      "heading" : "Dynamic Controllability",
      "text" : "This section combines the semantics of CSTNs and STNUs to generate a definition for the dynamic controllability of a CSTNU. Because the semantics for the corresponding notions involve similar definitions, in some cases the various terms, such as history or dynamic will be given prefixes or superscripts to indicate the kinds of networks or situations/scenarios they apply to. In addition, we use the term, history, instead of pre-history, for convenience."
    }, {
      "heading" : "Dynamic Consistency of CSTNs",
      "text" : "A CSTP is called dynamically consistent if there exists a strategy for executing its time-points that guarantees the satisfaction of all relevant constraints no matter how the truth values of the various observations turn out (Tsamardinos, Vidal, and Pollack 2003). The strategy is dynamic in that its execution decisions can react to past observations, but not those in the future. This section defines the dynamic consistency of a CSTN in an equivalent way; however, for convenience, there are some superficial differences in notation and organization. Afterward, we provide a second characterization of the dynamic property that will be useful later on.\nDefinition 9 (Scenario/Interpretation Function). A scenario (or interpretation function) over a set P of propositional letters is a function, s : P → {true, false}, that assigns a truth value to each letter in P .6 As is standard practice in propositional logic, any interpretation function can be extended to provide the truth value for every possible formula involving the letters in P . Thus, any interpretation function, s, can provide the truth value of each label involving letters in P . For any label, `, the truth value of ` in the scenario, s, is denoted by s(`). Let IP (or simply I) denote the set of all interpretation functions (or complete execution scenarios) over P .\nDefinition 10 (Schedule). A schedule for a set of timepoints T is a mapping, ψ : T → R that assigns a real number to each time-point in T . The set of all schedules for any subset of T is denoted by ΨT (or Ψ if the context allows).\nBelow, the projection of a CSTN, S, onto a scenario, s, is defined to be the STN that contains all of the time-points and constraints from S whose labels are true under s (i.e., the time-points that must be executed under s, and the constraints that must be satisfied under s).\nDefinition 11 (Scenario Projection for a CSTN). Let S = 〈T , C, L,OT ,O, P 〉 be any CSTN, and s any interpretation function (i.e., complete scenario) for the letters in P . The projection of S onto the scenario s—denoted by scPrj (S, s)—is the STN, (T +s , C+s ), where: • T +s = {T ∈ T : s(L(T )) = true}; and • C+s = {(Y −X ≤ δ) | for some `, (Y −X ≤ δ, `) ∈ C\nand s(`) = true}\n6Unlike the prior work on CSTPs, we restrict attention to complete scenarios because the subsequent definition of a history requires a scenario to entail the outcome of all past observations.\nRecall that condition WD1 from the definition of a CSTN stipulates that the label on any constraint must subsume the labels on the time-points it connects. Thus, for any constraint in C+s , the time-points it connects must belong to the set T +s . Definition 12 (Execution Strategy for a CSTN). Let S = 〈T , C, L,OT ,O, P 〉 be any CSTN. An execution strategy for S is a mapping, σ : I → ΨT , such that for each scenario, s ∈ I, the domain of σ(s) is T +s (cf. Defn. 11). If, in addition, for each scenario, s, the schedule σ(s) is a solution to the scenario projection, scPrj (S, s), then σ is called viable. In any case, the execution time for the time-point X in the schedule σ(s) is denoted by [σ(s)]X .\nBelow, the history of a time-point, X , relative to a scenario, s, and strategy, σ, is defined to be the set of observations made before the time at whichX is executed according to the schedule, σ(s) (i.e., before the time [σ(s)]X ).7\nDefinition 13 (Scenario history for a CSTN). Let S = 〈T , C, L,OT ,O, P 〉 be any CSTN, s any scenario, σ any execution strategy for S, and X any time-point in T +s (cf. Defn. 11). The history of X in the scenario s, for the strategy σ—denoted by scHst(X, s, σ)—is given by:\nscHst(X, s, σ) = {(p, s(p)) | O(p) ∈ T +s , and [σ(s)]O(p) < [σ(s)]X}\nNote that any scenario history determines a corresponding label whose (positive or negative) literals are in a one-to-one correspondence with the observations, (p, s(p)), in the history. Thus, we may sometimes (e.g., in the next definition) treat a scenario history as though it were a label.\nBelow, an execution strategy is called dynamic if the schedules it generates always assign the same execution time to any time-pointX in scenarios that cannot be distinguished prior to that time.8\nDefinition 14 (Dynamic Execution Strategy for a CSTN). An execution strategy, σ, for a CSTN is called dynamic if for all scenarios, s1 and s2, and any time-point X:\nif Con(s1, scHst(X, s2, σ)), then [σ(s1)]X = [σ(s2)]X .\nDefinition 15 (Dynamic Consistency for a CSTN). A CSTN is called dynamically consistent if there exists an execution strategy for it that is both viable and dynamic.\nThe following definitions and lemma provide an equivalent, alternative characterization of a dynamic execution strategy for a CSTN. First, a scenario history relative to a numerical time—not a time-point variable—is defined.\nDefinition 16 (Scenario History∗ for a CSTN). Let S = 〈T , C, L,OT ,O, P 〉 be any CSTN, s any scenario, σ any execution strategy for S, and t any real number. The history∗ of t in the scenario s, for the strategy σ—denoted by\n7Tsamardinos et al. (2003) define (pre)histories for arbitrary schedules, whereas here we restrict attention to schedules of the form, σ(s), where σ is an execution strategy and s is a scenario.\n8Tsamardinos et al. (2003) include a disjunctive condition, Con(s1, scHst(X, s2, σ)) ∨ Con(s2, scHist(X, s1, σ)). However, since s1 and s2 play symmetric roles in the two disjuncts, and since s1 and s2 are both universally quantified (cf. Defn. 14), it suffices to include just one of the disjuncts.\nscHst∗(t, s, σ)—is the set of all observations made before time t according to the schedule, σ(s). In particular: scHst∗(t, s, σ) = {(p, s(p)) | O(p) ∈ T +s and [σ(s)]O(p) < t}\nNote that for all time-pointsX , scenarios s, and strategies σ, scHst(X, s, σ) = scHst∗([σ(s)]X , s, σ). Definition 17 (Dynamic∗ Execution Strategy for a CSTN). An execution strategy, σ, for an CSTN is called dynamic∗ if for any scenarios, s1 and s2, and any time-point, X:\nif scHst∗([σ(s1)]X , s1, σ) = scHst∗([σ(s1)]X , s2, σ), then [σ(s1)]X = [σ(s2)]X . Notice that in this definition, the two histories, one relative to s1, the other to s2, are taken with respect to the same (numeric) time, [σ(s1)]X . If the strategy σ yields schedules for s1 and s2 that have identical histories prior to that one time, then those schedules must assign the same value to X . Lemma 5. An execution strategy σ for a CSTN is dynamic if and only if it is dynamic∗."
    }, {
      "heading" : "Proof.",
      "text" : "(⇒) Suppose σ is a dynamic execution strategy for some\nCSTN. Let s1 and s2 be any scenarios, and X any timepoint such that scHst∗(t1, s1, σ) = scHst∗(t1, s2, σ), where t1 = [σ(s1)]X . Now s2 must be consistent with scHst∗(t1, s2, σ), since the observations contained in that history are a subset of the observations in s2. Thus, s2 is consistent with scHst∗(t1, s1, σ), which equals scHst(X, s1, σ). Thus, since σ is dynamic, we must have that [σ(s1)]X = [σ(s2)]X . Thus, σ is dynamic∗. (⇐) Suppose σ is a dynamic∗ execution strategy for some CSTN. Let s1 and s2 be any scenarios, and X any timepoint such that Con(s1, scHist(X, s2, σ)). Suppose that [σ(s1)]X 6= [σ(s2)]X . Let t ∈ R be the first time at which the schedules σ(s1) and σ(s2) diverge. Then, t ≤ min{[σ(s1)]X , [σ(s2)]X}; and there must be some timepoint Y that is executed at time t in one scenario, and at some later time in the other scenario. By construction, t ≤ [σ(s2)]X . Thus, scHst∗(t, s2, σ) ⊆ scHst∗([σ(s2)]X , s2, σ) = scHst(X, s2, σ). Thus, since Con(s1, scHst(X, s2, σ)), it follows that Con(s1, scHst\n∗(t, s2, σ)). And since s1 is a complete scenario, the observations in scHst∗(t, s2, σ) must be a subset of the “observations” in s1. And since, by construction, the schedules, σ(s1) and σ(s2), are identical prior to time t, it follows that the observations in the two histories, scHst∗(t, s1, σ) and scHst∗(t, s2, σ), involve the same sets of observation time-points with identical outcomes (i.e., truth values). Thus, scHst∗(t, s1, σ) = scHst\n∗(t, s2, σ), whence the property of σ being dynamic∗ implies that [σ(s1)]Y = [σ(s2)]Y , contradicting the choice of Y . Thus, it must be that the schedules, σ(s1) and σ(s2) diverge, if at all, after the execution of X , in which case, [σ(s1)]X = [σ(s2)]X . Thus, σ is dynamic."
    }, {
      "heading" : "Dynamic Controllability of STNUs",
      "text" : "Morris et al. (2001) call an STNU dynamically controllable if there exists a strategy for executing its time-points that\nguarantees the satisfaction of all constraints in the network no matter how the durations of the contingent links turn out. The strategy is dynamic in that its execution decisions can react to observations of contingent links that have already completed, but not to those that have yet to complete.\nThis section presents a sequence of definitions that culminate in the definition of the dynamic controllability of an STNU. Most of the definitions are from Morris et al. (2001), albeit with some slight differences in notation, but history∗ and dynamic∗ are from Hunsberger (2009). Parallels between the definitions in this section and those from the preceding section are highlighted along the way.\nAnalogous to a scenario for a CSTN, which specifies the truth value for each proposition, a situation for an STNU specifies fixed durations for all of the contingent links. Definition 18 (Situations). Let S be an STNU having the k contingent links, (A1, x1, y1, C1), . . . , (Ak, xk, yk, Ck), with respective duration ranges, [x1, y1], . . . , [xk, yk]. Then ΩS = [x1, y1]×. . .×[xk, yk] is called the space of situations for S. Any ω = (d1, . . . , dk) ∈ ΩS is called a situation. When context allows, we may write Ω instead of ΩS .\nSchedules for STNUs are defined the same way as for CSTNs, except that the domain for each schedule must be the entire set of time-points, T .\nThe projection of a CSTN onto a scenario yields an STN by fixing the truth value of each propositional letter and restricting attention to those time-points and constraints whose labels are true according to that scenario. Analogously, the projection of an STNU onto a situation yields an STN by fixing the duration of each contingent link. Definition 19 (Situation Projection for an STNU). Suppose S = (T , C,L) is an STNU and ω = (d1, . . . , dk) is a situation. The projection of S onto the situation ω—denoted by sitPrj (S, ω)—is the STN, (T , C′′), where: C′′ = C ∪ {(di ≤ Ci −Ai ≤ di) | 1 ≤ i ≤ k}. Definition 20 (Execution Strategy for an STNU). Let S = (T , C,L) be an STNU. An execution strategy for S is a mapping, σ : Ω→ Ψ, such that for each situation, ω ∈ Ω, σ(ω) is a (complete) schedule for the time-points in T . If, in addition, for each situation, ω, the schedule σ(ω) is a solution for the situation projection, sitPrj (S, ω), then σ is called viable. In any case, the execution time for any time-pointX in the schedule, σ(ω), is denoted by [σ(ω)]X .\nAnalogous to a scenario history∗ for a CSTN, a situation history∗ for an STNU specifies the durations of all contingent links that have finished executing prior to a (numeric) time t in a schedule σ(ω). Definition 21 (Situation History∗ for an STNU). Let S = (T , C,L) be any STNU, σ any execution strategy for S, ω any situation, and t any real number. The history∗ of t in the situation ω, for the strategy σ—denoted by sitHst(t, ω, σ)—is the set: sitHst(t, ω, σ) = {(A,C, [σ(ω)]C − [σ(ω)]A) |\n∃x, y s.t. (A, x, y, C) ∈ L and [σ(ω)]C < t} The definition of the dynamic∗ property for an execution strategy for an STNU parallels that of the dynamic∗ property for an execution strategy for a CSTN.\nDefinition 22 (Dynamic∗ Execution Strategy for an STNU). An execution strategy, σ, for an STNU is called dynamic∗ if for any situations, ω1 and ω2, and any non-contingent timepoint X:\nif sitHst([σ(ω1)]X , ω1, σ) = sitHst([σ(ω1)]X , ω2, σ), then [σ(ω1)]X = [σ(ω2)]X .\nDefinition 23 (Dynamic Controllability for an STNU). An STNU S is called dynamically controllable if there exists an execution strategy for S that is both viable and dynamic∗."
    }, {
      "heading" : "Dynamic Controllability of CSTNUs",
      "text" : "This section extends the notions of the dynamic consistency of a CSTN and the dynamic controllability of an STNU to generate a (novel) definition of the dynamic controllability of a CSTNU. To wit, a sequence of definitions is presented that parallels those of the preceding sections.\nA drama is a scenario/situation pair that specifies fixed truth values for all of the propositional letters and fixed durations for all of the contingent links.\nDefinition 24 (Drama). Given a CSTNU S, a drama is any pair (s, ω), where s is a scenario, and ω is a situation. The set of all dramas (for S) is I × Ω.\nNext, the projection of a CSTNU onto a drama, (s, ω), is defined. The projection restricts attention to time-points and constraints whose labels are true under the scenario s, while also including constraints that force the contingent links to take on the durations specified in the situation ω.\nDefinition 25 (Drama Projection for a CSTNU). Suppose S = 〈T , C, L,OT ,O, P,L〉 is a CSTNU and (s, ω) is a drama for S, where ω = (d1, . . . , dk). The projection of S onto the drama (s, ω)—denoted by drPrj (S, s, ω)—is the STN, (T +s , C1 ∪ C0), where: • T +s = {T ∈ T : s(L(T )) = true} • C1 = {(Y −X ≤ δ) | for some `, (Y −X ≤ δ, `) ∈ C,\nand s(`) = true} • C0 = {(di ≤ Ci −Ai ≤ di) | (Ai, xi, yi, Ci) ∈ L\nand Ai, Ci ∈ T +s } Definition 26 (Execution Strategy for a CSTNU). Let S = 〈T , P, L,OT ,O, C,L〉 be a CSTNU. An execution strategy for S is a mapping, σ : (I × Ω) → ΨT , such that for each drama, (s, ω), the domain of σ(s, ω) is T +s . σ is called viable if for each drama, (s, ω), the schedule σ(s, ω) is a solution to the projection, drPrj (s, ω). For any time-point X and drama (s, ω), the execution time of X in the schedule, σ(s, ω), is denoted by [σ(s, ω)]X .\nThe following definition combines the definitions of history∗ relative to a numeric time for CSTNs and STNUs.\nDefinition 27 (Drama History∗ for a CSTNU). Let S = 〈T , P, L,OT ,O, C,L〉 be a CSTNU. Let σ be an execution strategy for S, (s, ω) some drama, and t some real number. Then the history∗ of t for the drama (s, ω) and strategy σ— denoted by drHst(t, s, ω, σ)—is the pair (Hs,Hω) where: • Hs = {(p, s(p)) | O(p) ∈ T +s\nand [σ(s, ω)]O(p) < t}; and\n• Hω = {(A,C, [σ(s, ω)]C − [σ(s, ω)]A) | A,C ∈ T +s , ∃x, y s.t. (A, x, y, C, ) ∈ L, [σ(s, ω)]C < t}.\nNote that Hs specifies the truth values of all propositions that are observed prior to t in the schedule σ(s, ω); and Hω specifies the durations of all contingent links that finish executing prior to t in that schedule. Definition 28 (Dynamic∗ Execution Strategy for a CSTNU). An execution strategy, σ, for a CSTNU is called dynamic∗ if for every pair of dramas, (s1, ω1) and (s2, ω2), and every non-contingent time-point X ∈ T +s1 ∩ T + s2 :\nif drHst(t, s1, ω1, σ) = drHst(t, s2, ω2, σ), where t = [σ(s1, ω1)]X ,\nthen [σ(s1, ω1)]X = [σ(s2, ω2)]X . Definition 29 (Dynamic Controllability for a CSTNU). A CSTNU, S, is dynamically controllable if there exists an execution strategy for S that is both viable and dynamic∗.\nThe following lemmas show that the above definition properly generalizes the dynamic consistency of a CSTN and the dynamic controllability of an STNU. Lemma 6. Let S = 〈T , C, L,OT ,O, P 〉 be any CSTN. Then S is dynamically consistent if and only if the CSTNU, Su = 〈T , C, L,OT ,O, P, ∅〉, is dynamically controllable. Proof. Let S = 〈T , C, L,OT ,O, P 〉 be any dynamically consistent CSTN. Then S has an execution strategy, σ : I → ΨT , that is both viable and dynamic. By Lemma 5, σ is also dynamic∗. In addition, since S is a CSTN, Lemma 4 ensures that Su = 〈T , C, L,OT ,O, P, ∅〉 is a CSTNU. We must show that Su has an execution strategy, σu : (I×Ω)→ ΨT , that is both viable and dynamic∗. Note that since Su has no contingent links, Ω contains exactly one situation—the null situation—which we shall denote by ω∅.\nDefine σu as follows. For any drama, (s, ω∅), let σu(s, ω∅) = σ(s). Note that σu is an execution strategy for Su, since the domain of σ(s) is guaranteed to be T +s .\nSince σ is viable, for any scenario s, the schedule σ(s) is a solution to the scenario projection, scPrj (S, s). However, for any s, the schedules, σ(s) and σ(s, ω∅) are defined to be the same. Furthermore, since Su has no contingent links, it follows that for any s, the drama projection, drPrj (Su, s, ω∅), is the same STN as scPrj (S, s) (cf. Defns. 11 and 25). Thus, for any s, σ(s, ω∅) is necessarily a solution to drPrj (Su, s, ω∅), whence σu is viable.\nTo show that σu is dynamic∗, suppose (s1, ω∅) and (s2, ω∅) are any dramas in I × Ω, X is a noncontingent time-point in T +s1 ∩ T + s2 , t = [σu(s1, ω∅)]X , and drHst∗(t, s1, ω∅, σu) = drHst ∗(t, s2, ω∅, σu). Note that t = [σu(s1, ω∅)]X = [σ(s1)]X . Furthermore, since there are no contingent links, drHst∗(t, s1, ω∅, σu) = drHst∗(t, s2, ω∅, σu) if and only if scHst\n∗(t, s1, σ) = scHst∗(t, s2, σ) (cf. Defns. 16 and 27). But then σ being dynamic∗ ensures that [σ(s1)]X = [σ(s2)]X (cf. Defn. 17), and hence [σu(s1, ω∅)]X = [σu(s2, ω∅)]X . Lemma 7. Let S = (T , C,L) be any STNU. Then S is dynamically controllable if and only if the CSTNU, 〈T , C , L , ∅,O∅, ∅,L〉, is dynamically controllable. Proof. The proof is omitted for space reasons. It has the same general structure as the proof of Lemma 6."
    }, {
      "heading" : "Toward a DC-Checking Algorithm for CSTNUs",
      "text" : "This section addresses the problem of finding an algorithm for determining the dynamic controllability of arbitrary CSTNUs. Given that CSTNUs combine the features of CSTPs and STNUs, one approach would be to combine existing algorithms for determining the dynamic consistency of CSTPs and the dynamic controllability of STNUs. However, those algorithms employ very different techniques. For example, in the CSTP algorithm, Tsamardinos et al. (2003) first derive a related Disjunctive Temporal Problem (DTP), and then solve it using a dedicated DTP solver that is optimized by a variety of constraint-satisfaction heuristics. In contrast, the fastest algorithm for determining whether arbitrary STNUs are dynamically controllable is the O(N4)time algorithm developed by Morris (2006), which is a constraint-propagation algorithm that focuses on the reducing away of lower-case edges in an STNU graph.\nAnother problem is that the CSTP algorithm uses exponential space and time. Conrad and colleagues (Conrad 2010; Conrad and Williams 2011) developed the Drake system for propagating labeled constraints in temporal networks with choice.9 The aim was to reduce the space required to generate dispatchable plans, while accepting slight increases in the time requirements. Although their choice nodes are dramatically different from the observation nodes in a CSTNU—because choice nodes are controlled by the agent—their use of labeled value sets in constraint propagation inspired our use of labels on the edges of a CSTNU."
    }, {
      "heading" : "Constraint Propagation for CSTNUs",
      "text" : "Consider the propagation of labeled constraints illustrated in Fig. 3. Any dynamic execution strategy that observes the labeled constraints from W to X , and from X to Y , must also observe the derived constraint from W to Y . Notice that the label on the derived constraint is the conjunction of the labels on the original constraints. The proof that this propagation rule is sound is omitted, due to space limitations."
    }, {
      "heading" : "Label Modification in a CSTNU",
      "text" : "Morris et al. (2001) showed that the presence of contingent links in an STNU requires new kinds of constraint propagation when checking dynamic controllability. Those kinds of rules will also be needed for a CSTNU. However, in addition, the presence of observation nodes requires new kinds of propagation rules. One such rule is presented below.\nConsider the CSTNU fragment in Fig. 4, where 0 ≤ w, v ≤ w, α, β and γ are labels that do not share any propositional letters, and p is a propositional letter that does not appear in α, β or γ. The time-point, p?, is the observation time-\n9In the earlier paper, they incorporated contingent links and presented a preliminary extension of their dispatchability algorithm.\nX Y αβ,−w p? βγp, v\nFigure 4: The context for label modification in a CSTNU\npoint for p. Thus, when p? executes, the value of p becomes known. The arrow from p? to X represents the labeled constraint, (X − p? ≤ −w, αβ). Thus, in scenarios where αβ is true, X + w ≤ p? must hold. Thus, in those scenarios, X must be executed before p is observed. The arrow from X to Y represents the constraint, (Y −X ≤ v, βγp). Thus, in scenarios where βγp is true, Y ≤ X + v must hold—in which case, Y must execute before the value of p is known. Lemma 8 (Label Modification Rule). If σ is a dynamic execution strategy that satisfies the labeled constraints in Fig. 4 in all scenarios where their labels are true, then σ must also satisfy the labeled constraint, (Y − X ≤ v, αβγ), in all scenarios where αβγ is true. Moreover, the original labeled constraint, (Y − X ≤ v, βγp), can be replaced by the pair of labeled constraints, (Y −X ≤ v, αβγ) and (Y −X ≤ v, (¬α)βγp). Proof. Let σ be as in the statement of the lemma. However, suppose that there is some drama, (s, ω), such that: (1) the label αβγ is true in scenario s; but (2) the schedule, σ(s, ω), does not satisfy the constraint, (Y − X ≤ v). Let s2 be the same scenario as s, except that the value of p is flipped. Now, by construction, in one of the scenarios, s or s2, the label, αβγp, is true. Let ŝ be that scenario, and σ(ŝ, ω) the corresponding schedule. By construction, that schedule satisfies both of the labeled constraints from Fig. 4, since their labels are true in ŝ. Thus,\n[σ(ŝ, ω)]Y ≤ [σ(ŝ, ω)]X + v , since Y −X ≤ v ≤ [σ(ŝ, ω)]X + w, since v ≤ w ≤ p? , since X − p? ≤ −w\nLet s̃ be the scenario that is the same as ŝ, except that the value of p is flipped. Let t be the first time at which the schedules, σ(ŝ, ω) and σ(s̃, ω), differ. Thus, there must be some time-point T that is executed in one of the schedules at time t, and in the other at some time later than t. But in that case, the corresponding histories at time t must be different. But the only possible difference must involve the value of the proposition p, since all other propositions and contingent durations are identical in the dramas, (ŝ, ω) and (s̃, ω). Thus, p? must be executed before time t. Since t is the time of first difference in the schedules, it follows that p? is executed at the same time in each of these schedules. Furthermore, since X and Y are both executed before p? in σ(ŝ, ω), and hence before the time of first difference, it follows that X and Y are also executed at those same times in σ(s̃, ω). Thus, regardless of the value of p, the constraint Y −X ≤ v is satisfied, contradicting the choice of (s, ω).\nFor the second part, consider the following constraints: • C1: (Y −X ≤ v, βγp) • C2: (Y −X ≤ v, αβγ) • C1.1: (Y −X ≤ v, αβγp) • C1.2: (Y −X ≤ v, (¬α)βγp)\nC1 is the constraint from X to Y shown in Fig. 4. C2 is the constraint derived in the first part of this proof. Now, C1 is equivalent to the pair of constraints, C1.1 and C1.2, since βγp ≡ (αβγp) ∨ ((¬α)βγp). Thus, the constraint set {C1, C2} is equivalent to the constraint set {C1.1, C1.2, C2}. However, since the label on C2 is subsumed by the label on C1.1, the constraint C2 dominates the constraint C1.1. Thus, the constraint set {C1, C2} is equivalent to {C1.2, C2}.\nThis and other label-modification rules are expected to play an important role in the dynamic controllabilitychecking algorithm that is a major goal of this work."
    }, {
      "heading" : "Conclusions",
      "text" : "This paper presented a temporal network, called a CSTNU, that generalizes CSTPs and STNUs from the literature. The semantics of dynamic controllability for CSTNUs also generalizes the related notions for CSTPs and STNUs. The motivation for this work was to provide a framework for the temporal constraints underlying workflows for business and medical-treatment processes. In future work, we aim to show that any workflow is history-dependent controllable if and only if its underlying CSTNU is dynamically controllable."
    } ],
    "references" : [ {
      "title" : "Temporal reasoning in workflow systems",
      "author" : [ "C. Bettini", "X.S. Wang", "S. Jajodia" ],
      "venue" : "Distributed and Parallel Databases 11:269– 306.",
      "citeRegEx" : "Bettini et al\\.,? 2002",
      "shortCiteRegEx" : "Bettini et al\\.",
      "year" : 2002
    }, {
      "title" : "Controllability in temporal conceptual workflow schemata",
      "author" : [ "C. Combi", "R. Posenato" ],
      "venue" : "Dayal, U. et al., ed., Business Process Management, volume 5701 of Lecture Notes in Computer Science. Berlin, Heidelberg: Springer-Verlag. 64–79.",
      "citeRegEx" : "Combi and Posenato,? 2009",
      "shortCiteRegEx" : "Combi and Posenato",
      "year" : 2009
    }, {
      "title" : "Towards temporal controllabilities for workflow schemata",
      "author" : [ "C. Combi", "R. Posenato" ],
      "venue" : "Proc. of the 17th International Symposium on Temporal Representation and Reasoning (TIME-2010), 129–136. Los Alamitos, CA, USA: IEEE Computer Society.",
      "citeRegEx" : "Combi and Posenato,? 2010",
      "shortCiteRegEx" : "Combi and Posenato",
      "year" : 2010
    }, {
      "title" : "Conceptual modeling of temporal clinical workflows",
      "author" : [ "C. Combi", "M. Gozzi", "J. Juárez", "B. Oliboni", "G. Pozzi" ],
      "venue" : "Proceedings of the TIME-2007 workshop, 70–81. IEEE Computer Society.",
      "citeRegEx" : "Combi et al\\.,? 2007",
      "shortCiteRegEx" : "Combi et al\\.",
      "year" : 2007
    }, {
      "title" : "Drake: An efficient executive for temporal plans with choice",
      "author" : [ "P.R. Conrad", "B.C. Williams" ],
      "venue" : "Journal of Artificial Intelligence Research 42:607–659.",
      "citeRegEx" : "Conrad and Williams,? 2011",
      "shortCiteRegEx" : "Conrad and Williams",
      "year" : 2011
    }, {
      "title" : "Flexible execution of plans with choice and uncertainty",
      "author" : [ "P.R. Conrad" ],
      "venue" : "Master’s thesis, Massachusetts Institute of Technology.",
      "citeRegEx" : "Conrad,? 2010",
      "shortCiteRegEx" : "Conrad",
      "year" : 2010
    }, {
      "title" : "Temporal constraint networks",
      "author" : [ "R. Dechter", "I. Meiri", "J. Pearl" ],
      "venue" : "Artificial Intelligence 49:61–95.",
      "citeRegEx" : "Dechter et al\\.,? 1991",
      "shortCiteRegEx" : "Dechter et al\\.",
      "year" : 1991
    }, {
      "title" : "Fixing the semantics for dynamic controllability and providing a more practical characterization of dynamic execution strategies",
      "author" : [ "L. Hunsberger" ],
      "venue" : "Proceedings of the TIME-2009 workshop, 155–162. IEEE Computer Society.",
      "citeRegEx" : "Hunsberger,? 2009",
      "shortCiteRegEx" : "Hunsberger",
      "year" : 2009
    }, {
      "title" : "Dynamic control of plans with temporal uncertainty",
      "author" : [ "P. Morris", "N. Muscettola", "T. Vidal" ],
      "venue" : "Nebel, B., ed., 17th International Joint Conference on Artificial Intelligence (IJCAI-01), 494– 499. Morgan Kaufmann.",
      "citeRegEx" : "Morris et al\\.,? 2001",
      "shortCiteRegEx" : "Morris et al\\.",
      "year" : 2001
    }, {
      "title" : "A structural characterization of temporal dynamic controllability",
      "author" : [ "P. Morris" ],
      "venue" : "Principles and Practice of Constraint Programming (CP 2006), volume 4204 of Lecture Notes in Computer Science. Springer. 375–389.",
      "citeRegEx" : "Morris,? 2006",
      "shortCiteRegEx" : "Morris",
      "year" : 2006
    }, {
      "title" : "CTP: A new constraint-based formalism for conditional, temporal planning",
      "author" : [ "I. Tsamardinos", "T. Vidal", "M. Pollack" ],
      "venue" : "Constraints 8(4):365–388.",
      "citeRegEx" : "Tsamardinos et al\\.,? 2003",
      "shortCiteRegEx" : "Tsamardinos et al\\.",
      "year" : 2003
    } ],
    "referenceMentions" : [ {
      "referenceID" : 0,
      "context" : "However, as Bettini et al. (2002) observed: “It would greatly enhance the capabilities of current workflow systems if quantitative temporal constraints on the duration of activities and their synchronization requirements can be specified and reasoned about.",
      "startOffset" : 12,
      "endOffset" : 34
    }, {
      "referenceID" : 0,
      "context" : "However, as Bettini et al. (2002) observed: “It would greatly enhance the capabilities of current workflow systems if quantitative temporal constraints on the duration of activities and their synchronization requirements can be specified and reasoned about.” Toward that end, Combi et al. (2007; 2009; 2010) presented a new workflow model that accommodates the following key features: tasks with uncertain/uncontrollable durations; temporal constraints among tasks; and branching paths, where the branch taken is not known in advance. Fig. 1 shows a sample workflow from the health-care domain, similar to one presented by Combi and Posenato (2009). In this workflow, all times are in minutes, and:",
      "startOffset" : 12,
      "endOffset" : 649
    }, {
      "referenceID" : 1,
      "context" : "Combi and Posenato (2009) used diamonds for connectors.",
      "startOffset" : 0,
      "endOffset" : 26
    }, {
      "referenceID" : 1,
      "context" : "then that workflow is said to be history-dependent controllable (Combi and Posenato 2009; 2010).",
      "startOffset" : 64,
      "endOffset" : 95
    }, {
      "referenceID" : 1,
      "context" : "then that workflow is said to be history-dependent controllable (Combi and Posenato 2009; 2010). The workflow in Fig. 1 is history-dependent controllable. A successful strategy must restrict the interval for B2 to be [32, 42] if the branch containing task T4 was taken, or [1, 31] if the branch containing task T3 was taken. Combi and Posenato (2010) presented an exponential-time algorithm for determining whether any workflow is history-dependent controllable.",
      "startOffset" : 65,
      "endOffset" : 351
    }, {
      "referenceID" : 1,
      "context" : "Combi and Posenato (2009) discuss additional kinds of connectors.",
      "startOffset" : 0,
      "endOffset" : 26
    }, {
      "referenceID" : 10,
      "context" : "Let 〈V,E, L,OV,O, P 〉 be any CSTP, as defined by Tsamardinos et al. (2003), that satisfies the reasonability assumptions, A1 and A2.",
      "startOffset" : 49,
      "endOffset" : 75
    }, {
      "referenceID" : 7,
      "context" : "Most of the definitions are from Morris et al. (2001), albeit with some slight differences in notation, but history∗ and dynamic∗ are from Hunsberger (2009).",
      "startOffset" : 33,
      "endOffset" : 54
    }, {
      "referenceID" : 7,
      "context" : "(2001), albeit with some slight differences in notation, but history∗ and dynamic∗ are from Hunsberger (2009). Parallels between the definitions in this section and those from the preceding section are highlighted along the way.",
      "startOffset" : 92,
      "endOffset" : 110
    }, {
      "referenceID" : 5,
      "context" : "Conrad and colleagues (Conrad 2010; Conrad and Williams 2011) developed the Drake system for propagating labeled constraints in temporal networks with choice.",
      "startOffset" : 22,
      "endOffset" : 61
    }, {
      "referenceID" : 4,
      "context" : "Conrad and colleagues (Conrad 2010; Conrad and Williams 2011) developed the Drake system for propagating labeled constraints in temporal networks with choice.",
      "startOffset" : 22,
      "endOffset" : 61
    }, {
      "referenceID" : 7,
      "context" : "For example, in the CSTP algorithm, Tsamardinos et al. (2003) first derive a related Disjunctive Temporal Problem (DTP), and then solve it using a dedicated DTP solver that is optimized by a variety of constraint-satisfaction heuristics.",
      "startOffset" : 36,
      "endOffset" : 62
    }, {
      "referenceID" : 7,
      "context" : "In contrast, the fastest algorithm for determining whether arbitrary STNUs are dynamically controllable is the O(N)time algorithm developed by Morris (2006), which is a constraint-propagation algorithm that focuses on the reducing away of lower-case edges in an STNU graph.",
      "startOffset" : 143,
      "endOffset" : 157
    } ],
    "year" : 2012,
    "abstractText" : "Recent attempts to automate business processes and medical-treatment processes have uncovered the need for a formal framework that can accommodate not only temporal constraints, but also observations and actions with uncontrollable durations. To meet this need, this paper defines a Conditional Simple Temporal Network with Uncertainty (CSTNU) that combines the simple temporal constraints from a Simple Temporal Network (STN) with the conditional nodes from a Conditional Simple Temporal Problem (CSTP) and the contingent links from a Simple Temporal Network with Uncertainty (STNU). A notion of dynamic controllability for a CSTNU is defined that generalizes the dynamic consistency of a CTP and the dynamic controllability of an STNU. The paper also presents some sound constraint-propagation rules for dynamic controllability that are expected to form the backbone of a dynamiccontrollability-checking algorithm for CSTNUs. Introduction and Motivation Workflow systems have been used to model business, manufacturing and medical-treatment processes. However, as Bettini et al. (2002) observed: “It would greatly enhance the capabilities of current workflow systems if quantitative temporal constraints on the duration of activities and their synchronization requirements can be specified and reasoned about.” Toward that end, Combi et al. (2007; 2009; 2010) presented a new workflow model that accommodates the following key features: tasks with uncertain/uncontrollable durations; temporal constraints among tasks; and branching paths, where the branch taken is not known in advance. Fig. 1 shows a sample workflow from the health-care domain, similar to one presented by Combi and Posenato (2009). In this workflow, all times are in minutes, and: • tasks are represented by rounded boxes; • branching points are represented by nine-sided boxes called split or join connectors1; • tasks and connectors have duration attributes, [x, y]; ∗Funded in part by the Phoebe H. Beadle Science Fund. Copyright c © 2012, Association for the Advancement of Artificial Intelligence (www.aaai.org). All rights reserved. Combi and Posenato (2009) used diamonds for connectors. T1 : [2, 4]",
    "creator" : "TeX"
  }
}