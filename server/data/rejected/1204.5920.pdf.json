{
  "name" : "1204.5920.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : null,
    "authors" : [ ],
    "emails" : [ "c.benzmueller@googlemail.com", "genovese@di.unito.it" ],
    "sections" : [ {
      "heading" : null,
      "text" : "ar X\niv :1\n20 4.\n59 20\nv1 [\ncs .A\nI] 2\n6 A\npr 2\n01 2\nA semantic embedding of quantified conditional logic in classical higher-order logic is presented."
    }, {
      "heading" : "1 Introduction",
      "text" : "A semantic embedding of propositional conditional logic in classical higher-order logic HOL (Church’s type theory) has been presented in [3]. This embedding exploits the natural correspondence between selection function semantics for conditional logics [10] and HOL. In fact, selection function semantics can be seen as an higher-order extension of well-known Kripke semantics for modal logic and cannot be naturally embedded into first-order logic.\nIn this paper we extend the embedding in [3] to also include quantification over propositions and individuals. This embedding of quantified conditional logic in HOL is sound and complete."
    }, {
      "heading" : "2 Quantified Conditional Logics",
      "text" : "We extend propositional conditional logics with quantification over propositional variables and over individuals of a first-order domain. Below, we only consider constant domains, i.e., every possible world has the same domain.\nLet I V be a set of first-order (individual) variables, PV a set of propositional variables, and S Y M a set of predicate symbols of any arity. Formulas of quantified conditional logic are given by the following grammar (where X i ∈ I V ,P ∈ PV ,k ∈ S Y M ):\nϕ ,ψ ::= P | k(X1, . . . ,Xn) | ¬ϕ | ϕ ∨ψ | ∀X .ϕ | ∀P.ϕ | ϕ ⇒ ψ\nFrom the selected set of primitive connectives, other logical connectives can be introduced as abbreviations: for example, ϕ ∧ψ , ϕ → ψ (material implication), and ∃X .ϕ abbreviate ¬(¬ϕ ∨¬ψ), ¬ϕ ∨ψ and ¬∀X .¬ϕ etc. Syntactically, quantified conditional logics can be seen as a generalization of quantified multimodal logic where the index of modality ⇒ is a formula of the same language. For instance, in (ϕ ⇒ ψ)⇒ δ the subformula ϕ ⇒ ψ is the index of the second occurrence of ⇒.\nRegarding semantics, many different formalizations have been proposed (see [8]), here we focus on the selection function semantics [6], which is based on possible world structures and has been successfully used in [9] to develop proof methods for some conditional logics. We adapt selection function semantics for quantified conditional logics.\nAn interpretation is a structure M = 〈S, f ,D,Q, I〉 where, S is a set of possible items called worlds, f : S×2S 7→ 2S is the selection function, D is a non-empty set of individuals (the first-order domain), Q is a non-empty collection of subsets of W (the propositional domain), and I is a classical interpretation function where for each n-ary predicate symbol k, I(k,w)⊆ Dn.\n∗This work has been presented at the conference on Non-classical Modal and Predicate Logics 2011, Guangzhou (Canton), China, 5-9 December 2011.\nA variable assignment g = (giv,gpv) is a pair of maps where, giv : I V 7→ D maps each individual variable in I V to an object in D, and gpv : maps each propositional variable in PV to a set of worlds in Q.\nSatisfiability of a formula ϕ for an interpretation M = 〈S, f ,D,Q, I〉, a world s ∈ S, and a variable assignment g = (giv,gpv) is denoted as M,g,s |= ϕ and defined as follows, where [a/Z]g denote the assignment identical to g except that ([a/Z]g)(Z) = a:\nM,g,s |= k(X1, . . . ,Xn) if and only if 〈giv(X1), . . . ,giv(Xn)〉 ∈ I(k,w) M,g,s |= P if and only if s ∈ gpv(P) M,g,s |= ¬ϕ if and only if M,g,s 6|= ϕ (that is, not M,g,s |= ϕ ) M,g,s |= ϕ ∨ψ if and only if M,g,s |= ϕ or M,g,s |= ψ M,g,s |= ∀X .ϕ if and only if M,([d/X ]giv,gpv),s |= ϕ for all d ∈ D M,g,s |= ∀P.ϕ if and only if M,(giv, [p/P]gpv),s |= ϕ for all p ∈ Q M,g,s |= ϕ ⇒ ψ if and only if M,g, t |= ψ for all t ∈ S such that t ∈ f (s, [ϕ ]) where [ϕ ] = {u | M,g,u |= ϕ} An interpretation M = 〈S, f ,D,Q, I〉 is a model if for every variable assignment g and every formula ϕ , the set of worlds {s ∈ S | M,g,s |= ϕ} is a member of Q. As usual, a conditional formula ϕ is valid in a model M = 〈S, f ,D,Q, I〉, denoted with M |= ϕ , if and only if for all worlds s ∈ S and variable assignments g holds M ,g,s |= ϕ . A formula ϕ is a valid, denoted |= ϕ , if and only if it is valid in every model.\nf is defined to take [ϕ ] (called the proof set of ϕ w.r.t. a given model M ) instead of ϕ . This approach has the consequence of forcing the so-called normality property: given a model M , if ϕ and ϕ ′ are equivalent (i.e., they are satisfied in the same set of worlds), then they index the same formulas w.r.t. to the ⇒ modality. The axiomatic counterpart of the normality condition is given by the rule (RCEA)\nϕ ↔ ϕ ′ (RCEA)\n(ϕ ⇒ ψ)↔ (ϕ ′ ⇒ ψ)\nMoreover, it can be easily shown that the above semantics forces also the following rules to hold:\n(ϕ1 ∧ . . .∧ϕn)↔ ψ (RCK)\n(ϕ0 ⇒ ϕ1 ∧ . . .∧ϕ0 ⇒ ϕn)→ (ϕ0 ⇒ ψ)\nϕ ↔ ϕ ′ (RCEC)\n(ψ ⇒ ϕ)↔ (ψ ⇒ ϕ ′)\nWe refer to CK [6] as the minimal quantified conditional logic closed under rules RCEA, RCEC and RCK. In what follows, only quantified conditional logics extending CK are considered."
    }, {
      "heading" : "3 Classical Higher-Order Logic",
      "text" : "HOL is a logic based on simply typed λ -calculus [7, 2]. The set T of simple types in HOL is usually freely generated from a set of basic types {o, i} using the function type constructor . Here we instead consider a set of basic type {o, i,u}, where o denotes the type of Booleans, and where i and u denote some non-empty domains. Without loss of generality, we will later identify i with a set of worlds and u with a domain of individuals.\nLet α ,β ,o ∈ T . The terms of HOL are defined by the grammar (pα denotes typed constants and Xα typed variables distinct from pα ):\ns, t ::= pα | Xα | (λXα .sβ )α β | (sα β )β | (¬o o so)o | (so ∨o o o to)o | (Π(α o) o sα o)o\nComplex typed terms are constructed via abstraction and application. The primitive logical connectives are ¬o o,∨o o o and Π(α o) o (for each type α). From these, other logical connectives can\nbe introduced as abbreviations: for example, ∧ and → abbreviate the terms λA.λB.¬(¬A∨¬B) and λA.λB.¬A∨B, etc. HOL terms of type o are called formulas. Binder notation ∀Xα .so is used as an abbreviation for (Π(α o) o (λXα .so)). Substitution of a term Aα for a variable Xα in a term Bβ is denoted by [A/X ]B, where it is assumed that the bound variables of B avoid variable capture. Well known operations and relations on HOL terms include βη-normalization and βη-equality, denoted by s =βη t.\nThe following definition of HOL semantics closely follows the standard literature [1, 2]. A frame is a collection {Dα}α∈T of nonempty sets called domains such that Do = {T,F} where T represents truth and F falsehood, Di 6= /0 and Du 6= /0 are chosen arbitrary, and Dα β are collections of total functions mapping Dα into Dβ .\nAn interpretation is a tuple 〈{Dα}α∈T , I〉 where {Dα}α∈T is a frame and where function I maps each typed constant cα to an appropriate element of Dα , which is called the denotation of cα . The denotations of ¬,∨ and Π(α o) o are always chosen as usual. A variable assignment φ maps variables Xα to elements in Dα .\nAn interpretation is a Henkin model (general model) if and only if there is a binary valuation function V such that V (φ ,sα ) ∈ Dα for each variable assignment φ and term sα , and the following conditions are satisfied for all φ , variables Xα , constants pα , and terms lα β ,rα ,sβ (for α ,β ∈ T ): V (φ ,Xα) = φ(Xα), V (φ , pα ) = I(pα), V (φ ,(lα β rα)) = (V (φ , lα β ))(V (φ ,rα )), and V (φ ,λXα .sβ ) represents the function from Dα into Dβ whose value for each argument z ∈ Dα is V (φ [z/Xα ],sβ ), where φ [z/Xα ] is that variable assignment such that φ [z/Xα ](Xα) = z and φ [z/Xα ]Yβ = φYβ when Yβ 6= Xα .\nIf an interpretation H = 〈{Dα}α∈T , I〉 is an Henkin model the function V is uniquely determined and V (φ ,sα ) ∈ Dα is called the denotation of sα . H is called a standard model if and only if for all α and β , Dα β is the set of all functions from Dα into Dβ . It is easy to verify that each standard model is also a Henkin model. A formula A of HOL is valid in a Henkin model H if and only if V (φ ,A) = T for all variable assignments φ . In this case we write H |= A. A is (Henkin) valid, denoted as |= A, if and only if H |= A for all Henkin models H .\nPROP. 3.1. Let V be the valuation function of Henkin model H . The following properties hold for all assignments φ , terms so, to, lα ,rα , and variables Xα ,Vα (for α ∈ T ): V (φ ,(¬so)) = T if and only if V (φ ,so) = F, V (φ ,(so ∨ to)) = T if and only if V (φ ,so) = T or V (φ ,so) = T , V (φ ,(so ∧ to)) = T if and only if V (φ ,so) = T and V (φ ,so) = T , V (φ ,(so → to)) = T if and only if V (φ ,so) = F or V (φ ,so) = T , V (φ ,(∀Xα .so)) = V (φ ,(Π(α o) o (λXα .so))) = T if and only if for all v ∈ Dα holds V (φ [v/Vα ],((λXα .so)V )) = T , and if lα =βη rα then V (φ , lα ) = V (φ ,rα )"
    }, {
      "heading" : "4 Embedding Quantified Conditional Logics in HOL",
      "text" : "Quantified conditional logic formulas are identified with certain HOL terms (predicates) of type i o. They can be applied to terms of type i, which are assumed to denote possible worlds.\nDEF. 4.1. The mapping ⌊·⌋ translates formulas ϕ of quantified conditional logic CK into HOL terms ⌊ϕ⌋ of type i o. The mapping is recursively defined as follows:\n⌊P⌋ = Pi o ⌊k(X1, . . . ,Xn)⌋ = (⌊k⌋⌊X1⌋ . . .⌊Xn⌋)⌋\n= (kun (i o) X 1 u . . .X n u )\n⌊¬ϕ⌋ = ¬i o ⌊ϕ⌋\n⌊ϕ ∨ψ⌋ = ∨(i o) (i o) (i o) ⌊ϕ⌋⌊ψ⌋ ⌊ϕ ⇒ ψ⌋ = ⇒(i o) (i o) (i o) ⌊ϕ⌋⌊ψ⌋ ⌊∀X .ϕ⌋ = Π(u (i o)) (i o) λXu.⌊ϕ⌋ ⌊∀P.ϕ⌋ = Π((i o) (i o)) (i o) λPi o.⌊ϕ⌋\nPi o and X1u , . . . ,X n u are HOL variables and kun (i o) is a HOL constant. ¬i o, ∨(i o) (i o) (i o), ⇒(i o) (i o) (i o), Π(u (i o)) (i o) and Π((i o) (i o)) (i o) realize the quantified conditional logics\nconnectives in HOL. They abbreviate the following proper HOL terms:\n¬(i o) (i o) = λAi o.λXi.¬(AX) ∨(i o) (i o) (i o) = λAi o.λBi o.λXi.(AX)∨ (BX) ⇒(i o) (i o) (i o) = λAi o.λBi o.λXi.∀Wi.( f X AW )→ (BW ) Π(u (i o)) (i o) = λQu (i o).λWi.∀Xu.(QX W ) Π((i o) (i o)) (i o) = λR(i o) (i o).λWi.∀Pi o.(RPW )\nThe constant symbol f in the mapping of ⇒ is of type i (i o) (i o). It realizes the selection function, i.e., its interpretation is chosen appropriately (cf. below).\nThis mapping induces mappings ⌊I V ⌋, ⌊PV ⌋ and ⌊S Y M ⌋ of the sets I V , PV and S Y M respectively.\nAnalyzing the validity of a translated formula ⌊ϕ⌋ for a world represented by term ti corresponds to evaluating the application (⌊ϕ⌋ ti). In line with [4], we define vld(i o) o = λAi o.∀Si.(A S). With this definition, validity of a quantified conditional formula ϕ in CK corresponds to the validity of the corresponding formula (vld ⌊ϕ⌋) in HOL, and vice versa."
    }, {
      "heading" : "5 Soundness and Completeness",
      "text" : "To prove the soundness and completeness of the embedding, a mapping from selection function models into Henkin models is employed. This mapping will employ a corresponding mapping of variable assignments for quantified conditional logics into variable assignments for HOL.\nDEF. 5.1 (Mapping of Variable Assignments). Let g = (giv : I V −→ D, gpv : PV −→ Q) be a variable assignment for a quantified conditional logic. We define the corresponding variable assignment ⌊g⌋ = (⌊giv⌋ : ⌊I V ⌋ −→ D, ⌊gpv⌋ : ⌊PV ⌋ −→ Q) for HOL so that ⌊g⌋(Xu) = ⌊g⌋(⌊X⌋) = g(X) and ⌊g⌋(Pi o) = ⌊g⌋(⌊P⌋) = g(P) for all Xu ∈ ⌊I V ⌋ and Pi o ∈ ⌊PV ⌋. Finally, a variable assignment ⌊g⌋ is extended to an assignment for variables Zα of arbitrary type by choosing ⌊g⌋(Zα) = d ∈ Dα arbitrary, if α 6= u, i o.\nDEF. 5.2 (Henkin model H M ). Given a quantified conditional logic model M = 〈S, f ,D,Q, I〉. The Henkin model H M = 〈{Dα}α∈T , I〉 for M is defined as follows: Di is chosen as the set of possible worlds S, Du is chosen as the first-order domain D (cf. definition of ⌊giv⌋), Di o is chosen as the set of sets of possible worlds Q (cf. definition of ⌊gpv⌋)1, and all other sets Dα β are chosen as (not necessarily full) sets of functions from Dα to Dβ . For all sets Dα β the rule that everything denotes must be obeyed, in particular, we require that the sets Dun (i o) and Di (i o) (i o) contain the elements Ikun (i o) and I fi (i o) (i o) as characterized below.\nThe interpretation I is constructed as follows: (i) Let kun (i o) = ⌊k⌋ for n-ary k ∈ S Y M and let X iu = ⌊X\ni⌋ for X i ∈ I V , i = 1, . . . ,n. We choose Ikun (i o) ∈ Dun (i o) such that (I kun (i o))(⌊g⌋(X 1 u ), . . . ,⌊g⌋(X n u ),w) = T for all worlds w ∈ Di such that M ,g,w |= k(X\n1, . . . ,Xn), that is, if 〈giv(X1), . . . ,giv(Xn)〉 ∈ I(k,w). Otherwise we choose (I kun (i o))(⌊g⌋(X 1 u ), . . . ,⌊g⌋(X n u ),w) = F. (ii) We choose I fi (i o) (i o) ∈ Di (i o) (i o) such that (I fi (i o) (i o))(s,q, t) = T for all worlds s, t ∈ Di and q ∈ Di o with t ∈ f (s,{x ∈ S | q(x) = T}) in M . Otherwise we choose (I fi (i o) (i o))(s,q, t) = F. (iii) For all other constants sα , choose Isα arbitrary.2\nIt is not hard to verify that H M is a Henkin model.\n1To keep things simple, we identify sets with their characteristic functions. 2In fact, we may safely assume that there are no other typed constant symbols given, except for the symbol fi (i o) (i o),\nthe symbols ,kun (i o), and the logical connectives.\nLEMMA 5.3. Let H M be a Henkin model for a selection function model M . For all quantified conditional logic formulas δ , variable assignments g and worlds s it holds: M ,g,s |= δ if and only if V (⌊g⌋[s/Si],(⌊δ⌋ Si)) = T\nProof. The proof is by induction on the structure of δ . The cases for δ =P, δ = k(X1, . . . ,Xn), δ =(¬ϕ), δ = (ϕ ∨ψ), and δ = (ϕ ⇒ ψ) are similar to Lemma 1 in [3]. The cases for δ = ∀X .ϕ and δ = ∀P.ϕ adapt the respective cases from Lemmas 4.3 and 4.7 in [5].\nTHEOREM 5.4 (Soundness and Completeness). |= (vld ⌊ϕ⌋) in HOL if and only if |= ϕ in CK\nProof. (Soundness) The proof is by contraposition. Assume 6|= ϕ in CK, that is, there is a model M = 〈S, f ,D,Q, I〉, a variable assignment g and a world s ∈ S, such that M ,g,s 6|= ϕ . By Lemma 5.3 we have that V (⌊g⌋[s/Si],(⌊ϕ⌋ S)) = F in Henkin model H M = 〈{Dα}α∈T , I〉 for M . Thus, by Prop. 3.1, definition of vld and since (∀Si.⌊ϕ⌋ S) =βη (vld ⌊ϕ⌋) we know that V (⌊g⌋,(∀Si.⌊ϕ⌋ S)) = V (⌊g⌋,(vld ⌊ϕ⌋)) = F . Hence, H M 6|= (vld ⌊ϕ⌋), and thus 6|= (vld ⌊ϕ⌋) in HOL.\n(Completeness) The proof is again by contraposition. Assume 6|= (vld ⌊ϕ⌋) in HOL, that is, there is a Henkin model H = 〈{Dα}α∈T , I〉 and a variable assignment φ with V (φ ,(vld ⌊ϕ⌋)) = F . Without loss of generality we can assume that Henkin Model H is in fact a Henkin model H M for a corresponding quantified conditional logic model M and that Φ = ⌊g⌋ for a corresponding quantified conditional logic variable assignment g. By Prop. 3.1 and since (vld ⌊ϕ⌋) =βη (∀Si.⌊ϕ⌋ S) we have V (⌊g⌋,(∀Si.⌊ϕ⌋ S)) = F , and hence, by definition of vld, V (⌊g⌋[s/Si],⌊ϕ⌋ S) = F for some s∈ D. By Lemma 5.3 we thus know that M ,g,s 6|= ϕ , and hence 6|= ϕ in CK."
    }, {
      "heading" : "6 Conclusion",
      "text" : "We have presented an embedding of quantified conditional logics in HOL. This embedding enables the uniform application of higher-order automated theorem provers and model finders for reasoning about and within quantified conditional logics. In previous work we have studied related embeddings in HOL, including propositional conditional logics [3] and quantified multimodal logics [5]. First experiments with these embeddings have provided evidence for their practical relevance. Moreover, an independent case study on reasoning in quantified modal logics shows that the embeddings based approach may even outperform specialist reasoners quantified modal logics [12]. Future work will investigate whether HOL reasoners perform similarly well also for quantified conditional logics. For a first impression of such studies we refer to the Appendices A and B, where we also present the concrete encoding of our embedding in TPTP THF0 [11] syntax. Unfortunately we are not aware of any other (direct or indirect) prover for quantified conditional logics that could be used for comparison."
    }, {
      "heading" : "A The Embedding of Quantified Conditional Logic in HOL in THF0 Syntax",
      "text" : "We present an encoding of our embedding of quantified conditional logics in HOL in the TPTP THF0 [11] syntax.\nSatisfiability of this embedding is shown by the HOL reasoner Satallax3 in only 0.01 seconds.\n%--------------------------------------------------------------------- %---- reserved constant for selection function f thf(f_type,type,(\nf: $i > ( $i > $o ) > $i > $o )).\n%---- ’not’ in conditional logic thf(cnot_type,type,(\ncnot: ( $i > $o ) > $i > $o )).\nthf(cnot_def,definition,\n( cnot = ( ^ [Phi: $i > $o,X: $i] :\n~ ( Phi @ X ) ) )).\n%---- ’or’ in conditional logic thf(cor_type,type,(\ncor: ( $i > $o ) > ( $i > $o ) > $i > $o )).\nthf(cor_def,definition,\n( cor = ( ^ [Phi: $i > $o,Psi: $i > $o,X: $i] :\n( ( Phi @ X ) | ( Psi @ X ) ) ) )).\n%---- ’true’ in conditional logic thf(ctrue_type,type,(\nctrue: $i > $o )).\nthf(ctrue_def,definition,\n( ctrue\n3http://www.ps.uni-saarland.de/~cebrown/satallax/\n= ( ^ [X: $i] : $true ) )).\n%---- ’false’ in conditional logic thf(cfalse_type,type,(\ncfalse: $i > $o )).\nthf(cfalse_def,definition,\n( cfalse = ( ^ [X: $i] : $false ) )).\n%---- ’conditional implication’ in conditional logic thf(ccond_type,type,(\nccond: ( $i > $o ) > ( $i > $o ) > $i > $o )).\nthf(ccond_def,definition,\n( ccond = ( ^ [Phi: $i > $o,Psi: $i > $o,X: $i] :\n! [W: $i] :\n( ( f @ X @ Phi @ W ) => ( Psi @ W ) ) ) )).\n%---- ’and’ in conditional logic thf(cand_type,type,(\ncand: ( $i > $o ) > ( $i > $o ) > $i > $o )).\nthf(cand_def,definition,\n( cand = ( ^ [Phi: $i > $o,Psi: $i > $o,X: $i] :\n( ( Phi @ X ) & ( Psi @ X ) ) ) )).\n%---- ’conditional equivalence’ in conditional logic thf(ccondequiv_type,type,(\nccondequiv: ( $i > $o ) > ( $i > $o ) > $i > $o )).\nthf(ccondequiv_def,definition,\n( ccondequiv = ( ^ [Phi: $i > $o,Psi: $i > $o] :\n( cand @ ( ccond @ Phi @ Psi ) @ ( ccond @ Psi @ Phi ) ) ) )).\n%---- ’material implication’ in conditional logic thf(cimpl_type,type,(\ncimpl: ( $i > $o ) > ( $i > $o ) > $i > $o )).\nthf(cimpl_def,definition,\n( cimpl = ( ^ [Phi: $i > $o,Psi: $i > $o,X: $i] :\n( ( Phi @ X )\n=> ( Psi @ X ) ) ) )).\n%---- ’material equivalence’ in conditional logic thf(cequiv_type,type,(\ncequiv: ( $i > $o ) > ( $i > $o ) > $i > $o )).\nthf(cequiv_def,definition,\n( cequiv = ( ^ [Phi: $i > $o,Psi: $i > $o] :\n( cand @ ( cimpl @ Phi @ Psi ) @ ( cimpl @ Psi @ Phi ) ) ) )).\n%---- ’universal quantification (individuals)’ in conditional logic thf(cforall_ind_type,type,(\ncforall_ind: ( mu > $i > $o ) > $i > $o )).\nthf(cforall_ind,definition,\n( cforall_ind = ( ^ [Phi: mu > $i > $o,W: $i] :\n! [X: mu] :\n( Phi @ X @ W ) ) )).\n%---- ’universal quantification (propositions)’ in conditional logic thf(cforall_prop_type,type,(\ncforall_prop: ( ( $i > $o ) > $i > $o ) > $i > $o )).\nthf(cforall_prop,definition,\n( cforall_prop = ( ^ [Phi: ( $i > $o ) > $i > $o,W: $i] :\n! [P: $i > $o] :\n( Phi @ P @ W ) ) )).\n%---- ’existential quantification (individuals)’ in conditional logic thf(cexists_ind_type,type,(\ncexists_ind: ( mu > $i > $o ) > $i > $o )).\nthf(cexists_ind,definition,\n( cexists_ind = ( ^ [Phi: mu > $i > $o] :\n( cnot @ ( cforall_ind\n@ ^ [X: mu] :\n( cnot @ ( Phi @ X ) ) ) ) ) )).\n%---- ’existential quantification (propositions)’ in conditional logic thf(cexists_prop_type,type,(\ncexists_prop: ( ( $i > $o ) > $i > $o ) > $i > $o )).\nthf(cexists_prop,definition,\n( cexists_prop = ( ^ [Phi: ( $i > $o ) > $i > $o] :\n( cnot @ ( cforall_prop\n@ ^ [P: $i > $o] :\n( cnot @ ( Phi @ P ) ) ) ) ) )).\n%---- ’validity’ of a conditional logic formula thf(valid_type,type,(\nvalid: ( $i > $o ) > $o )).\nthf(valid_def,definition,\n( valid = ( ^ [Phi: $i > $o] :\n! [S: $i] :\n( Phi @ S ) ) )).\n%---------------------------------------------------------------------"
    }, {
      "heading" : "B The Barcan Formula and the Converse Barcan Formula",
      "text" : "Using the above THF0 encoding, the Barcan formula (∀X .A ⇒ B(x))→ (A ⇒∀X .B(x)) can be encoded in THF0 as given below. The HOL provers LEO-II4 and Satallax can both prove this theorem in 0.01 seconds. This confirms that our encoding assumes constant domain semantics.\n%--------------------------------------------------------------------- include(’CK_axioms.ax’).\n%---- conjecture statement thf(a,type,(\na: $i > $o )).\nthf(b,type,(\nb: mu > $i > $o )).\nthf(bf,conjecture,\n( valid @ ( cimpl\n@ ( cforall_ind\n@ ^ [X: mu] :\n( ccond @ a @ ( b @ X ) ) )\n@ ( ccond @ a\n@ ( cforall_ind\n@ ^ [X: mu] :\n( b @ X ) ) ) ) )).\n%---------------------------------------------------------------------\nThe converse Barcan formula (A ⇒∀X .B(x))→ (∀X .A⇒ B(x)) can be encoded analogously. Again, the HOL provers LEO-II and Stallax need only 0.01 seconds to prove this theorem.\n%--------------------------------------------------------------------- include(’CK_axioms.ax’).\n%---- conjecture statement thf(a,type,(\na: $i > $o )).\nthf(b,type,(\nb: mu > $i > $o )).\nthf(cbf,conjecture,\n( valid @ ( cimpl\n@ ( ccond @ a\n4http://www.leoprover.org\n@ ( cforall_ind\n@ ^ [X: mu] :\n( b @ X ) ) )\n@ ( cforall_ind\n@ ^ [X: mu] :\n( ccond @ a @ ( b @ X ) ) ) ) )).\n%---------------------------------------------------------------------"
    } ],
    "references" : [ {
      "title" : "General models and extensionality",
      "author" : [ "P.B. Andrews" ],
      "venue" : "J. of Symbolic Logic,",
      "citeRegEx" : "1",
      "shortCiteRegEx" : "1",
      "year" : 1972
    }, {
      "title" : "Church’s type theory",
      "author" : [ "P.B. Andrews" ],
      "venue" : "In The Stanford Encyclopedia of Philosophy",
      "citeRegEx" : "2",
      "shortCiteRegEx" : "2",
      "year" : 2009
    }, {
      "title" : "Embedding and automating conditional logics in classical higher-order logic",
      "author" : [ "C. Benzmüller", "D. Gabbay", "V. Genovese", "D. Rispoli" ],
      "venue" : "Technical report,",
      "citeRegEx" : "3",
      "shortCiteRegEx" : "3",
      "year" : 2011
    }, {
      "title" : "Multimodal and intuitionistic logics in simple type theory",
      "author" : [ "C. Benzmüller", "L.C. Paulson" ],
      "venue" : "Logic J. of the IGPL,",
      "citeRegEx" : "4",
      "shortCiteRegEx" : "4",
      "year" : 2010
    }, {
      "title" : "Quantified multimodal logics in simple type theory",
      "author" : [ "C. Benzmüller", "L.C. Paulson" ],
      "venue" : "Logica Universalis,",
      "citeRegEx" : "5",
      "shortCiteRegEx" : "5",
      "year" : 2011
    }, {
      "title" : "Modal Logic: An Introduction",
      "author" : [ "B.F. Chellas" ],
      "venue" : null,
      "citeRegEx" : "6",
      "shortCiteRegEx" : "6",
      "year" : 1980
    }, {
      "title" : "A formulation of the simple theory of types",
      "author" : [ "A. Church" ],
      "venue" : "J. of Symbolic Logic,",
      "citeRegEx" : "7",
      "shortCiteRegEx" : "7",
      "year" : 1940
    }, {
      "title" : "Topics in conditional logic",
      "author" : [ "D. Nute" ],
      "venue" : "Reidel, Dordrecht,",
      "citeRegEx" : "8",
      "shortCiteRegEx" : "8",
      "year" : 1980
    }, {
      "title" : "A sequent calculus and a theorem prover for standard conditional logics",
      "author" : [ "N. Olivetti", "G.L. Pozzato", "C. Schwind" ],
      "venue" : "ACM Trans. Comput. Log.,",
      "citeRegEx" : "9",
      "shortCiteRegEx" : "9",
      "year" : 2007
    }, {
      "title" : "A theory of conditionals",
      "author" : [ "R. Stalnaker" ],
      "venue" : "Studies in Logical Theory, American Philosophical Quarterly, Monograph Series",
      "citeRegEx" : "10",
      "shortCiteRegEx" : "10",
      "year" : 1968
    }, {
      "title" : "Automated reasoning in higher-order logic using the TPTP THF infrastructure",
      "author" : [ "G. Sutcliffe", "C. Benzmüller" ],
      "venue" : "J. of Formalized Reasoning,",
      "citeRegEx" : "11",
      "shortCiteRegEx" : "11",
      "year" : 2010
    } ],
    "referenceMentions" : [ {
      "referenceID" : 2,
      "context" : "A semantic embedding of propositional conditional logic in classical higher-order logic HOL (Church’s type theory) has been presented in [3].",
      "startOffset" : 137,
      "endOffset" : 140
    }, {
      "referenceID" : 9,
      "context" : "This embedding exploits the natural correspondence between selection function semantics for conditional logics [10] and HOL.",
      "startOffset" : 111,
      "endOffset" : 115
    }, {
      "referenceID" : 2,
      "context" : "In this paper we extend the embedding in [3] to also include quantification over propositions and individuals.",
      "startOffset" : 41,
      "endOffset" : 44
    }, {
      "referenceID" : 7,
      "context" : "Regarding semantics, many different formalizations have been proposed (see [8]), here we focus on the selection function semantics [6], which is based on possible world structures and has been successfully used in [9] to develop proof methods for some conditional logics.",
      "startOffset" : 75,
      "endOffset" : 78
    }, {
      "referenceID" : 5,
      "context" : "Regarding semantics, many different formalizations have been proposed (see [8]), here we focus on the selection function semantics [6], which is based on possible world structures and has been successfully used in [9] to develop proof methods for some conditional logics.",
      "startOffset" : 131,
      "endOffset" : 134
    }, {
      "referenceID" : 8,
      "context" : "Regarding semantics, many different formalizations have been proposed (see [8]), here we focus on the selection function semantics [6], which is based on possible world structures and has been successfully used in [9] to develop proof methods for some conditional logics.",
      "startOffset" : 214,
      "endOffset" : 217
    }, {
      "referenceID" : 5,
      "context" : "∧φ0 ⇒ φn)→ (φ0 ⇒ ψ) φ ↔ φ ′ (RCEC) (ψ ⇒ φ)↔ (ψ ⇒ φ ) We refer to CK [6] as the minimal quantified conditional logic closed under rules RCEA, RCEC and RCK.",
      "startOffset" : 68,
      "endOffset" : 71
    }, {
      "referenceID" : 6,
      "context" : "HOL is a logic based on simply typed λ -calculus [7, 2].",
      "startOffset" : 49,
      "endOffset" : 55
    }, {
      "referenceID" : 1,
      "context" : "HOL is a logic based on simply typed λ -calculus [7, 2].",
      "startOffset" : 49,
      "endOffset" : 55
    }, {
      "referenceID" : 0,
      "context" : "The following definition of HOL semantics closely follows the standard literature [1, 2].",
      "startOffset" : 82,
      "endOffset" : 88
    }, {
      "referenceID" : 1,
      "context" : "The following definition of HOL semantics closely follows the standard literature [1, 2].",
      "startOffset" : 82,
      "endOffset" : 88
    }, {
      "referenceID" : 3,
      "context" : "In line with [4], we define vld(i o) o = λAi o.",
      "startOffset" : 13,
      "endOffset" : 16
    }, {
      "referenceID" : 2,
      "context" : ",Xn), δ =(¬φ), δ = (φ ∨ψ), and δ = (φ ⇒ ψ) are similar to Lemma 1 in [3].",
      "startOffset" : 69,
      "endOffset" : 72
    }, {
      "referenceID" : 4,
      "context" : "7 in [5].",
      "startOffset" : 5,
      "endOffset" : 8
    }, {
      "referenceID" : 2,
      "context" : "In previous work we have studied related embeddings in HOL, including propositional conditional logics [3] and quantified multimodal logics [5].",
      "startOffset" : 103,
      "endOffset" : 106
    }, {
      "referenceID" : 4,
      "context" : "In previous work we have studied related embeddings in HOL, including propositional conditional logics [3] and quantified multimodal logics [5].",
      "startOffset" : 140,
      "endOffset" : 143
    }, {
      "referenceID" : 10,
      "context" : "For a first impression of such studies we refer to the Appendices A and B, where we also present the concrete encoding of our embedding in TPTP THF0 [11] syntax.",
      "startOffset" : 149,
      "endOffset" : 153
    } ],
    "year" : 2013,
    "abstractText" : "A semantic embedding of quantified conditional logic in classical higher-order logic is presented.",
    "creator" : "LaTeX with hyperref package"
  }
}