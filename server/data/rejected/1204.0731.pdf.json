{
  "name" : "1204.0731.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : null,
    "authors" : [ "Olivier Bailleux" ],
    "emails" : [ ],
    "sections" : [ {
      "heading" : null,
      "text" : "ar X\niv :1\n20 4.\n07 31\nv1 [\ncs .A\nI] 3\nA pr\n2 01\n2\nSome aspects of the result of applying unit resolution on a cnf formula can be formalized as functions with domain a set of partial truth assignments. We are interested in two ways for computing such functions, depending on whether the result is the production of the empty clause or the assignment of a variable with a given truth value. We show that these two models can compute the same functions with formulae of polynomially related sizes, and we explain how this result is related to the cnf encoding of Boolean constraints."
    }, {
      "heading" : "1. Introduction",
      "text" : ""
    }, {
      "heading" : "1.1. Theoretical framework",
      "text" : "In this paper, we deal with Boolean variables, constraints, and assignments. Any assignment of a Boolean variable v is denoted either [v, 0] or [v, 1]. Given any set V of Boolean variables, an assignment on V is a set I of assignments of variables of V . I is said to be complete if it assigns exactly one value to any variable of V , partial if it assigns at most one value to any variable of V , and contradictory if there is a variable v ∈ V such that [v, 0] ∈ V and [v, 1] ∈ V . Unless otherwise stated, an assignment on V is supposed to be partial and not contradictory. The set of all possible non contradictory complete assignments on V will be denoted AV , while the set of all possible non contradictory partial assignments on V will be denoted IV . Given any set V of Boolean variables, the term Boolean constraint on V will be used in its widest sense, i.e., any computational representation q of a satisfiability function hq with domain AV and codomain {sat, unsat}. Given any complete assignment A ∈ AV , any constraint q on V is said to be satisfied by A if hq(A) = sat, else it is said to be falsified by A. Given any partial assignment I ∈ IV , any constraint q on V is said to be satisfied (falsified, respectively) by I if and only if q is satisfied (falsified, respectively) by any A ∈ AV such that I ⊆ A. In propositional logic, a literal is either a propositional variable v or its negation ¬v. By convention, the truth values will be denoted as the Boolean values 0 and 1. A clause is any disjunction of literals ω1 ∨ · · · ∨ωk, and a cnf formula is any conjunction of clauses c1 ∧ · · · ∧ cm. The size of a clause is its number of literals. The size of a formula is the sum of the sizes of its clauses. Literals, clauses, and cnf formulae can be considered as Boolean constraints: v is satisfied by [v, 1], ¬v by [v, 0], a clause is satisfied if and only if at least one of its literals is satisfied, and a cnf formula is satisfied if and only if all its clauses are satisfied. The following conventions will be used in the rest of the paper: given any variable v, the assignment [v, 1] can be denoted [v], and the assignment [v, 0] can be denoted [¬v]; any clause can be considered as a set of literals, and any formula can be considered as a set of clauses; for any set V of Boolean variables, lit(V ) denotes the set of literals based on variables of V , namely ∪v∈V {v,¬v}. Any cnf formula Σ is said to be satisfiable if and only if there exists a truth assignment which satisfies Σ. Sat is the problem of determining whether any arbitrary cnf formula Σ is satisfiable or not. Given any formula Σ with variables V , and any assignment I on V , Σ|I denotes the formula Σ ∧[ω]∈I (ω), i.e., the formula Σ where the clause (v) is added for each assignment of [v, 1] ∈ I, and the clause (¬v) is added for each assignment [v, 0] ∈ I. Introduced in [14], unit resolution utilizes unit clauses to produce new variable assignments and, when applicable, to detect inconsistencies. For the purpose of this paper, its principle can be described as follows. Given any assignment I, a clause c is said to be a unit clause with respect to I if and only if I falsifies all the literals of c except for one literal ω, which will be called the active literal of c. Given any cnf formula Σ, the unit resolution process starts from an empty set U of variable assignments, which is iteratively augmented by the active literals of unit clauses with respect to U , until either U\nbecomes contradictory or no new literal can be inferred any more. The formula can then be simplified by removing any non-unit clause satisfied by U , as well as any literal falsified by U . The resulting formula Σ′ is logically equivalent to Σ. If U is contradictory, then the empty clause belongs to Σ′, implying that Σ is not satisfiable. Sat solvers [4] use unit resolution to speed up the search for solutions or inconsistencies by reducing the number of decisions (binary nodes) in the search tree."
    }, {
      "heading" : "1.2. Motivation",
      "text" : "Given any set V of propositional variables, we are interesting in functions with domain D ⊆ IV and codomain {yes, no}1 which can account for some aspects of the result of applying unit resolution to a cnf formula: the empty clause is produced, or a given variable is assigned to 1, or it is assigned to 0. In the scope of this report, these functions will be called matching functions. Given any formula Σ, and any set V of propositional variables occurring in Σ, the inferences made by unit resolution can be modeled by the following matching functions:\n• The function fΣ : IV 7→ {yes, no} such that for any partial assignment I ∈ IV , fΣ(I) = yes if and only if applying unit resolution on Σ|I produces the empty clause. We will say that unit resolution computes this function by contradiction.\n• For any literal ω = lit(V ), the function gΣ,ω : Dω 7→ {yes, no}, where Dω = {I ∈ IV : fΣ(I) = no}, such that for any partial truth assignment I ∈ Dω, gΣ,ω(I) = yes if and only if applying unit resolution to Σ|I infers [ω]. We will say that unit resolution computes these functions by propagation.\nKnowing the matching functions that can be computed by contradiction – as well as the ones that can be computed by propagation – with a polynomial amount of clauses is crucial for the study of the cnf encodings of Boolean constraints. Given any set V of Boolean variables and any constraint q on V , a cnf encoding of q is any cnf formula Σq (which can include variables not belonging to V ) such that for any complete assignment A ∈ AV , Σq|A is satisfiable if and only if A satisfies q. This property allows any constraint satisfiability problem to be solved using a sat solver. Two interesting additional properties of cnf encodings have been reported as potentially improving the efficiency of solving the resulting sat instances:\n1. Given any encoded constraint q, unit resolution detects any partial assignment which falsify q: from any such assignment, the empty clause is produced. For example, this property is studied in [13] in the context of Boolean cardinality constraints. Such an encoding will be called upi (like unit propagation detects inconsistency) in the following.\n2. Given any encoded constraint q on variables V , unit resolution enforces the generalised arc consistency of q, i.e., for any partial assignment I ∈ IV which does not falsify q, and any literal ω ∈ lit(V ), if I ∪{[ω]} falsify q then [¬ω] is inferred. This criterion was introduced in [5]. Such an encoding will be called upac (like unit propagation restores generalized arc consistency) in the following.\nIn most cases, only the encodings producing a formula of size polynomially related to the number of variables of the input constraint can be used in practice. They will be called polynomial encodings in the following. Let us consider a familyQ of constraints on Boolean variables. For any constraint q ofQ with variables V = {v1, . . . , vn}, let us define the inconsistency function of q as fq : IV 7→ {yes, no} such that for any partial assignment I ∈ IV , fq(I) = yes if and only I falsifies q. Clearly, the existence of a polynomial upi encoding for the constraints ofQ depends on the existence of polynomially sized cnf formulae allowing unit resolution to compute by contradiction the inconsistency functions of the constraints of Q. Now, for any constraint q of Q with variables V = {v1, . . . , vn}, and any literal ω ∈ lit(V ), let us define the arc consistency functions of q as gq,ω : Dq 7→ {yes, no}, Dq = {I ∈ IV : fq(I) = no}, such that for any partial assignment I ∈ Dq, gq,ω(I) = yes if and only if I ∪ {[¬ω]} falsifies q. Clearly again, the existence of a polynomial upac encoding for the constraints of Q can be expressed as the existence of polynomially sized cnf formulae allowing unit resolution to compute by propagation the arc consistency functions related to the constraints of Q.\n1Without loss of generality, these values have been chosen so as to avoid any ambiguity with the logical values true and false or the Boolean values 0 and 1."
    }, {
      "heading" : "1.3. Contribution",
      "text" : "We show that any matching function can be computed by unit contradiction if and only if it can be computed by unit propagation, and that any family of matching functions can be computed in polynomial size (then in polynomial time) by unit contradiction if and only if it can be computed in polynomial size by unit propagation. As a corollary, for any family Q of constraints with Boolean variables, if there exists a polynomial upi encoding for Q then there exists a polynomial upac encoding for Q."
    }, {
      "heading" : "2. Technical results",
      "text" : "In this section, we will formalize and prove the previously presented results as the two following theorems.\nTheorem 1. Let f be any matching function. If f can be computed by propagation using a formula of size p, then f can be computed by contradiction with a formula of size p+ 1.\nProof. Any cnf formula Σp computing a matching function f by propagation can be reduced in the following way to a formula Σc computing f by contradiction. Let f be a matching function with domain D ⊆ IV . Let Σp be a cnf formula allowing unit resolution to compute f by propagation. This means that there is a literal ω such that for any I ∈ D, applying unit propagation to Σp|I cannot produce the empty clause, but infers [ω] if and only if f(I) = yes. Then the formula Σc = Σp ∧ (¬ω) allows unit resolution to compute f by contradiction.\nTheorem 2. Let f be any matching function. If f can be computed by contradiction using a formula of size p with n variables, then f can be computed by propagation with a formula of size O(pn2).\nProof. Any cnf formula Σc computing a matching function f by contradiction can be reduced in the following way to a formula Σp computing f by propagation. Let f be a matching function with domain IV . Let Σc be a cnf formula allowing unit resolution to compute f by contradiction. We will construct a formula Σp such that for any I ∈ IV , applying unit resolution to Σp|I does not produce the empty clause, but assigns 1 to a new variable s if and only if applying unit resolution to Σc|I produces the empty clause. As a manner of speaking, applying unit resolution on Σp|I simulates the effects of applying unit resolution to Σc|I without ever producing the empty clause. To this end, the unit resolution process is decomposed into stages such that each stage i produces the assignments induced from the unit clauses with respect to the assignment of the stage i − 1, where the assignment of the stage 0 is I0 = I. Let V be the set of variables of Σc and n = |V |. Because the cardinal of any non contradictory assignment on V is at most n, the unit resolution process stops after at most n+ 1 stages. Given any cnf formula Σ and any integer i, let U(Σ, i) denote the current assignment after i unit resolution stages on Σ. The formula Σp contains 2(n + 1) + n variables, namely the variables of V and, for each literal ω ∈ lit(V ), (n+ 1) new variables denoted xω,1, . . . , xω,n+1. It consists of the following clauses:\n1. for any v ∈ V , (v ∨ x¬v,1) and (¬v ∨ xv,1), which are called injection clauses; 2. for any ω ∈ lit(V ) and any i ∈ 1..n, (¬xω,i ∨ xω,i+1), which are called replication clauses ; 3. for any clause c of Σc with at least two literals, any literal ω ∈ c, and any i ∈ 1..n, (xω,i+1∨ρ∈c\\{ω} ¬x¬ρ,i), which are called deduction clauses. 4. for any singleton clause (ω) of Σ, (xω,1), which are called unit clauses.\nLet us consider the following induction hypothesis Hm: for any ω ∈ lit(V ), [xω,m] ∈ U(Σp|I ,m) if and only if [ω] ∈ U(Σc|I ,m). For any ω ∈ lit(V ), [ω] ∈ U(Σc|I , 1) if and only if [ω] ∈ I or (ω) ∈ Σc. In the first case, [xω,1] ∈ U(Σp|I , 1) thanks to the injection clause (¬ω ∨ xω,1). In the second case, [xω,1] ∈ U(Σp|I , 1) thanks to the deduction clause (xω,1). Because only these clauses can infer [xω,1] during the unit resolution process on Σp|I , and because they can infer [xω,1] only in theses two cases, H1 holds. Now, suppose that Hm holds for some m ∈ 1..n, and let us consider any literal ω ∈ lit(V ). Regarding the inference of [ω] by unit resolution on Σc|I at stage m+ 1, three cases can be considered:\n1. [ω] ∈ U(Σc|I ,m) and then [ω] ∈ U(Σc|I ,m + 1). By induction hypothesis, [xω,m] ∈ U(Σp|I ,m). Thanks to the replication clause (¬xω,m,∨xω,m+1) of Σp, [xω,m+1] ∈ U(Σp|I ,m+1). See Figure A.1 for a graphical illustration.\n2. [ω] /∈ U(Σc|I ,m) and [ω] ∈ U(Σc|I ,m+ 1). Then there is a clause (ρ1,∨ · · · ∨ ρk ∨ ω) in Σc such that all the assignments [¬ρ1] to [¬ρk] are in U(Σc|I ,m). By induction hypothesis, [x¬ρ1,m] to [x¬ρk,m] are in U(Σp|I ,m). Thanks to the deduction clause (¬x¬ρ1,m ∨ · · · ∨ ¬x¬ρk ,m ∨ xω,m+1), [xω,m+1] ∈ U(Σp|I ,m+ 1). See Figure A.2 for a graphical illustration. 3. [ω] /∈ U(Σc|I ,m) and [ω] /∈ U(Σc|I ,m + 1). The only clauses of Σp that can infer [xω,m+1] are the replication clauses and the deduction clauses. By induction hypothesis, [xω,m] /∈ U(Σp|I ,m), then no replication clause can infer [xω,m+1]. Secondly, because [ω] /∈ U(Σc|I ,m + 1), for any clause (ρ1,∨ · · · ∨ ρk ∨ ω) in Σc, not all the literals ρ1 to ρk are falsified by U(Σc|I ,m). By induction hypothesis, not all the assignments [x¬ρ1,m] to [x¬ρk,m] are in U(Σp|I ,m). Then, the corresponding deduction clause (¬x¬ρ1,m ∨ · · · ∨ ¬x¬ρk,m ∨ xω,m+1) of Σp cannot infer [xω,m+1].\nHence Hm holds for any m ∈ 1..(n + 1). Furthermore, because each unit resolution stage on Σp|I infers only positive literals, the empty clause is never produced. It follows that unit resolution on Σc|I produces the empty clause (or, equivalently, infers two opposite literals) if and only if there is a variable v ∈ V such that [xv,n+1] and [x¬v,n+1] are inferred by unit resolution on Σp|I . Now, let us complete the formula Σp with the clauses (¬xv,n+1 ∨ ¬v¬v,n+1 ∨ s), for each v ∈ V , where s is a new fresh variable. Clearly, unit resolution on Σp|I infers [s] if and only if unit resolution on Σc|I produces the empty clause. For illustrative purposes, Figure A.3 gives an example of how unit resolution on Σp|I simulates unit resolution on Σc|I . Let p be the size of Σc and k be the size of the largest clause of Σc. Without loss of generality, let us suppose that k ≤ n (any larger clause would be a tautology). The formula Σp includes O(n) injection clauses, O(n2) replication clauses, O(n2) unit clauses, and O(np) deduction clauses. Because the largest clauses of Σp, which are the deduction clauses, have size at most k, the size of Σp is O(npk) = O(n2p).\nAs a corollary of theorem 2, let Q be a family of contraints for which there exists a polynomial upi cnf encoding, and let us show how a polynomial upac encoding can be obtained. By hypothesis, for any constraint q ∈ Q with variables V = {v1, . . . , vn}, there is a cnf formula Σq of size polynomially related to n such that for any assignment I on V , unit resolution on Σq|I produces the empty clause if and only if I falsifies q. A upac encoding Ωq for q must verify the additional following property: for any literal ω ∈ lit(V ), and any assignment I ∈ IV such that I does not falsify q and [ω] /∈ I, unit resolution on Ωq|I does not produce the empty clause, but infers [ω] if and only if I ∪ {[¬ω]} falsifies q. Such a behavior can be obtained thanks to the following formula:\nΩq = Σq ∧ω∈lit(V ) (Σq,ω ∧ (¬sω ∨ ¬ω))\nWhere each Σq,ω is a formula allowing unit resolution to compute by propagation, with output variable sω, the contradiction function of the contraint Σq ∧ (ω)."
    }, {
      "heading" : "3. Related works",
      "text" : "There are at least three research directions related to the study of the expressive power of unit resolution. The first one aims to identify the classes of formulae for which unit resolution is a complete refutation procedure in the sense that it produces the empty clause if and only if the input formula is not satisfiable. For example, this property holds for the formulae containing only Horn clauses [7]. The second direction aims to characterize the complexity of determining whether a given formula can be refuted by unit resolution or not. This decision problem denoted unit is known to be p-complete, meaning that for any decision problem π with polynomial time complexity, there exists a log space reduction from π to unit [9]. Circuit value, which consists to determine the output value of a Boolean circuit, given its input values, is p-complete too [6]. Regarding the complexity theory, unit and circuit value have then the same expressive power. In the present paper, a different point of view is adopted. The cnf formula is not the input data of a program, but the program itself. The input data is a partial truth assignment encoded in a natural way, i.e., each input variable can be either assigned to 0, assigned to 1, or not assigned. The third line is related to the search for efficient cnf encodings of various problems in order to solve them thanks to any sat solver. Because unit resolution is implemented efficiently in sat solvers, many works aim to find encoding schemes which allow unit resolution to make as many inferences as possible. In [5], a cnf encoding for enumerative constraints is proposed, which allows unit propagation to make the same deductions on the resulting formula as restoring arc consistency on the initial constraints\ndoes. This work was innovative because with the previously known encodings, unit propagation had less inference power than restoring arc consistency, which is the basic filtering method used in constraint solvers [10]. It has been followed by various similar works on other kinds of constraints such as Boolean cardinality constraints [2] and pseudo-Boolean constraints [3], for which polynomial upi and upac encoding are proposed. In [1], a general way to construct a (possibly non-polynomial) upac encoding for any constraint is proposed. Today, it has become customary, when a new encoding is proposed, to address the question of the behavior of unit resolution on the obtained sat instances. So far, upi and upac cnf encodings are known for enumerative constraints [5], Boolean cardinality constraints [13], and pseudo-Boolean constraints [11], but the research field remains open regarding, for example, arithmetic constraints [8] or global cardinality constraints [12]."
    }, {
      "heading" : "4. Concluding remarks and perspectives",
      "text" : "To the best of our knowledge, it is the first time that unit resolution is addressed as a computation model for functions with domain a set of partial assignments on Boolean variables. We believe that this model is appropriate to characterize the inference power of unit resolution in sat solvers. By showing that unit contradiction has the same expressive power as unit propagation, we provide a theoretical insight into the field of encodings of constraint satisfaction problems into cnf for solving them thanks to sat solvers. The underlying scientific issue is nothing less than determining the scope of application of sat solvers: which problems can be reasonably addressed by sat solvers, which cannot, and why ? We are currently working on the characterization of the matching functions that can be efficiently computed by unit resolution, and so the constraints for which there exist polynomial upi and upac encodings. The following step will be to look for a general method for translating – when applicable – algorithms or Boolean circuits into cnf formulae allowing unit resolution to compute the same matching functions."
    }, {
      "heading" : "Appendix A. Graphical illustrations",
      "text" : "Here, we give some graphical illustration of the reduction described in the proof of the theorems presented section 2."
    } ],
    "references" : [ {
      "title" : "GAC via unit propagation",
      "author" : [ "Fahiem Bacchus" ],
      "venue" : "Notes in Computer Science,",
      "citeRegEx" : "1",
      "shortCiteRegEx" : "1",
      "year" : 2007
    }, {
      "title" : "Efficient CNF encoding of boolean cardinality constraints",
      "author" : [ "Olivier Bailleux", "Yacine Boufkhad" ],
      "venue" : "In Proceedings of the 9th International Conference on Principles and Practice of Constraint Programming",
      "citeRegEx" : "2",
      "shortCiteRegEx" : "2",
      "year" : 2003
    }, {
      "title" : "New encodings of pseudo-boolean constraints into CNF",
      "author" : [ "Olivier Bailleux", "Yacine Boufkhad", "Olivier Roussel" ],
      "venue" : "In Theory and Applications of Satisfiability Testing - SAT 2009 (SAT’09),",
      "citeRegEx" : "3",
      "shortCiteRegEx" : "3",
      "year" : 2009
    }, {
      "title" : "Arc consistency in SAT",
      "author" : [ "Ian P. Gent" ],
      "venue" : "In Proceedings of ECAI 2002,",
      "citeRegEx" : "5",
      "shortCiteRegEx" : "5",
      "year" : 2002
    }, {
      "title" : "The monotone and planar circuit value problems are log space complete for p",
      "author" : [ "Leslie M. Goldschlager" ],
      "venue" : "SIGACT News,",
      "citeRegEx" : "6",
      "shortCiteRegEx" : "6",
      "year" : 1977
    }, {
      "title" : "Unit refutations and horn sets",
      "author" : [ "L. Henschen", "L. Wos" ],
      "venue" : "J. ACM,",
      "citeRegEx" : "7",
      "shortCiteRegEx" : "7",
      "year" : 1974
    }, {
      "title" : "Universal booleanization of constraint models",
      "author" : [ "Jinbo Huang" ],
      "venue" : "Proceedings of the 14th international conference on Principles and Practice of Constraint Programming,",
      "citeRegEx" : "8",
      "shortCiteRegEx" : "8",
      "year" : 2008
    }, {
      "title" : "Complete problems for deterministic polynomial time",
      "author" : [ "Neil D. Jones", "William T. Laaser" ],
      "venue" : "Theoretical Computer Science,",
      "citeRegEx" : "9",
      "shortCiteRegEx" : "9",
      "year" : 1976
    }, {
      "title" : "Constraint Networks, Techniques and Algorithms",
      "author" : [ "Christophe Lecoutre" ],
      "venue" : "ISTE,",
      "citeRegEx" : "10",
      "shortCiteRegEx" : "10",
      "year" : 2009
    }, {
      "title" : "New encodings of pseudo-boolean constraints into cnf",
      "author" : [ "Y. Boufkhad O. Bailleux", "O.Roussel" ],
      "venue" : "In Theory and Applications of Satisfiability Testing,",
      "citeRegEx" : "11",
      "shortCiteRegEx" : "11",
      "year" : 2009
    }, {
      "title" : "Generalized arc consistency for global cardinality constraint",
      "author" : [ "J-C. Régin" ],
      "venue" : "In Proceedings of of AAAI-96,",
      "citeRegEx" : "12",
      "shortCiteRegEx" : "12",
      "year" : 1996
    }, {
      "title" : "Towards an optimal CNF encoding of boolean cardinality constraints",
      "author" : [ "Carsten Sinz" ],
      "venue" : "In Proceedings of the 10th International Conference on Principles and Practice of Constraint Programming",
      "citeRegEx" : "13",
      "shortCiteRegEx" : "13",
      "year" : 2005
    }, {
      "title" : "The unit preference strategy in theorem proving",
      "author" : [ "L. Wos", "D.F. Carson", "G.A. Rubinson" ],
      "venue" : "In New York Spartan Books, editor, Proc. of AFIPS,",
      "citeRegEx" : "14",
      "shortCiteRegEx" : "14",
      "year" : 1964
    } ],
    "referenceMentions" : [ {
      "referenceID" : 12,
      "context" : "Introduced in [14], unit resolution utilizes unit clauses to produce new variable assignments and, when applicable, to detect inconsistencies.",
      "startOffset" : 14,
      "endOffset" : 18
    }, {
      "referenceID" : 11,
      "context" : "For example, this property is studied in [13] in the context of Boolean cardinality constraints.",
      "startOffset" : 41,
      "endOffset" : 45
    }, {
      "referenceID" : 3,
      "context" : "This criterion was introduced in [5].",
      "startOffset" : 33,
      "endOffset" : 36
    }, {
      "referenceID" : 5,
      "context" : "For example, this property holds for the formulae containing only Horn clauses [7].",
      "startOffset" : 79,
      "endOffset" : 82
    }, {
      "referenceID" : 7,
      "context" : "This decision problem denoted unit is known to be p-complete, meaning that for any decision problem π with polynomial time complexity, there exists a log space reduction from π to unit [9].",
      "startOffset" : 185,
      "endOffset" : 188
    }, {
      "referenceID" : 4,
      "context" : "Circuit value, which consists to determine the output value of a Boolean circuit, given its input values, is p-complete too [6].",
      "startOffset" : 124,
      "endOffset" : 127
    }, {
      "referenceID" : 3,
      "context" : "In [5], a cnf encoding for enumerative constraints is proposed, which allows unit propagation to make the same deductions on the resulting formula as restoring arc consistency on the initial constraints",
      "startOffset" : 3,
      "endOffset" : 6
    }, {
      "referenceID" : 8,
      "context" : "had less inference power than restoring arc consistency, which is the basic filtering method used in constraint solvers [10].",
      "startOffset" : 120,
      "endOffset" : 124
    }, {
      "referenceID" : 1,
      "context" : "It has been followed by various similar works on other kinds of constraints such as Boolean cardinality constraints [2] and pseudo-Boolean constraints [3], for which polynomial upi and upac encoding are proposed.",
      "startOffset" : 116,
      "endOffset" : 119
    }, {
      "referenceID" : 2,
      "context" : "It has been followed by various similar works on other kinds of constraints such as Boolean cardinality constraints [2] and pseudo-Boolean constraints [3], for which polynomial upi and upac encoding are proposed.",
      "startOffset" : 151,
      "endOffset" : 154
    }, {
      "referenceID" : 0,
      "context" : "In [1], a general way to construct a (possibly non-polynomial) upac encoding for any constraint is proposed.",
      "startOffset" : 3,
      "endOffset" : 6
    }, {
      "referenceID" : 3,
      "context" : "So far, upi and upac cnf encodings are known for enumerative constraints [5], Boolean cardinality constraints [13], and pseudo-Boolean constraints [11], but the research field remains open regarding, for example, arithmetic constraints [8] or global cardinality constraints [12].",
      "startOffset" : 73,
      "endOffset" : 76
    }, {
      "referenceID" : 11,
      "context" : "So far, upi and upac cnf encodings are known for enumerative constraints [5], Boolean cardinality constraints [13], and pseudo-Boolean constraints [11], but the research field remains open regarding, for example, arithmetic constraints [8] or global cardinality constraints [12].",
      "startOffset" : 110,
      "endOffset" : 114
    }, {
      "referenceID" : 9,
      "context" : "So far, upi and upac cnf encodings are known for enumerative constraints [5], Boolean cardinality constraints [13], and pseudo-Boolean constraints [11], but the research field remains open regarding, for example, arithmetic constraints [8] or global cardinality constraints [12].",
      "startOffset" : 147,
      "endOffset" : 151
    }, {
      "referenceID" : 6,
      "context" : "So far, upi and upac cnf encodings are known for enumerative constraints [5], Boolean cardinality constraints [13], and pseudo-Boolean constraints [11], but the research field remains open regarding, for example, arithmetic constraints [8] or global cardinality constraints [12].",
      "startOffset" : 236,
      "endOffset" : 239
    }, {
      "referenceID" : 10,
      "context" : "So far, upi and upac cnf encodings are known for enumerative constraints [5], Boolean cardinality constraints [13], and pseudo-Boolean constraints [11], but the research field remains open regarding, for example, arithmetic constraints [8] or global cardinality constraints [12].",
      "startOffset" : 274,
      "endOffset" : 278
    } ],
    "year" : 2012,
    "abstractText" : "Some aspects of the result of applying unit resolution on a cnf formula can be formalized as functions with domain a set of partial truth assignments. We are interested in two ways for computing such functions, depending on whether the result is the production of the empty clause or the assignment of a variable with a given truth value. We show that these two models can compute the same functions with formulae of polynomially related sizes, and we explain how this result is related to the cnf encoding of Boolean constraints.",
    "creator" : "LaTeX with hyperref package"
  }
}