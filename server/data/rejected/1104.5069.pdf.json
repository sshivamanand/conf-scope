{
  "name" : "1104.5069.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Synthesizing Robust Plans under Incomplete Domain Models",
    "authors" : [ "Tuan A. Nguyen" ],
    "emails" : [ "natuan@asu.edu", "rao@asu.edu", "minh.do@parc.com" ],
    "sections" : [ {
      "heading" : null,
      "text" : "ar X\niv :1\n10 4.\n50 69\nv1 [\ncs .A\nI] 2\n7 A\npr 2\n01 1"
    }, {
      "heading" : "1. Introduction",
      "text" : "In the past several years, significant strides have been made in scaling up plan synthesis techniques. We now have technology to routinely generate plans with hundreds of actions. All this work, however, makes a crucial assumption–that a complete model of the domain is specified in advance. While there are domains where knowledge-engineering such detailed models is necessary and feasible (e.g., mission planning domains in NASA and factory-floor planning), it is increasingly recognized (c.f. (Hoffmann, Weber, and Kraft 2010; Kambhampati 2007)) that there are also many scenarios where insistence on correct and complete models renders the current planning technology unusable. What we need to handle such cases is a planning technology that can get by with partially specified domain models, and yet generate plans that are “robust” in the sense that they are likely to execute successfully in the real world.\nThis paper addresses the problem of formalizing the notion of plan robustness with respect to an incomplete domain model, and connects the problem of generating a robust plan under such model to conformant probabilistic planning (Kushmerick, Hanks, and Weld 1995; Hyafil and Bacchus 2003; Bryce, Kambhampati, and Smith 2006; Domshlak and Hoffmann 2007). Following Garland &\nLesh (2002), we shall assume that although the domain modelers cannot provide complete models, often they are able to provide annotations on the partial model circumscribing the places where it is incomplete. In our framework, these annotations consist of allowing actions to have possible preconditions and effects (in addition to the standard necessary preconditions and effects).\nAs an example, consider a variation of the Gripper domain, a well-known planning benchmark domain. The robot has one gripper that can be used to pick up balls, which are of two types light and heavy, from one room and move them to another room. The modeler suspects that the gripper may have an internal problem, but this cannot be confirmed until the robot actually executes the plan. If it actually has the problem, the execution of the pick-up action succeeds only with balls that are not heavy, but if it has no problem, it can always pickup all types of balls. The modeler can express this partial knowledge about the domain by annotating the action with a statement representing the possible precondition that balls should be light.\nIncomplete domain models with such possible preconditions/effects implicitly define an exponential set of complete domain models, with the semantics that the real domain model is guaranteed to be one of these. The robustness of a plan can now be formalized in terms of the cumulative probability mass of the complete domain models under which it succeeds. We propose an approach that compiles the problem of finding robust plans into the conformant probabilistic planning problem. We present experimental results showing scenarios where the approach works well, and also discuss aspects of the compilation that cause scalability issues."
    }, {
      "heading" : "2. Related Work",
      "text" : "Although there has been some work on reducing the “faults” in plan execution (e.g. the work on k-fault plans for nondeterministic planning (Jensen, Veloso, and Bryant 2004)), it is based in the context of stochastic/non-deterministic actions rather than incompletely specified ones. The semantics of the possible preconditions/effects in our incomplete domain models differ fundamentally from non-deterministic and stochastic effects. Executing different instances of the same pick-up action in the Gripper example above would either all fail or all succeed, since there is no uncertainty but the information is unknown at the time the model is built. In\ncontrast, if the pick-up action’s effects are stochastic, then trying the same picking action multiple times increases the chances of success.\nGarland & Lesh (2002) share the same objective with us on generating robust plans under incomplete domain models. However, their notion of robustness, which is defined in terms of four different types of risks, only has tenuous heuristic connections with the likelihood of successful execution of plans. Robertson & Bryce (2009) focuses on the plan generation in Garland & Lesh model, but their approach still relies on the same unsatisfactory formulation of robustness. The work by Fox et al (2006) also explores robustness of plans, but their focus is on temporal plans under unforeseen execution-time variations rather than on incompletely specified domains. Our work can also be categorized as one particular instance of the general model-lite planning problem, as defined in (Kambhampati 2007), in which the author points out a large class of applications where handling incomplete models is unavoidable due to the difficulty in getting a complete model."
    }, {
      "heading" : "3. Problem Formulation",
      "text" : "We define an incomplete domain model D̃ as D̃ = 〈F,A〉, where F = {p1, p2, ..., pn} is a set of propositions,A is a set of actions that might be incompletely specified. We denote T and F as the true and false truth values of propositions. A state s ⊆ F is a set of propositions. In addition to proposition sets that are known as its preconditions Pre(a) ⊆ F , add effects Add(a) ⊆ F and delete effects Del(a) ⊆ F , each action a ∈ A also contains:\n• Possible precondition set P̃ re(a) ⊆ F contains propositions that action a might need as its preconditions.\n• Possible add (delete) effect set Ãdd(a) ⊆ F (D̃el(a) ⊆ F ) contains propositions that the action a might add (delete, respectively) after its execution.\nIn addition, each possible precondition, add and delete effect p of the action a is associated with a weight wprea (p), wadda (p) and w del a (p) (0 < w pre a (p), w add a (p), w del a (p) < 1) representing the domain modeler’s assessment of the likelihood that p will actually be realized as a precondition, add and delete effect of a (respectively) during plan execution. Possible preconditions and effects whose likelihood of realization is not given are assumed to have weights of 12 .\nGiven an incomplete domain model D̃, we define its completion set 〈〈D̃〉〉 as the set of complete domain models whose actions have all the necessary preconditions, adds and deletes, and a subset of the possible preconditions, possible adds and possible deletes. Since any subset of P̃ re(a), Ãdd(a) and D̃el(a) can be realized as preconditions and effects of action a, there are exponentially large number of possible complete domain models Di ∈ 〈〈D̃〉〉 = {D1,D2, ...,D2K}, where K = ∑ a∈A(|P̃ re(a)|+\n|Ãdd(a)|+ |D̃el(a)|). For each complete model Di, we denote the corresponding sets of realized preconditions and effects for each action a as Prei(a), Addi(a) and Deli(a); equivalently, its complete sets of preconditions and effects\nare Pre(a) ∪ Prei(a), Add(a) ∪ Addi(a) and Del(a) ∪ Deli(a).\nThe projection of a sequence of actions π from an initial state I according to an incomplete domain model D̃ is defined in terms of the projections of π from I according to each complete domain model Di ∈ 〈〈D̃〉〉:\nγ(π, I, D̃) = ⋃\nDi∈〈〈D̃〉〉\nγ(π, I,Di) (1)\nwhere the projection over complete models is defined in the usual STRIPS way, with one important difference. The result of applying an action a in a state s where the preconditions of a are not satisfied is taken to be s (rather than as an undefined state).1\nA planning problem with incomplete domain is P̃ = 〈D̃, I, G〉 where I ⊆ F is the set of propositions that are true in the initial state, and G is the set of goal propositions. An action sequence π is considered a valid plan for P̃ if π solves the problem in at least one completion of 〈〈D̃〉〉. Specifically, ∃Di∈〈〈D̃〉〉γ(π, I,Di) |= G.\nModeling Issues in Annotating Incompleteness: From the modeling point of view, the possible precondition and effect sets can be modeled at either the grounded action or action schema level (and thus applicable to all grounded actions sharing the same action schema). From a practical point of view, however, incompleteness annotations at ground level hugely increase the burden on the domain modeler. To offer a flexible way in modeling the domain incompleteness, we allow annotations that are restricted to either specific variables or value assignment to variables of an action schema. In particular:\n• Restriction on value assignment to variables: Given variables xi with domains Xi, one can indicate that p(xi1 , ..., xik) is a possible precondition/effect of an action schema a(x1, ..., xn) when some variables xj1 , ..., xjl have values cj1 ∈ Xj1 , ..., cjl ∈ Xjl ({i1, ..., ik}, {j1, ..., jl} ⊆ {1, ..., n}). Those possible preconditions/effects can be specified with the annotation p(xi1 , ..., xik) : when (xj1 = c1 ∧ ... ∧ xjl = cl) for the action schema a(x1, ..., xn). More generally, we allow the domain writer to express a constraint C on the variables xj1 , ..., xjl in the : when construct. The annotation p(xi1 , ..., xik ) : when (C) means that p(ci1 , ..., cik) is a possible precondition/effect of an instantiated action a(c1, ..., cn) (ci ∈ Xi) if and only if the assignment (xj1 := cj1 , ..., xjl := cjl) satisfies the constraint C. This syntax subsumes both the annotations at the ground level when l = n, and at the schema level if l = 0 (or the : when construct is not specified).\n• Restriction on variables: Instead of constraints on explicit values of variables, we also allow the possible preconditions/effects p(xi1 , ..., xik) of an action schema\n1We shall see that this change is necessary so that we can talk about increasing the robustness of a plan by adding additional actions.\na(x1, ..., xn) to be dependent on some specific variables xj1 , ..., xjl without any knowledge of their restricted values. This annotation essentially requires less amount of knowledge of the domain incompleteness from the domain writer. Semantically, the possible precondition/effect p(xi1 , ..., xik ) : depends (xj1 , ..., xjl) of an action schema a(x1, ..., xn) means that (1) there is at least one instantiated action a(c1, ..., cn) (ci ∈ Xi) having p(ci1 , ..., cik) as its precondition, and (2) for any two assignments (x1 := c1, ..., xn := cn), (x1 := c′1, ..., xn := c′n) such that cjt = c ′ jt\n(1 ≤ t ≤ l), either both p(ci1 , ..., cik) and p(c ′ i1 , ..., c′ik) are preconditions of the corresponding actions, or they are not. Similar to the : when above, the : depend construct also subsumes the annotations at the ground level when l = n, and at the schema level if l = 0 (or the : depend field is not specified). Another interesting modeling issue is the correlation among the possible preconditions and effects across actions. In particular, the domain writer might want to say that two actions (or action schemas) will have specific possible preconditions and effects in tandem. For example, we might say that the second action will have a particular possible precondition whenever the first one has a particular possible effect. We note that annotations at the lifted level introduce correlations among possible preconditions and effects at the ground level.\nAlthough our notion of plan robustness and approach to generating robust plans (see below) can be adapted to allow such flexible annotations and correlated incompleteness, for ease of exposition we limit our discussion to uncorrelated possible precondition and effect annotations specified at the schema level (i.e. without using the : when and : depend constructs)."
    }, {
      "heading" : "4. A Robustness Measure for Plans",
      "text" : "Given an incomplete domain planning problem P̃ = 〈D̃, I, G〉, a valid plan (by our definition above) need only to succeed in at least one completion of D̃. Given that 〈〈D̃〉〉 can be exponentially large in terms of possible preconditions and effects, validity is too weak to guarantee on the quality of the plan. What we need is a notion that π succeeds in most of the highly likely completions of D̃. We do this in terms of a robustness measure.\nThe robustness of a plan π for the problem P̃ is defined as the cumulative probability mass of the completions of D̃ under which π succeeds (in achieving the goals). More formally, let Pr(Di) be the probability distribution representing the modeler’s estimate of the probability that a given model in 〈〈D̃〉〉 is the real model of the world (such that∑\nDi∈〈〈D̃〉〉 Pr(Di) = 1). The robustness of π is defined\nas follows:\nR(π, P̃ : 〈D̃, I, G〉) def ≡\n∑\nDi∈〈〈D̃〉〉,γ(π,I,Di)|=G\nPr(Di) (2)\nIt is easy to see that if R(π, P̃) > 0, then π is a valid plan for P̃ .\nNote that given the uncorrelated incompleteness assumption, the probability Pr(Di) for a model Di ∈ 〈〈D̃〉〉 can be computed as the product of the weights wprea (p), w add a (p), and wdela (p) for all a ∈ A and its possible preconditions/effects p if p is realized in the model (or the product of their “complement” 1 − wprea (p), 1 − w add a (p), and 1− wdela (p) if p is not realized).\nExample: Figure 1 shows an example with an incomplete domain model D̃ = 〈F,A〉 with F = {p1, p2, p3} and A = {a1, a2} and a solution plan π = (a1, a2) for the problem P̃ = 〈D̃, I = {p2}, G = {p3}〉. The incomplete model is: Pre(a1) = ∅, P̃ re(a1) = {p1}, Add(a1) = {p2, p3}, Ãdd(a1) = ∅, Del(a1) = ∅, D̃el(a1) = ∅; Pre(a2) = {p2}, P̃ re(a2) = ∅, Add(a2) = ∅, Ãdd(a2) = {p3}, Del(a2) = ∅, D̃el(a2) = {p1}. Given that the total number of possible preconditions and effects is 3, the total number of completions (|〈〈D̃〉〉|) is 23 = 8, for each of which the plan π may succeed or fail to achieve G, as shown in the table. The robustness value of the plan is R(π) = 34 if Pr(Di) is the uniform distribution. However, if the domain writer thinks that p1 is very likely to be a precondition of a1 and provides wprea1 (p1) = 0.9, the robustness of π decreases to R(π) = 2× (0.9×0.5×0.5)+4× (0.1×0.5×0.5) = 0.55 (as intutively, the last four models with which π succeeds are very unlikely to be the real one). Note that under the STRIPS model where action failure causes plan failure, the plan π would considered failing to achieve G in the first two complete models, since a2 is prevented from execution."
    }, {
      "heading" : "4.1 A Spectrum of Robust Planning Problems",
      "text" : "Given this set up, we can now talk about a spectrum of problems related to planning under incomplete domain models:\nRobustness Assessment (RA): Given a plan π for the problem P̃ , assess the robustness of π.\nMaximally Robust Plan Generation (RG∗): Given a problem P̃ , generate the maximally robust plan π∗.\nGenerating Plan with Desired Level of Robustness (RGρ): Given a problem P̃ and a robustness threshold ρ (0 < ρ ≤ 1), generate a plan π with robustness greater than or equal to ρ.\nCost-sensitive Robust Plan Generation (RG∗c): Given a problem P̃ and a cost bound c, generate a plan π of maximal robustness subject to cost bound c (where the cost of a plan π is defined as the cumulative costs of the actions in π).\nIncremental Robustification (RIc): Given a plan π for the problem P̃ , improve the robustness of π, subject to a cost budget c.\nThe problem of assessing robustness of plans, RA, can be tackled by compiling it into a weighted model-counting problem. For plan synthesis problems, we can talk about either generating a maximally robust plan, RG∗, or finding a plan with a robustness value above the given threshold, RGρ. A related issue is that of the interaction between plan cost and robustness. Often, increasing robustness involves using additional (or costlier) actions to support the desired goals, and thus comes at the expense of increased plan cost. We can also talk about cost-constrained robust plan generation problem RG∗c . Finally, in practice, we are often interested in increasing the robustness of a given plan (either during iterative search, or during mixed-initiative planning). We thus also have the incremental variant RIc.\nIn this paper, we will focus on RGρ, the problem of synthesizing plan with at least a robustness value of ρ."
    }, {
      "heading" : "5. Compilation to Conformant Probabilistic Planning",
      "text" : "In this section, we will show that the problem of generating plan with at least ρ robustness, RGρ, can be compiled into an equivalent conformant probabilistic planning problem. The most robust plan can then be found with a sequence of increasing threshold values."
    }, {
      "heading" : "5.1 Conformant Probabilistic Planning",
      "text" : "Following the formalism in (Domshlak and Hoffmann 2007), a domain in conformant probabilistic planning (CPP) is a tuple D′ = 〈F ′, A′〉, where F ′ and A′ are the sets of propositions and probabilistic actions, respectively. A belief state b : 2F ′\n→ [0, 1] is a distribution of states s ⊆ F ′ (we denote s ∈ b if b(s) > 0). Each action a′ ∈ A′ is specified by a set of preconditions Pre(a′) ⊆ F ′ and conditional effects E(a′). For each e = (cons(e),O(e)) ∈ E(a′), cons(e) ⊆ F ′ is the condition set and O(e) determines the set of outcomes ε = (Pr(ε), add(ε), del(ε)) that will add and delete proposition sets add(ε), del(ε) into and from the resulting state with the probability Pr(ε) (0 ≤ Pr(ε) ≤ 1 , ∑\nε∈O(e) Pr(ε) = 1). All condition sets of the effects in E(a′) are assumed to be mutually exclusive and exhaustive. The action a′ is applicable in a belief state b if Pre(a′) ⊆ s\nfor all s ∈ b, and the probability of a state s′ in the resulting belief state is ba′(s′) = ∑ s⊇Pre(a′) b(s) ∑ ε∈O′(e) Pr(ε), where e ∈ E(a′) is the conditional effect such that cons(e) ⊆ s, and O′(e) ⊆ O(e) is the set of outcomes ε such that s′ = s ∪ add(ε) \\ del(ε).\nGiven the domain D′, a problem P ′ is a quadruple P ′ = 〈D′, bI , G′, ρ′〉, where bI is an initial belief state, G′ is a set of goal propositions and ρ′ is the acceptable goal satisfaction probability. A sequence of actions π′ = (a′1, ..., a ′ n) is a solution plan for P ′ if a′i is applicable in the belief state bi (assuming b1 ≡ bI ), which results in bi+1 (1 ≤ i ≤ n), and it achieves all goal propositions with at least ρ′ probability."
    }, {
      "heading" : "5.2 Compilation",
      "text" : "Given an incomplete domain model D̃ = 〈F,A〉 and a planning problem P̃ = 〈D̃, I, G〉, we now describe a compilation that translates the problem of synthesizing a solution plan π for P̃ such that R(π, P̃) ≥ ρ to a CPP problem P ′. At a high level, the realization of possible preconditions p ∈ P̃ re(a) and effects q ∈ Ãdd(a), r ∈ D̃el(a) of an action a ∈ A can be understood as being determined by the truth values of hidden propositions pprea , q add a and rdela that are certain (i.e. unchanged in any world state) but unknown. Specifically, the applicability of the action in a state s ⊆ F depends on possible preconditions p that are realized (i.e. pprea = T), and their truth values in s. Similarly, the values of q and r are affected by a in the resulting state only if they are realized as add and delete effects of the action (i.e., qadda = T, r del a = T). There are totally 2|P̃ re(a)|+|Ãdd(a)|+|D̃el(a)| realizations of the action a, and all of them should be considered simultaneously in checking the applicability of the action and in defining corresponding resulting states.\nWith those observations, we use multiple conditional effects to compile away incomplete knowledge on preconditions and effects of the action a. Each conditional effect corresponds to one realization of the action, and can be fired only if p = T whenever pprea = T, and adding (removing) an effect q (r) into (from) the resulting state depending on the values of qadda (r del a , respectively) in the realization.\nWhile the partial knowledge can be removed, the hidden propositions introduce uncertainty into the initial state, and therefore making it a belief state. Since the action a may be applicable in some but rarely all states of a belief state, certain preconditions Pre(a) should be modeled as conditions of all conditional effects. We are now ready to formally specify the resulting domain D′ and problem P ′.\nFor each action a ∈ A, we introduce new propositions pprea , q add a , r del a and their negations np pre a , nq add a , nr del a for each p ∈ P̃ re(a), q ∈ Ãdd(a) and r ∈ D̃el(a) to determine whether they are realized as preconditions and effects of a in the real domain.2 Let Fnew be the set of those new propositions, then F ′ = F ∪ Fnew is the proposition set of D′.\n2These propositions are introduced once, and re-used for all actions sharing the same schema with a.\nEach action a′ ∈ A′ is made from one action a ∈ A such that Pre(a′) = ∅, and E(a′) consists of\n2|P̃ re(a)|+|Ãdd(a)|+|D̃el(a)| conditional effects e. For each conditional effect e:\n• cons(e) is the union of the following sets:\n– the certain preconditions Pre(a), – the set of possible preconditions of a that are realized,\nand hidden propositions representing their realization: Pre(a) ∪ {pprea |p ∈ Pre(a)} ∪ {np pre a |p ∈ P̃ re(a) \\\nPre(a)}, – the set of hidden propositions corresponding to the real-\nization of possible add (delete) effects of a: {qadda |q ∈ Add(a)} ∪ {nqadda |q ∈ Ãdd(a) \\ Add(a)} ({r del a |r ∈ Del(a)}∪{nrdela |r ∈ D̃el(a)\\Del(a)}, respectively);\n• the single outcome ε of e is defined as add(ε) = Add(a)∪ Add(a), del(ε) = Del(a) ∪Del(a), and Pr(ε) = 1,\nwhere Pre(a) ⊆ P̃ re(a), Add(a) ⊆ Ãdd(a) and Del(a) ⊆ D̃el(a) represent the sets of realized preconditions and effects of the action. In other words, we create a conditional effect for each subset of the union of the possible precondition and effect sets of the action a. Note that the inclusion of new propositions derived fromPre(a), Add(a), Del(a) and their “complement” sets P̃ re(a)\\Pre(a), Ãdd(a)\\Add(a), D̃el(a) \\ Del(a) makes all condition sets of the action a′ mutually exclusive. As for other cases (including those in which some precondition in Pre(a) is excluded), the action has no effect on the resulting state, they can be ignored. The condition sets, therefore, are also exhaustive.\nThe initial belief state bI consists of 2|Fnew| states s′ ⊆ F ′ such that p ∈ s′ iff p ∈ I (∀p ∈ F ), each represents a complete domain model Di ∈ 〈〈D̃〉〉 and with the probability Pr(Di). The goal is G′ = G, and the acceptable goal satisfaction probability is ρ′ = ρ.\nTheorem 1. Given a plan π = (a1, ..., an) for the problem P̃ , and π′ = (a′1, ..., a ′ n) where a ′ k is the compiled version of ak (1 ≤ k ≤ n) in P ′. Then R(π, P̃) ≥ ρ iff π′ achieves all goals with at least ρ probability in P ′.\nProof (sketch). According to the compilation, there is oneto-one mapping between each complete model Di ∈ 〈〈D̃〉〉 in P̃ and a (complete) state s′i0 ∈ bI in P\n′. Moreover, if Di has a probability of Pr(Di) to be the real model, then s′i0 also has a probability of Pr(Di) in the belief state bI of P ′.\nGiven our projection over complete model Di, executing π from the state I with respect to Di results in a sequence of complete state (si1, ..., si(n+1)). On the other hand, executing π′ from {s′i0} in P\n′ results in a sequence of belief states ({s′i1}, ..., {s ′ i(n+1)}). With the note that p ∈ s ′ i0 iff p ∈ I (∀p ∈ F ), by induction it can be shown that p ∈ s′ij iff p ∈ sij (∀j ∈ {1, ..., n + 1}, p ∈ F ). Therefore, si(n+1) |= G iff s′i(n+1) |= G = G\n′. Since all actions a′i are deterministic and s ′ i0 has a probability of Pr(Di) in the belief state bI of P ′, the probability\npick−up and their nega-\ntions can be interpreted as whether the action requires light balls and makes balls dirty. Newly introduced and relevant propositions are marked in bold.\nthat π′ achieves G′ is ∑\ns′ i(n+1)\n|=GPr(Di), which is equal\nto R(π, P̃) as defined in Equation 2. This proves the theorem.\nExample: Consider the action pick-up(?b - ball,?r - room) in the Gripper domain as described above. In addition to the possible precondition (light ?b) on the weight of the ball ?b, we also assume that since the modeler is unsure if the gripper has been cleaned or not, she models it with a possible add effect (dirty ?b) indicating that the action might make the ball dirty. Figure 2 shows both the original and the compiled specification of the action."
    }, {
      "heading" : "6. Experimental Results",
      "text" : "We tested the compilation with Probabilistic-FF (PFF), a state-of-the-art planner, on a range of domains in the International Planning Competition.We first discuss the results on the variants of the Logistics and Satellite domains, where domain incompleteness is deliberately modeled on the preconditions and effects of actions (respectively). Our purpose here is to observe how generated plans are robustified to satisfy a given robustness threshold, and how the amount of incompleteness in the domains affects the plan generation phase. We then describe the second experimental setting\nin which we randomly introduce incompleteness into IPC domains, and discuss the feasibility of our approach in this setting.3\nDomains with deliberate incompleteness Logistics: In this domain, each of the two cities C1 and C2 has an airport and a downtown area. The transportation between the two distant cities can only be done by two airplanes A1 and A2. In the downtown area of Ci (i ∈ {1, 2}), there are three heavy containersPi1, ..., Pi3 that can be moved to the airport by a truck Ti. Loading those containers onto the truck in the city Ci, however, requires moving a team of m robots Ri1, ..., Rim (m ≥ 1), initially located in the airport, to the downtown area. The source of incompleteness in this domain comes from the assumption that each pair of robots R1j and R2j (1 ≤ j ≤ m) are made by the same manufacturer Mj , both therefore might fail to load a heavy container.4 The actions loading containers onto trucks using robots made by a particular manufacturer (e.g., the action schema load-truck-with-robots-of-M1 using robots of manufacturerM1), therefore, have a possible precondition requiring that containers should not be heavy. To simplify discussion (see below), we assume that robots of different manufacturers may fail to load heavy containers, though independently, with the same probability of 0.7. The goal is to transport all three containers in the city C1 to C2, and vice versa. For this domain, a plan to ship a container to another city involves a step of loading it onto the truck, which can be done by a robot (after moving it from the airport to the downtown). Plans can be made more robust by using additional robots of different manufacturer after moving them into the downtown areas, with the cost of increasing plan length. Satellite: In this domain, there are two satellites S1 and S2 orbiting the planet Earth, on each of which there are m instruments Li1, ..., Lim (i ∈ {1, 2}, m ≥ 1) used to take images of interested modes at some direction in the space. For each j ∈ {1, ...,m}, the lenses of instruments Lij’s were made from a type of material Mj , which might have an error affecting the quality of images that they take. If the material Mj actually has error, all instruments Lij’s produce mangled images. The knowledge of this incompleteness is modeled as a possible add effect of the action taking images using instruments made from Mj (for instance, the action schema take-image-with-instruments-M1 using instruments of type M1) with a probability of pj , asserting that images taken might be in a bad condition. A typical plan to take an image using an instrument, e.g. L14 of type M4 on the satellite S1, is first to switch on L14, turning the satellite S1 to a ground direction from which L14 can be calibrated, and then taking image. Plans can be made more robust by using additional instruments, which might be on a different satel-\n3The experiments were conducted using an Intel Core2 Duo 3.16GHz machine with 4Gb of RAM, and the time limit is 15 minutes.\n4The uncorrelated incompleteness assumption applies for possible preconditions of action schemas specified for different manufacturers. It should not be confused here that robots R1j and R2j of the same manufacturer Mj can independently have fault.\nlite, but should be of different type of materials and can also take an image of the interested mode at the same direction.\nTable 1 and 2 shows respectively the results in the Logistics and Satellite domains with ρ ∈ {0.1, 0.2, ..., 0.9} and m = {1, 2, ..., 5}. The number of complete domain models in the two domains is 2m. For Satellite domain, the probabilities pj’s range from 0.25, 0.3,... to 0.45 when m increases from 1, 2, ... to 5. For each specific value of ρ and m, we report l/t where l is the length of plan and t is the running time (in seconds). Cases in which no plan is found within the time limit are denoted by “–”, and those where it is provable that no plan with the desired robustness exists are denoted by “⊥”.\nObservations on fixed value of m: In both domains, for a fixed value of m we observe that the solution plans tend to be longer with higher robustness threshold ρ, and the time to synthesize plans is also larger. For instance, in Logistics with m = 5, the plan returned has 48 actions if ρ = 0.3, whereas 66-length plan is needed if ρ increases to 0.4. Since loading containers using the same robot multiple times does not increase the chance of success, more robots of different manufacturers need to move into the downtown area for loading containers, which causes an increase in plan length. In the Satellite domain with m = 3, similarly, the returned plan has 37 actions when ρ = 0.5, but requires 53 actions if ρ = 0.6—more actions need to calibrate an instrument of different material types in order to increase the chance of having a good image of interested mode at the same direction.\nSince the cost of actions is currently ignored in the compilation approach, we also observe that more than the needed number of actions have been used in many solution plans. In\nthe Logistics domain, specifically, it is easy to see that the probability of successfully loading a container onto a truck using robots of k (1 ≤ k ≤ m) different manufacturers is (1− 0.7k). As an example, however, robots of all five manufacturers are used in a plan when ρ = 0.4, whereas using those of three manufacturers is enough.\nObservations on fixed value of ρ: In both domains, we observe that the maximal robustness value of plans that can be returned increases with higher number of manufacturers (though the higher the value of m is, the higher number of complete models is). For instance, when m = 2 there is not any plan returned with at least ρ = 0.6 in the Logistics domain, and with ρ = 0.4 in the Satellite domain. Intuitively, more robots of different manufacturers offer higher probability of successfully loading a container in the Logistics domain (and similarly for instruments of different materials in the Satellite domain).\nFinally, it may take longer time to synthesize plans with the same length when m is higher—in other words, the increasing amount of incompleteness of the domain makes the plan generation phase harder. As an example, in the Satellite domain, with ρ = 0.6 it takes 216.7 seconds to synthesize a 37-length plan when there are m = 5 possible add effects at the schema level of the domain, whereas the search time is only 94.1 seconds when m = 4. With ρ = 0.7, no plan is found within the time limit when m = 5, although a plan with robustness of 0.7075 exists in the solution space. It is the increase of the branching factors and the time spent on satisfiability test and weighted model-counting used inside the planner that affect the search efficiency.\nDomains with random incompleteness We built a program to generate an incomplete domain model from a deterministic one by introducingM new propositions into each domain (all are initially T). Some of those new propositions were randomly added into the sets of possible preconditions/effects of actions. Some of them were also randomly made certain add/delete effects of actions. With this strategy, each solution plan in an original deterministic domain is also a valid plan, as defined earlier, in the corresponding incomplete domain. Our experiments with the Depots, Driverlog, Satellite and ZenoTravel domains indicate that because the annotations are random, there are often fewer opportunities for the PFF planner to increase the robustness of a plan prefix during the search. This makes it hard to generate plans with a desired level of robustness under given time constraint.\nIn summary, our experiments on the two settings above suggest that the compilation approach based on the PFF planner would be a reasonable method for generating robust plans in domains and problems where there are chances for robustifying existing action sequences in the search space."
    }, {
      "heading" : "7. Conclusion and Future Work",
      "text" : "In this paper, we motivated the need for synthesizing robust plans under incomplete domain models. We introduced annotations for expressing domain incompleteness, formalized the notion of plan robustness, and showed an approach to compile the problem of generating robust plans into confor-\nmant probabilistic planning. We presented empirical results showing the promise of our approach. For future work, we are developing a planning approach that directly takes the incompleteness annotations into account during the search, and compare it with our current compilation method. We also plan to consider the problem of robustifying a given plan subject to a provided cost bound.\nAcknowledgement: This research is supported in part by ONR grants N00014-09-1-0017 and N00014-07-1-1049, the NSF grant IIS-0905672, and by DARPA and the U.S. Army Research Laboratory under contract W911NF-11-C-0037. The content of the information does not necessarily reflect the position or the policy of the Government, and no official endorsement should be inferred. We thank William Cushing for several helpful discussions."
    } ],
    "references" : [ {
      "title" : "Sequential monte carlo in probabilistic planning reachability heuristics",
      "author" : [ "Kambhampati Bryce", "D. Smith 2006] Bryce", "S. Kambhampati", "D. Smith" ],
      "venue" : "Proceedings of ICAPS06",
      "citeRegEx" : "Bryce et al\\.,? \\Q2006\\E",
      "shortCiteRegEx" : "Bryce et al\\.",
      "year" : 2006
    }, {
      "title" : "Probabilistic planning via heuristic forward search and weighted model counting",
      "author" : [ "Domshlak", "C. Hoffmann 2007] Domshlak", "J. Hoffmann" ],
      "venue" : null,
      "citeRegEx" : "Domshlak et al\\.,? \\Q2007\\E",
      "shortCiteRegEx" : "Domshlak et al\\.",
      "year" : 2007
    }, {
      "title" : "Exploration of the robustness of plans",
      "author" : [ "Howey Fox", "M. Long 2006] Fox", "R. Howey", "D. Long" ],
      "venue" : null,
      "citeRegEx" : "Fox et al\\.,? \\Q2006\\E",
      "shortCiteRegEx" : "Fox et al\\.",
      "year" : 2006
    }, {
      "title" : "Plan evaluation with incomplete action descriptions",
      "author" : [ "Garland", "A. Lesh 2002] Garland", "N. Lesh" ],
      "venue" : null,
      "citeRegEx" : "Garland et al\\.,? \\Q2002\\E",
      "shortCiteRegEx" : "Garland et al\\.",
      "year" : 2002
    }, {
      "title" : "Conformant probabilistic planning via CSPs",
      "author" : [ "Hyafil", "N. Bacchus 2003] Hyafil", "F. Bacchus" ],
      "venue" : "In Proceedings of the Thirteenth International Conference on Automated Planning and Scheduling,",
      "citeRegEx" : "Hyafil et al\\.,? \\Q2003\\E",
      "shortCiteRegEx" : "Hyafil et al\\.",
      "year" : 2003
    }, {
      "title" : "Fault tolerant planning: Toward probabilistic uncertainty models in symbolic non-deterministic planning",
      "author" : [ "Veloso Jensen", "R. Bryant 2004] Jensen", "M. Veloso", "R. Bryant" ],
      "venue" : "In ICAPS",
      "citeRegEx" : "Jensen et al\\.,? \\Q2004\\E",
      "shortCiteRegEx" : "Jensen et al\\.",
      "year" : 2004
    }, {
      "title" : "An algorithm for probabilistic planning",
      "author" : [ "Hanks Kushmerick", "N. Weld 1995] Kushmerick", "S. Hanks", "D. Weld" ],
      "venue" : "Artificial Intelligence",
      "citeRegEx" : "Kushmerick et al\\.,? \\Q1995\\E",
      "shortCiteRegEx" : "Kushmerick et al\\.",
      "year" : 1995
    }, {
      "title" : "Reachability heuristics for planning in incomplete domains. In ICAPS’09 Workshop on Heuristics for Domain Independent Planning",
      "author" : [ "Robertson", "J. Bryce 2009] Robertson", "D. Bryce" ],
      "venue" : null,
      "citeRegEx" : "Robertson et al\\.,? \\Q2009\\E",
      "shortCiteRegEx" : "Robertson et al\\.",
      "year" : 2009
    } ],
    "referenceMentions" : [ ],
    "year" : 2011,
    "abstractText" : "Most current planners assume complete domain models and focus on generating correct plans. Unfortunately, domain modeling is a laborious and error-prone task. While domain experts cannot guarantee completeness, often they are able to circumscribe the incompleteness of the model by providing annotations as to which parts of the domain model may be incomplete. In such cases, the goal should be to generate plans that are robust with respect to any known incompleteness of the domain. In this paper, we first introduce annotations expressing the knowledge of the domain incompleteness, and formalize the notion of plan robustness with respect to an incomplete domain model. We then propose an approach to compiling the problem of finding robust plans to the conformant probabilistic planning problem. We present experimental results with Probabilistic-FF, a state-ofthe-art planner, showing the promise of our approach.",
    "creator" : "LaTeX with hyperref package"
  }
}