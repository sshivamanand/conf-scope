{
  "name" : "1204.4294.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : null,
    "authors" : [ ],
    "emails" : [ "brijnesh.jain@gmail.com" ],
    "sections" : [ {
      "heading" : null,
      "text" : "ar X\niv :1\n20 4.\n42 94\nv1 [\ncs .L\nG ]\n1 9\nA pr\n2 01\n2\nLearning in Riemannian Orbifolds\nBrijnesh J. Jain and Klaus Obermayer\nTechnische Universität Berlin\nBerlin, Germany\ne-mail: brijnesh.jain@gmail.com\nLearning in Riemannian orbifolds is motivated by existing machine learning algorithms that directly operate on finite combinatorial structures such as point patterns, trees, and graphs. These methods, however, lack statistical justification. This contribution derives consistency results for learning problems in structured domains and thereby generalizes learning in vector spaces and manifolds."
    }, {
      "heading" : "1 Introduction",
      "text" : "Statistical data analysis and learning in Riemannian orbifolds is motivated by applications, where the data we want to learn on are naturally represented by finite combinatorial structures such as point patterns, trees, and graphs. Examples from structural pattern recognition that learn on structured data include estimating central points of a distribution on graphs such as the mean and median [9, 16, 15, 21], central clustering of graphs [10, 12, 13, 14, 19, 15, 23], learning graph quantization [17], and multilayer perceptrons for graphs [20]. In retrospect, the structure space framework proposed by [18] theoretically justifies the above approaches in the sense that they actually minimize an empirical risk function on structures. Since minimizing an empirical risk function is usually computationally intractable, the ultimate challenge consists in constructing efficient algorithms which are capable to return optimal or at least suboptimal solutions.\nFrom the point of view of statistical pattern recognition, however, the ultimate goal is not to determine a good solution of an empirical risk function, but rather to discover the true but unknown structure of the data with respect to its distribution. According to this perspective, we may regard the solutions of empirical risk functions as estimators of the true but unknown population parameter. One gap between statistical and structural pattern recognition is the lack of consistency results of existing estimators for the population parameters. As a consequence most methods from structural pattern recognition that directly operate in the domain of graphs still have no statistical justification.\nThe first contribution of this paper establishes sufficient conditions for consistency of estimators defined by empirical risk functions on attributed graphs. For this we regard graphs as points of some structure space [18]. A structure space is the quotient of a Euclidean space by some permutation group. The benefit of the structure space framework is that it provides enough mathematical structure for doing differential geometry and at the same time preserves the full relational information of the graphs. In comparison to [18], the innovations are as follows: First, we extend the more suitable concept of generalized differentiability in the sense of Norkin [22] to functions on graphs. Second, we prove the stronger result that the underlying empirical risk functions on graphs are generalized differentiable rather than locally Lipschitz. Third, equipped with these results, we apply a consistency theorem by Ermoliev and Norkin [8] for generalized differentiable loss functions. Finally, using some examples, we show that standard methods from statistical pattern recognition can be generalized to consistent learning algorithms on graphs.\nThe second contribution shifts the terminology from structure spaces to the more general notion of orbifold. Informally, orbifolds are topological spaces locally modeled on quotients of manifolds by finite group actions. As such, structure spaces are the simplest examples of Riemannian orbifolds. Shifting the focus to orbifolds provides a new view on the problem with the following benefits: First, the notion of orbifold more strongly emphasizes the way we exploit differential geometric tools for graphs, namely via charting and lifting as in Riemannian geometry. Second, using the notion of orbifold integrates the structure space framework into an established mathematical field providing access to useful concepts, results, and insights. Third, the notion of orbifold indicates how the theory can be generalized to structures that locally live in a quotient of a manifold by some finite group action. Fourth, since orbifolds generalize Euclidean spaces and manifolds, this framework not only establishes consistency for stochastic generalized gradient learning but also for standard stochastic gradient learning in Euclidean spaces (see [4]) under the unifying umbrella of learning on Riemannian orbifolds."
    }, {
      "heading" : "2 The Problem of Learning on Graphs",
      "text" : "This section aims at outlining the problem of learning on structured data in order to motivate learning in Riemannian orbifolds. As an illustrative example, we consider the problem of estimating the mean of a distribution on attributed graphs.\nAttributed Graphs. We begin with describing the structures we want to learn on. Let A be a set of attributes and let ε ∈ A be a distinguished element denoting the null or void element. An attributed graph is a tuple X = (V, α) consisting of a finite nonempty set V of vertices and an attribute function α : V × V → A. Elements of the set E = {(i, j) ∈ V × V : i 6= j and α(i, j) 6= ε} are the edges of X. By GA we denote the set of all attributed graphs with attributes from A. The vertex set of an attributed graph X is often referred to as VX and its attribute function as αX .\nAlignments. Alignments serve to compare the common structure of two given graphs. An alignment of a graph X is a graph X ′ with VX ⊆ VX′ and\nαX′(i, j) =\n{\nαX(i, j) (i, j) ∈ VX × VX ε otherwise ∀ i, j ∈ VX′ .\nThus, we obtain an alignment of X by adding isolated vertices with null-attribute. The set V εX′ = VX′\\VX is the set of aligned vertices. By A(X) we denote the infinite set of all alignments of X. A pairwise alignment of graphs X and Y is a triple (φ,X ′, Y ′) consisting of alignments X ′ ∈ A(X) and Y ′ ∈ A(Y ) together with a bijective mapping\nφ : VX′ → VY ′ , i 7→ i φ.\nA pairwise alignment (φ,X ′, Y ′) is minimal if φ does not map aligned vertices onto each other, that is φ (\nV εX′ )\n⊆ VY . By A(X,Y ) we denote the set of all minimal pairwise alignments between X and Y . Note that A(X,Y ) is finite due to the minimality condition. Sometimes we briefly write φ instead of (φ,X ′, Y ′).\nGraph Edit Distance. Dissimilarity is a fundamental concept in machine learning. Here, we consider the graph edit distance, which is a common choice for measuring structural variation of two given graphs. Several distance measures reported in the structural pattern recognition literature can be derived as special cases of the graph edit distance function. Examples are geometric graph distance functions [11] and distances based on the maximum common subgraph including graph and subgraph isomorphism [5].\nTo define the graph edit distance, we regard each minimal pairwise alignment (φ,X ′, Y ′) ∈ A(X,Y ) as an edit path with edit cost\ndφ ( X ′, Y ′ ) = ∑\ni,j∈V X′\ndA\n(\nαX′(i, j), αY ′(i φ, jφ)\n)\n,\nwhere dA : A × A → R+ is a distance function defined on the set A of attributes. The edit cost dφ can be decomposed into deletion cost dA(a, ε), insertion cost dA(ε, a\n′), and substitution cost dA(a, a\n′) of vertices and edges, where a, a′ ∈ A \\ {ε} are non-null attributes. Since dA is a distance function, we have dA(ε, ε) = 0. This can only occur for pairs of non-edges by definition of minimal pairwise alignments and therefore can safely be ignored. Observe that deletion (insertion) of vertices also deletes (inserts) all edges the respective vertices are incident to. The graph edit distance of X and Y is then defined as the edit path with minimal cost\nd(X,Y ) = min { dφ ( X ′, Y ′ ) : (φ,X ′, Y ′) ∈ A(X,Y ) } .\nThe Problem of Learning. Let (GA, d) be a graph distance space. As an illustrative example, consider the expected risk\nR(W ) = 1\n2\n∫\nGA\nd(X,W )2 dPGA(X),\nwhere W ∈ W ⊆ GA is the optimization variable and X ∈ GA is a random variable with probability distribution PGA . Since the distribution on the set GA of graphs is usually unknown, the goal of learning is to minimize the risk R(W ) on the basis of empirical data.\nTo point out the problems of learning in the domain of graphs, we consider the counterpart of minimizing the risk R(W ) in a Euclidean vector space X . The goal is to minimize the expected risk\nR(w) = 1\n2\n∫\nX\n‖x−w‖2 dPX (x),\nbased on independent and identically distributed random points x1, . . . ,xN ∈ X , where PX is a probability measure on X . Since the loss function ‖x−w‖\n2 is continuously differentiable, the interchange of integral and gradient is valid, that is\n∇R(w) = −\n∫\nX\n(x−w)dPX (x).\nWe can minimize the risk R(w) using the following stochastic gradient method\nwt+1 = wt + 1\nt+ 1 (xt −wt),\nwhere w1 = x1 and t ≥ 1. The elements wt of the sequence (wt)t≥0 are sample means\nwt = 1\nt\nt ∑\ni=1\nxt.\nIt is well-known that the sample mean is a consistent estimator of the population mean µ, which in turn is the unique global minimizer of the expected risk R(w).\nAfter this short digression in vector spaces, let us return to the problem of minimizing the expected risk R(W ) in graph spaces. As opposed to vector spaces, the following factors complicate learning on graphs in a statistically consistent way: (i) the graph edit distance d(X,Y ) is in general not-differentiable; and (ii) neither a well-defined addition on graphs nor the notion of derivative for functions on graphs is known.\nWe therefore address the following questions: (i) How can we extend gradient-based learning problems from Euclidean spaces to GA? (ii) How can we minimize the expected risk of a learning problem with structured input- and/or output-space GA in a statistically consistent way?\nThe ansatz to answer both questions is to identify graphs as points of a Riemannian orbifold and to extend the concept of generalized differentiability in the sense of Norkin [22] in order to apply methods from stochastic optimization for non-differentiable and non-convex loss functions."
    }, {
      "heading" : "3 Riemannian Orbifolds",
      "text" : "This section introduces Riemannian orbifolds. To keep the treatment technically as uncluttered as possible, we assume that X = Rn is the n-dimensional Euclidean space, and\nΓ is a permutation group acting on X . In doing so, we can refer to [18] for proofs of statements and claims made in this section. In a more general setting, however, X can also be a Riemannian manifold. In this case, we refer to [3] for more details."
    }, {
      "heading" : "3.1 Riemannian Orbifolds",
      "text" : "The binary operation\n· : Γ× X → X , (γ,x) 7→ γ(x)\nis a group action of Γ on X . For x ∈ X , the orbit of x is the set defined by [x] = {γ(x) : γ ∈ Γ}. The quotient set XΓ = X/Γ = {[x] : x ∈ X} consisting of all all orbits carries the structure of a Riemannian orbifold. Its orbifold chart is the surjective continuous mapping\nπ : X → XΓ, x 7→ [x]\nthat projects each point x to its orbit [x]. With Γ = {id} being the trivial permutation group, X is also an orbifold. Hence, orbifolds generalize the notion of Euclidean space and manifold.\nIn the following, an orbifold is a triple Q = (X ,Γ, π) consisting of a Euclidean space X , a permutation group Γ acting on X and its orbifold chart π. We call the elements of XΓ structures, since they represent combinatorial structures such as graphs. We use capital letters X,Y,Z, . . . to denote structures from XΓ and write x ∈ X if π(x) = X. Each vector x ∈ X is a vector representation of structure X and the set X of all vector representation is the representation space of XΓ."
    }, {
      "heading" : "3.2 The Riemannian Orbifold of Graphs",
      "text" : "Riemannian orbifolds of attributed graphs arise by considering equivalence classes of matrices representing the same graph. To identify graphs with points from some orbifold, some technical assumptions to simplify the mathematical treatment are necessary. For this, let (GA, d) be a graph distance space with graph edit distance d(·|·). Then we make the following assumptions:\nA1. There is a feature map Φ : A → H of the attributes into some finite dimensional Euclidean feature space H and a distance function dH : H ×H → R+ such that Φ(ε) = 0 ∈ H and\ndA(a, a ′) = dH(Φ(a),Φ(a ′)) ∀ a, a′ ∈ A.\nA2. All graphs are finite of bounded order n, where n is a sufficiently large number. A graph X of order less than n, say m < n, is aligned to graph X ′ of order n by inserting p = n−m isolated vertices with null attribute ε.\nLet us consider the above assumptions in more detail. Both conditions do not effect the graph edit distance, provided an appropriate feature map for the attributes can be found. Restricting to finite dimensional Euclidean feature spaces H is necessary for deriving consistency results and for applying methods from stochastic optimization. Limiting the maximum size of the graphs to some arbitrarily large number n and aligning smaller graphs to graphs of oder n are purely technical assumptions to simplify mathematics.\nFor machine learning problems, this limitation should have no practical impact, because neither the bound n needs to be specified explicitly nor an extension of all graphs to an identical order needs to be performed. When applying the theory, all we actually require is that the order of the graphs is bounded.\nWith both assumptions in mind, we construct the Riemannian orbifold of attributed graphs. Let X = Hn×n be the set of all (n×n)-matrices with elements from feature space H. A graph X is completely specified by a representation matrix X = (xij) from X with elements\nxij =\n{\nφ (αX(i, j)) i = j or (i, j) ∈ E\n0 otherwise\nfor all i, j ∈ VX . The form of a representation matrix X of X is generally not unique and depends on how the vertices are arranged in the diagonal of X.\nNow suppose that Πn be the set of all (n× n)-permutation matrices. For each P ∈ Πn\nwe define a mapping\nγP : X → X , X 7→ P TXP .\nThen Γ = {γP : P ∈ Π n} is a permutation group acting on X . Regarding an arbitrary matrix X as a representation of some graph X, then the orbit [X] consists of all possible matrices that can represent X. By identifying the orbits of XΓ with attributed graphs, the set GA of attributed graphs of bounded order n is a Riemannian orbifold."
    }, {
      "heading" : "3.3 Metric Structures",
      "text" : "Let Q = (X ,Γ, π) be an orbifold. We derive an intrinsic metric that enables us to do Riemannian geometry. Note that in the case of graph orbifolds, the intrinsic metric is a special graph edit distance based on a generalization of the concept of maximum common subgraph. This graph metric occurs in various different guises as a common choice of proximity measure [1, 6, 7, 11, 24, 25].\nAny inner product 〈·, ·〉 on X gives rise to a maximizer k : XΓ × XΓ → R of the form\nk(X,Y ) = max {〈x,y〉 : x ∈ X,y ∈ Y } .\nWe call the kernel function k(·|·) optimal alignment kernel, induced by 〈·, ·〉. Note that the maximizer of a set of positive definite kernels is an indefinite kernel in general. Since Γ is a group, we find that\nk(X,Y ) = max {〈x,y〉 : x ∈ X},\nwhere y is an arbitrary but fixed vector representation of Y .\nExample 3.1 Suppose that X and Y are attributed graphs where edges have attribute 1 and vertices have attribute 0. The optimal alignment kernel k (X,Y ) induced by the standard inner product of X is the number of edges of a maximum common subgraph of X and Y .\nSuppose that X ∈ XΓ. Since k(X,X) = 〈x,x〉 for all x ∈ X, we can define the length of X by\nl(X) = √ k(X,X).\nSince the Cauchy-Schwarz inequality |k(X,Y )| ≤ l(X) · l(Y ) is valid, the geometric interpretation of k(·|·) is that it computes the cosine of a well-defined angle between X and X ′ provided both are normalized.\nLikewise, k(·|·) gives rise to a distance function defined by\nd(X,Y ) = √ l(X)2 − 2k(X,Y ) + l(Y )2.\nFrom the definition of k(·|·) follows that d is a metric. In addition, we have\nd(X,Y ) = min {‖x− y‖ : x ∈ X,y ∈ Y }, (1)\nwhere ‖·‖ denotes the Euclidean norm induced by the inner product 〈·, ·〉 of the Euclidean space X .\nEquation (1) states that d (·|·) is the length of a minimizing geodesic of X and Y and therefore an intrinsic metric, because it coincides with the infimum of the length of all admissible curves from X to Y . In addition, we find that the topology of XΓ induced by the metric d coincides with the quotient topology induced by the topology of the Euclidean space X ."
    }, {
      "heading" : "3.4 Orbifold Mappings",
      "text" : "This section introduces mappings between orbifolds and investigates local analytical concepts of orbifold functions. We assume that Q = (X ,Γ, π) and Q′ = (X ′,Γ′, π′) are orbifolds.\nMappings. An orbifold mapping between Q and Q′ is a mapping f : XΓ → X ′ Γ′ between their underlying spaces. The lift of f is a mapping f̃ : X → X ′ between their representation spaces such that f ◦ π = π′ ◦ f̃ . Since R is an orbifold of the form QR = (R, {id}, idR), we can define an orbifold function between Q and QR as a function f : XΓ → R. The lift of f is a function f̃ : X → R satisfying f̃ = f ◦ π. The lift f̃ is invariant under group actions of Γ, that is f̃(x) = f̃ (γ(x)) for all γ ∈ Γ.\nWe say, an orbifold function f : XΓ → R is continuous (locally Lipschitz, differentiable) at X ∈ XΓ if its lift f̃ is continuous (locally Lipschitz, differentiable) at some vector representation x ∈ X. The definition is independent of the choice of the vector representation that projects to X.\nGradients. Suppose that f : XΓ → R is differentiable at X ∈ XΓ. Then its lift f̃ : X → R is differentiable at all vector representations that project to X. The gradient ∇f(X) of f at X is defined by the projection\n∇f(X) = π(∇f̃(x))\nof the gradient ∇f̃(x) of f̃ at a vector representation x ∈ X. This definition is independent of the choice of the vector representation. We have\n∇f̃(γ(x)) = γ(∇f̃(x))\nfor all γ ∈ Γ. This implies that the gradients of f̃ at x and γ(x) are vector representations of the same structure, namely the gradient ∇f(X) of the orbifold function f at X. Thus, the gradient of f at X is a well-defined structure pointing to the direction of steepest ascent."
    }, {
      "heading" : "4 Generalized Gradients",
      "text" : "This section extends the concept of generalized differentiability in the sense of Norkin [22] to orbifold functions. We begin with introducing generalized differentiable functions. Let X = Rn be a finite-dimensional Euclidean space. A function f : X → R is generalized differentiable at x ∈ X if there is a multi-valued map ∂f : X → 2X in a neighborhood of x such that\n1. ∂f(x) is a convex and compact set;\n2. ∂f(x) is upper semicontinuous at x, that is, if yi → x and gi ∈ ∂f(yi) for each i ∈ N, then each accumulation point g of (gi) is in ∂f(x);\n3. for each y ∈ X and any g ∈ ∂f(y) holds f(y) = f(x)+〈g,y − x〉+o (x,y,g), where the remainder o (x,y,g) satisfies the condition\nlim i→∞\n|o (x,yi,gi)|\n‖yi − x‖ = 0\nfor all sequences yi → y and gi ∈ ∂f (yi).\nWe call f generalized differentiable if it is generalized differentiable at each point x ∈ X . The set ∂f(x) is the subdifferential of f at x and its elements are called generalized gradients.\nGeneralized differentiable functions have the following properties [22]:\n1. Generalized differentiable functions are locally Lipschitz and therefore continuous and differentiable almost everywhere.\n2. Continuously differentiable, convex, and concave functions are generalized differentiable.\n3. Suppose that f1, . . . , fn : X → R are generalized differentiable at x ∈ X . Then\nf∗(x) = min(f1(x), . . . , fm(x)) and f ∗(x) = max(f1(x), . . . , fm(x))\nare generalized differentiable at x ∈ X .\n4. Suppose that f1, . . . , fm : X → R are generalized differentiable functions at x ∈ X and f0 : R m → R is generalized differentiable at y = (f1(x), . . . , fm(x)) ∈ R m. Then\nf(x) = f0(f1(x), . . . , fm(x)) is generalized differentiable at x ∈ X . The subdifferential of f at x is of the form\n∂f(x) = con { g ∈ X : g = [ g1g2 . . . gm ] g0,g0 ∈ ∂f0(y),gi ∈ ∂fi(x), 1 ≤ i ≤ m } .\nwhere [g1g2 . . . gm] is a (N ×m)-matrix.\n5. Suppose that F (x) = Ez [f(x,z)], where f(·,z) is generalized differentiable. Then F is generalized differentiable and its subdifferential at x ∈ X is of the form ∂F (x) = Ez [∂f(x,z)].\nNow suppose that f : XΓ → R is an orbifold function. We say f is generalized differentiable at X ∈ XΓ, if its lift f̃ : X → R is generalized differentiable at all vector representations that project to X. The subdifferential ∂f(X) of f at X is defined by the projection\n∂f(X) = π(∂f̃(x))\nof the subdifferential ∂f̃(x) of f̃ at a vector representation x ∈ X. This definition is independent of the choice of the vector representation. We have\n∂f̃(γ(x)) = γ(∂f̃(x))\nfor all γ ∈ Γ. This implies that the subdifferentials ∂f̃(x) ⊆ X and ∂f̃(γ(x)) ⊆ X are subsets that project to the same subset of XΓ, namely the subdifferential ∂f(X). Proposition 4.1 summarizes and proves the statements.\nProposition 4.1 Let f : XΓ → R be an orbifold function. Suppose that its lift f̃ : X → R is generalized differentiable at a vector representation x that projects to X ∈ XΓ. Then f̃ is generalized differentiable at γ(x) for all γ ∈ Γ and\n∂f̃(γ(x)) = γ ( ∂f̃(x) ) .\nis a subdifferential of f̃ at γ(x) for all γ ∈ Γ.\nProof: Since f̃ is generalized differentiable at x, there is a multi-valued mapping ∂f̃ : Uδ(x) → 2\nX defined on some neighborhood Uδ(x). Let γ ∈ Γ be an arbitrary permutation and x′ = γ(x). Then\n∂f̃ : Uδ(x ′) → 2X , y′ = γ(y) 7→ γ\n( ∂f̃(y) )\nis a multi-valued mapping in a neighborhood of x′. Since γ is a homeomorphic linear map, we find that γ(∂f̃(x)) = ∂f̃(x′) is a convex and compact set. Next we show that f̃ is upper semicontinuous at x′. Suppose that y′i → x ′, g′i ∈ f̃c(y ′ i) for each i ∈ N, and g ′\nis an accumulation point of (g′i)i∈N. Then there is a i0 ∈ N such that y ′ i ∈ Uδ(x ′) for all i ≥ i0. From\nUδ(x ′) = Uδ(γ(x)) = γ (Uδ(x))\nfollows that there are vector representations yi ∈ Uδ(x) with γ(yi) = y ′ i for each i ≥ i0. From continuity of γ−1 follows that yi → x. By construction of ∂f̃ follows that\ng′i ∈ ∂f̃ ( y′i ) = ∂f̃ (γ (yi)) = γ ( ∂f̃ (yi) )\nfor each i ≥ i0. Hence, there are vector representations gi ∈ ∂f̃(yi) with γ(gi) = g ′ i for each i ≥ i0. Since f̃ is upper semicontinuous at x, we find that g ∈ ∂f̃(x). Again by construction of ∂f̃ follows that\ng′ = γ(g) ∈ γ ( ∂f̃(x) ) = ∂f̃ (γ(x)) = ∂f̃(x′).\nThis proves upper semicontinuity of ∂f̃ at all vector representations projecting to X = π(x). Finally, we prove that f̃ satisfies the subderivative property at x′. Suppose that y′,y ∈ X with y′ = γ(y). By Γ-invariance of f̃ , we have f̃(y′) = f̃(y). Since f̃ is generalized differentiable at x, we find a g ∈ ∂f̃(y) such that\nf̃(y′) = f̃(y) = f̃(x) + 〈g,y − x〉+ o(x,y,g)\nwith o(x,y,g) tending faster to zero than ‖y − x‖. Let g′ = γ(g). Exploiting Γ-invariance of f̃ as well as isometry and linearity of γ yields\nf̃(y′) = f̃(γ(x)) + 〈γ(g), γ(y − x)〉+ o(x,y,g)\n= f̃(x′) + 〈 g′,y′ − x′ 〉 + o(x,y,g).\nWe define o′(x′,y′,g′) = o ◦ γ−1(x′,y′,g′) = o(x,y,g) showing that o′ tends faster to zero than ‖y′ − x‖. This proves the subderivative property of f̃ at all vector representations projecting to X = π(x). Putting all results together yields that f̃ is generalized differentiable at γ(x) for all γ ∈ Γ.\nExample 4.1 Let (GA, d) be a graph space, where d is a graph edit distance.We can identify GA with a Riemannian orbifold Q = (X ,Γ, π) and the graph edit distance d (·|·) with a distance function defined on XΓ. Suppose that the edit costs dφ (·|·) of all edit paths are generalized differentiable. Then the distance d (·|·) is generalized differentiable.\nExample 4.2 Let Q be a graph orbifold. Then the optimal assignment kernel k (·|·), the intrinsic metric d (·|·), and the squared metric d (·|·)2 are generalized differentiable."
    }, {
      "heading" : "5 Stochastic Optimization",
      "text" : "We assume that QW = (W,H, ρ) and QZ = (Z,Γ, π) are Riemannian orbifolds and Ω ⊆ WH is some (sufficiently large) bounded convex constraint set. Learning is formulated\nas a stochastic optimization problem of the form\nmin R(W ) = E [L(Z,W )] =\n∫\nZΓ\nL(Z,W )dPΓ(Z) (2)\ns.t. W ∈ Ω, (3)\nwhere R(W ) is the expected risk function, W ∈ Ω is the optimization variable, and Z ∈ ZΓ is a random variable with probability measure PΓ. The loss function L : ZΓ × Ω → R measures the performance of the learning system with parameter W given an observable event Z. We assume that the loss L(Z,W ) is generalized differentiable inW and integrable in Z. The expectation E is taken with respect to some probability space (ZΓ,ΣΓ, PΓ).\nSince the distribution PZ of the observable events Z ∈ Z is usually unknown, the expected risk function R(W ) can neither be computed nor be minimized directly. In addition, the loss function L(W,Z) is neither convex nor differentiable. The field of stochastic approximation provides methods to minimize R(W ) that are consistent under very general conditions.\nSince the interchange of integral and generalized gradient is valid, that is ∂WR(W ) = E [∂WL(Z,W )] under mild assumptions [8, 22], we can minimize the expected risk R(W ) according to the following stochastic generalized gradient (SGG) method:\nWt+1 = ΠΩ (Wt − ηtSt), t ≥ 0,\nwhere W0 ∈ Ω and ΠΩ is a projection operator on Ω. The random structures St are stochastic generalized gradients, i.e. random variables defined on the probability space (ZΓ,ΣΓ, PΓ) ∞ such that\nE [St |W0, . . . ,Wt] ∈ ∂WR (W ) . (4)\nWe can take St = g(Zt,Wt) with iid (Zt)t≥0 and some single valued selection g(Z,W ) ∈ ∂WL(Z,W ), measurable in (Z,W ). We consider the following conditions for almost sure convergence of the SSG method:\nA1 The sequence (ηt)t≥0 of step sizes satisfies\nηt > 0, lim t→∞ ηt = 0,\n∞ ∑\nt=1\nηt = ∞, ∞ ∑\nt=1\nη2t <∞.\nA2 The sequence (St)t≥0 satisfies (4).\nA3 We have E [ ‖St‖ 2 ] < +∞.\nThen by Ermoliev and Norkin’s Theorem [8], the SGG method is consistent in the sense that the sequence (Wt)t≥0 converges almost surely to points satisfying necessary extremum conditions\nΩ∗ = {W ∈ Ω : 0 ∈ ∂WR(W ) +NΩ(W )},\nwhere NΩ(W ) is a normal cone to the constraint set Ω at W ∈ Ω. Besides the sequence (R(Wt))t≥0 converges almost surely and limtR(Wt) ∈ R(Ω ∗).\nSince orbifolds generalize Euclidean spaces and manifolds the consistency theorem is also valid for standard machine learning algorithms in Euclidean spaces with differentiable cost function (e.g multi-layer perceptron) and non-differentiable cost function (e.g. online k-means) [4]."
    }, {
      "heading" : "6 Examples",
      "text" : "This section extends some typical examples of statistical data analysis and learning problems from vector spaces to structured domains. We assume that Q = (X ,Γ, π) is a Riemannian orbifold with optimal alignment kernel k(·|·).\nOrbifold-Adaline. Orbifold adaline generalizes the adaline proposed by [26].\nLet W = XΓ × R be the parameter space and let Z = XΓ × {±1} be the space of observable data. The parameter space W consists of augmented parameter structures W ′ = (W, b), where W ∈ XΓ is the weight structure and b ∈ R is the bias. The observable data Z = (X, y) from Z consists of input structures X ∈ XΓ together with their labels y ∈ {±1}.\nThe loss function of the orbifold-Adaline is of the form\nLada(Z,W ′) =\n( y − (k(X,W ) + b) )2 .\nSince k(·|·) is generalized differentiable, so is Lada(Z,W ). Lifting the loss Lada to the Euclidean space gives\nL̂ada ( z,w′ ) = ( y −max {〈 x′,w 〉 : x′ ∈ X } − b ) 2,\nwhere z = (x, y) ∈ Z and w′ = (w, b) ∈ W with vector representations x and y that project to structures X ∈ XΓ and W ∈ XΓ, respectively. The update rule is given by\nwt+1 = wt − ηt (yt − 〈x ∗ t ,wt〉x ∗ t )\nbt+1 = bt − ηt (yt − bt),\nwhere (x∗t ,wt) is an optimal alignment.\nLearning Orbifold Maps. This example presents a generic formulation of learning functional relationships between orbifolds in a supervised manner. Since orbifolds generalize Euclidean spaces, this setting covers various types of functional relationships that can be learned. Non-standard examples include multi-layer perceptrons for adaptive processing of graphs [20] and learning to predict structured data [2].\nLet QW = (W,Ω, ψ), QX = (X ,Γ, π), and QY = (Y,Λ, φ) be Riemannian orbifolds. The parameter space is represented by orbifold QW and the space of observable data by\nthe orbifold QZ = QX×QY . Suppose that F is a class of generalized differentiable orbifold mappings of the form\nf : XΓ ×WΩ → YΛ.\nThe mean-squared-error loss function is defined by\nLmse(Z,W ) = 1\n2 (Y − f(X,W ))2 .\nLifting this loss function yields\nL̂mse(z,w) = 1\n2\n( y − f̂(x,w) )2 ,\nwhere z = (x,y) projects to structure Z = (X,Y ) and w projects to W . The update rule is then of the form\nwt+1 = wt − ηt ( yt − f̂(xt,wt) ) T g(xt,wt),\nwhere g(xt,wt) ∈ ∂L̂mse(zt,wt) is a stochastic generalized gradient of the lifted loss at wt.\nStructure Quantization. Structure quantization generalizes vector quantization to the quantization of structures. For graphs, a number of structure quantizer design techniques for the purpose of central clustering have already been proposed. Examples include competitive learning [12, 13, 17] and k-means as well as k-medoids algorithms [10, 15, 23].\nLet W = X kΓ be the parameter space and let Z = XΓ be the space of observable data. The parameter space W consists of k-tuples W = (W1, . . . ,Wk), called codebook.\nThe general loss function of structure quantization is defined by the distortion\nLsq(X,W ) = min 1≤i≤k d(X,Wi).\nFor generalized differentiable distance function d(·|·), the update rule is defined by\nw∗t+1 = w ∗ t − ηg(xt,w ∗ t ),\nwhere (xt,w ∗ t ) is an optimal alignment of input structure Xt and its closest codebook structure W ∗t . If d(·|·) is the squared intrinsic metric, we have g(x,w ∗ t ) = xt −w ∗ t .\nObserve that structure quantization also generalizes the problem of estimating a mean graph of Section 2.4 by fixing the number k of centroids to 1."
    }, {
      "heading" : "7 Conclusion",
      "text" : "This contribution proves consistency of learning in structured domains by reducing it to stochastic generalized gradient learning on Riemannian orbifolds. The proposed framework is applicable to learning on combinatorial structures such as point patterns, trees, and\ngraphs. In retrospect, the proposed results provide a theoretical foundation and statistical justification of a number of existing learning methods that directly operate in the domain of graphs. In addition, the orbifold framework provides a generic technique to generalize gradient-based learning methods to structured domains. Future work aims at generalizing the theory to more general Riemannian orbifolds and to discontinuous graph edit distance functions.\nAcknowledgments.\nThe authors are very grateful to Vladimir Norkin for his kind support and valuable comments."
    } ],
    "references" : [ {
      "title" : "A linear programming approach for the weighted graph matching problem",
      "author" : [ "H.A. Almohamad", "S.O. Duffuaa" ],
      "venue" : "Pattern Analysis and Machine Intelligence, IEEE Transactions on, 15(5):522–525",
      "citeRegEx" : "1",
      "shortCiteRegEx" : null,
      "year" : 1993
    }, {
      "title" : "editors",
      "author" : [ "G. Bakir", "T. Hofmann", "B. Schölkopf", "A.J. Smola", "B. Taskar" ],
      "venue" : "Predicting structured data. The MIT Press",
      "citeRegEx" : "2",
      "shortCiteRegEx" : null,
      "year" : 2007
    }, {
      "title" : "Riemannian geometry of orbifolds",
      "author" : [ "J.E. Borzellino" ],
      "venue" : "PhD thesis, University of California, Los Angelos",
      "citeRegEx" : "3",
      "shortCiteRegEx" : null,
      "year" : 1992
    }, {
      "title" : "Stochastic learning",
      "author" : [ "L. Bottou" ],
      "venue" : "Advanced lectures on machine learning, pages 146– 168",
      "citeRegEx" : "4",
      "shortCiteRegEx" : null,
      "year" : 2003
    }, {
      "title" : "On a relation between graph edit distance and maximum common subgraph",
      "author" : [ "H. Bunke" ],
      "venue" : "Pattern Recognition Letters, 18(8):689 – 694",
      "citeRegEx" : "5",
      "shortCiteRegEx" : null,
      "year" : 1997
    }, {
      "title" : "L",
      "author" : [ "T.S. Caetano" ],
      "venue" : "Cheng, Q.V. Le, , and A.J. Smola. Learning graph matching. In International Conference on Computer Vision, ICCV 2007, pages 1–8",
      "citeRegEx" : "6",
      "shortCiteRegEx" : null,
      "year" : 2007
    }, {
      "title" : "Balanced graph matching",
      "author" : [ "T. Cour", "P. Srinivasan", "J. Shi" ],
      "venue" : "Advances in Neural Information Processing Systems, NIPS 2007, volume 19",
      "citeRegEx" : "7",
      "shortCiteRegEx" : null,
      "year" : 2007
    }, {
      "title" : "Stochastic generalized gradient method for nonconvex nonsmooth stochastic optimization",
      "author" : [ "Y.M. Ermoliev", "V.I. Norkin" ],
      "venue" : "Cybernetics and Systems Analysis, 34(2):196– 215",
      "citeRegEx" : "8",
      "shortCiteRegEx" : null,
      "year" : 1998
    }, {
      "title" : "Theory and algorithms on the median graph",
      "author" : [ "M. Ferrer" ],
      "venue" : "Application to graph-based classification and clustering. PhD thesis, Universitat Autònoma de Barcelona",
      "citeRegEx" : "9",
      "shortCiteRegEx" : null,
      "year" : 2007
    }, {
      "title" : "I",
      "author" : [ "M. Ferrer", "E. Valveny", "F. Serratosa" ],
      "venue" : "Bardaj́ı, and H. Bunke. Graph-based k-means clustering: A comparison of the set median versus the generalized median graph. In Computer Analysis of Images and Patterns, CAIP 2009, pages 342–350",
      "citeRegEx" : "10",
      "shortCiteRegEx" : null,
      "year" : 2009
    }, {
      "title" : "A graduated assignment algorithm for graph matching",
      "author" : [ "S. Gold", "A. Rangarajan" ],
      "venue" : "Ieee Transactions On Pattern Analysis and Machine Intelligence, 18(4):377–388",
      "citeRegEx" : "11",
      "shortCiteRegEx" : null,
      "year" : 1996
    }, {
      "title" : "Learning with preknowledge: Clustering with point and graph matching distance measures",
      "author" : [ "S Gold", "A Rangarajan", "E Mjolsness" ],
      "venue" : "Neural Computation, 8(4):787– 804",
      "citeRegEx" : "12",
      "shortCiteRegEx" : null,
      "year" : 1996
    }, {
      "title" : "Self-organizing map for clustering in the graph domain",
      "author" : [ "S. Günter", "H. Bunke" ],
      "venue" : "Pattern Recognition Letters, 23(4):405–417",
      "citeRegEx" : "13",
      "shortCiteRegEx" : null,
      "year" : 2002
    }, {
      "title" : "Median graph computation for graph clustering",
      "author" : [ "A. Hlaoui", "S. Wang" ],
      "venue" : "Soft Computing-A Fusion of Foundations, Methodologies and Applications, 10(1):47–53",
      "citeRegEx" : "14",
      "shortCiteRegEx" : null,
      "year" : 2006
    }, {
      "title" : "On the sample mean of graphs",
      "author" : [ "B. Jain", "K. Obermayer" ],
      "venue" : "International Joint Conference on Neural Networks, IJCNN 2008, pages 993–1000",
      "citeRegEx" : "15",
      "shortCiteRegEx" : null,
      "year" : 2008
    }, {
      "title" : "Algorithms for the sample mean of graphs",
      "author" : [ "B. Jain", "K. Obermayer" ],
      "venue" : "Computer Analysis of Images and Patterns, CAIP 2009, pages 351–359",
      "citeRegEx" : "16",
      "shortCiteRegEx" : null,
      "year" : 2009
    }, {
      "title" : "Graph quantization",
      "author" : [ "B. Jain", "K. Obermayer" ],
      "venue" : "arXiv:1001.0921v1 [cs.AI]",
      "citeRegEx" : "17",
      "shortCiteRegEx" : null,
      "year" : 2009
    }, {
      "title" : "Structure spaces",
      "author" : [ "B. Jain", "K. Obermayer" ],
      "venue" : "Journal of Machine Learning Research, 10:2667–2714",
      "citeRegEx" : "18",
      "shortCiteRegEx" : null,
      "year" : 2009
    }, {
      "title" : "Central clustering of attributed graphs",
      "author" : [ "B. Jain", "F. Wysotzki" ],
      "venue" : "Machine Learning, 56(1-3):169–207",
      "citeRegEx" : "19",
      "shortCiteRegEx" : null,
      "year" : 2004
    }, {
      "title" : "Structural perceptrons for attributed graphs",
      "author" : [ "B. Jain", "F. Wysotzki" ],
      "venue" : "Structural, Syntactic, and Statistical Pattern Recognition, SSPR/SPR 2004, pages 85–94",
      "citeRegEx" : "20",
      "shortCiteRegEx" : null,
      "year" : 2004
    }, {
      "title" : "An median graphs: properties",
      "author" : [ "X. Jiang", "A. Munger", "H. Bunke" ],
      "venue" : "algorithms, and applications. Pattern Analysis and Machine Intelligence, IEEE Transactions on, 23(10):1144–1151",
      "citeRegEx" : "21",
      "shortCiteRegEx" : null,
      "year" : 2001
    }, {
      "title" : "Stochastic generalized-differentiable functions in the problem of nonconvex nonsmooth stochastic optimization",
      "author" : [ "V.I. Norkin" ],
      "venue" : "Cybernetics, 22(6):804–809",
      "citeRegEx" : "22",
      "shortCiteRegEx" : null,
      "year" : 1986
    }, {
      "title" : "Clustering of web documents using graph representations",
      "author" : [ "A. Schenker", "H. Bunke", "M. Last", "A. Kandel" ],
      "venue" : "Applied Graph Theory in Computer Vision and Pattern Recognition, volume 52 of Studies in Computational Intelligence, pages 247–265. Springer",
      "citeRegEx" : "23",
      "shortCiteRegEx" : null,
      "year" : 2007
    }, {
      "title" : "An eigendecomposition approach to weighted graph matching problems",
      "author" : [ "S. Umeyama" ],
      "venue" : "IEEE Trans. Pattern Anal. Mach. Intell., 10(5):695–703",
      "citeRegEx" : "24",
      "shortCiteRegEx" : null,
      "year" : 1988
    }, {
      "title" : "A rkhs interpolator-based graph matching algorithm",
      "author" : [ "M.A. van Wyk", "T.S. Durrani", "B.J. van Wyk" ],
      "venue" : "IEEE Transactions on Pattern Analysis and Machine Intelligence,",
      "citeRegEx" : "25",
      "shortCiteRegEx" : "25",
      "year" : 2002
    }, {
      "title" : "Adaptive switching circuits",
      "author" : [ "B. Widrow", "M.E. Hoff" ],
      "venue" : "IRE WESCON Convention Record, volume 4, pages 96–104",
      "citeRegEx" : "26",
      "shortCiteRegEx" : null,
      "year" : 1960
    } ],
    "referenceMentions" : [ {
      "referenceID" : 8,
      "context" : "Examples from structural pattern recognition that learn on structured data include estimating central points of a distribution on graphs such as the mean and median [9, 16, 15, 21], central clustering of graphs [10, 12, 13, 14, 19, 15, 23], learning graph quantization [17], and multilayer perceptrons for graphs [20].",
      "startOffset" : 165,
      "endOffset" : 180
    }, {
      "referenceID" : 15,
      "context" : "Examples from structural pattern recognition that learn on structured data include estimating central points of a distribution on graphs such as the mean and median [9, 16, 15, 21], central clustering of graphs [10, 12, 13, 14, 19, 15, 23], learning graph quantization [17], and multilayer perceptrons for graphs [20].",
      "startOffset" : 165,
      "endOffset" : 180
    }, {
      "referenceID" : 14,
      "context" : "Examples from structural pattern recognition that learn on structured data include estimating central points of a distribution on graphs such as the mean and median [9, 16, 15, 21], central clustering of graphs [10, 12, 13, 14, 19, 15, 23], learning graph quantization [17], and multilayer perceptrons for graphs [20].",
      "startOffset" : 165,
      "endOffset" : 180
    }, {
      "referenceID" : 20,
      "context" : "Examples from structural pattern recognition that learn on structured data include estimating central points of a distribution on graphs such as the mean and median [9, 16, 15, 21], central clustering of graphs [10, 12, 13, 14, 19, 15, 23], learning graph quantization [17], and multilayer perceptrons for graphs [20].",
      "startOffset" : 165,
      "endOffset" : 180
    }, {
      "referenceID" : 9,
      "context" : "Examples from structural pattern recognition that learn on structured data include estimating central points of a distribution on graphs such as the mean and median [9, 16, 15, 21], central clustering of graphs [10, 12, 13, 14, 19, 15, 23], learning graph quantization [17], and multilayer perceptrons for graphs [20].",
      "startOffset" : 211,
      "endOffset" : 239
    }, {
      "referenceID" : 11,
      "context" : "Examples from structural pattern recognition that learn on structured data include estimating central points of a distribution on graphs such as the mean and median [9, 16, 15, 21], central clustering of graphs [10, 12, 13, 14, 19, 15, 23], learning graph quantization [17], and multilayer perceptrons for graphs [20].",
      "startOffset" : 211,
      "endOffset" : 239
    }, {
      "referenceID" : 12,
      "context" : "Examples from structural pattern recognition that learn on structured data include estimating central points of a distribution on graphs such as the mean and median [9, 16, 15, 21], central clustering of graphs [10, 12, 13, 14, 19, 15, 23], learning graph quantization [17], and multilayer perceptrons for graphs [20].",
      "startOffset" : 211,
      "endOffset" : 239
    }, {
      "referenceID" : 13,
      "context" : "Examples from structural pattern recognition that learn on structured data include estimating central points of a distribution on graphs such as the mean and median [9, 16, 15, 21], central clustering of graphs [10, 12, 13, 14, 19, 15, 23], learning graph quantization [17], and multilayer perceptrons for graphs [20].",
      "startOffset" : 211,
      "endOffset" : 239
    }, {
      "referenceID" : 18,
      "context" : "Examples from structural pattern recognition that learn on structured data include estimating central points of a distribution on graphs such as the mean and median [9, 16, 15, 21], central clustering of graphs [10, 12, 13, 14, 19, 15, 23], learning graph quantization [17], and multilayer perceptrons for graphs [20].",
      "startOffset" : 211,
      "endOffset" : 239
    }, {
      "referenceID" : 14,
      "context" : "Examples from structural pattern recognition that learn on structured data include estimating central points of a distribution on graphs such as the mean and median [9, 16, 15, 21], central clustering of graphs [10, 12, 13, 14, 19, 15, 23], learning graph quantization [17], and multilayer perceptrons for graphs [20].",
      "startOffset" : 211,
      "endOffset" : 239
    }, {
      "referenceID" : 22,
      "context" : "Examples from structural pattern recognition that learn on structured data include estimating central points of a distribution on graphs such as the mean and median [9, 16, 15, 21], central clustering of graphs [10, 12, 13, 14, 19, 15, 23], learning graph quantization [17], and multilayer perceptrons for graphs [20].",
      "startOffset" : 211,
      "endOffset" : 239
    }, {
      "referenceID" : 16,
      "context" : "Examples from structural pattern recognition that learn on structured data include estimating central points of a distribution on graphs such as the mean and median [9, 16, 15, 21], central clustering of graphs [10, 12, 13, 14, 19, 15, 23], learning graph quantization [17], and multilayer perceptrons for graphs [20].",
      "startOffset" : 269,
      "endOffset" : 273
    }, {
      "referenceID" : 19,
      "context" : "Examples from structural pattern recognition that learn on structured data include estimating central points of a distribution on graphs such as the mean and median [9, 16, 15, 21], central clustering of graphs [10, 12, 13, 14, 19, 15, 23], learning graph quantization [17], and multilayer perceptrons for graphs [20].",
      "startOffset" : 313,
      "endOffset" : 317
    }, {
      "referenceID" : 17,
      "context" : "In retrospect, the structure space framework proposed by [18] theoretically justifies the above approaches in the sense that they actually minimize an empirical risk function on structures.",
      "startOffset" : 57,
      "endOffset" : 61
    }, {
      "referenceID" : 17,
      "context" : "For this we regard graphs as points of some structure space [18].",
      "startOffset" : 60,
      "endOffset" : 64
    }, {
      "referenceID" : 17,
      "context" : "In comparison to [18], the innovations are as follows: First, we extend the more suitable concept of generalized differentiability in the sense of Norkin [22] to functions on graphs.",
      "startOffset" : 17,
      "endOffset" : 21
    }, {
      "referenceID" : 21,
      "context" : "In comparison to [18], the innovations are as follows: First, we extend the more suitable concept of generalized differentiability in the sense of Norkin [22] to functions on graphs.",
      "startOffset" : 154,
      "endOffset" : 158
    }, {
      "referenceID" : 7,
      "context" : "Third, equipped with these results, we apply a consistency theorem by Ermoliev and Norkin [8] for generalized differentiable loss functions.",
      "startOffset" : 90,
      "endOffset" : 93
    }, {
      "referenceID" : 3,
      "context" : "Fourth, since orbifolds generalize Euclidean spaces and manifolds, this framework not only establishes consistency for stochastic generalized gradient learning but also for standard stochastic gradient learning in Euclidean spaces (see [4]) under the unifying umbrella of learning on Riemannian orbifolds.",
      "startOffset" : 236,
      "endOffset" : 239
    }, {
      "referenceID" : 10,
      "context" : "Examples are geometric graph distance functions [11] and distances based on the maximum common subgraph including graph and subgraph isomorphism [5].",
      "startOffset" : 48,
      "endOffset" : 52
    }, {
      "referenceID" : 4,
      "context" : "Examples are geometric graph distance functions [11] and distances based on the maximum common subgraph including graph and subgraph isomorphism [5].",
      "startOffset" : 145,
      "endOffset" : 148
    }, {
      "referenceID" : 21,
      "context" : "We therefore address the following questions: (i) How can we extend gradient-based learning problems from Euclidean spaces to GA? (ii) How can we minimize the expected risk of a learning problem with structured input- and/or output-space GA in a statistically consistent way? The ansatz to answer both questions is to identify graphs as points of a Riemannian orbifold and to extend the concept of generalized differentiability in the sense of Norkin [22] in order to apply methods from stochastic optimization for non-differentiable and non-convex loss functions.",
      "startOffset" : 451,
      "endOffset" : 455
    }, {
      "referenceID" : 17,
      "context" : "In doing so, we can refer to [18] for proofs of statements and claims made in this section.",
      "startOffset" : 29,
      "endOffset" : 33
    }, {
      "referenceID" : 2,
      "context" : "In this case, we refer to [3] for more details.",
      "startOffset" : 26,
      "endOffset" : 29
    }, {
      "referenceID" : 0,
      "context" : "This graph metric occurs in various different guises as a common choice of proximity measure [1, 6, 7, 11, 24, 25].",
      "startOffset" : 93,
      "endOffset" : 114
    }, {
      "referenceID" : 5,
      "context" : "This graph metric occurs in various different guises as a common choice of proximity measure [1, 6, 7, 11, 24, 25].",
      "startOffset" : 93,
      "endOffset" : 114
    }, {
      "referenceID" : 6,
      "context" : "This graph metric occurs in various different guises as a common choice of proximity measure [1, 6, 7, 11, 24, 25].",
      "startOffset" : 93,
      "endOffset" : 114
    }, {
      "referenceID" : 10,
      "context" : "This graph metric occurs in various different guises as a common choice of proximity measure [1, 6, 7, 11, 24, 25].",
      "startOffset" : 93,
      "endOffset" : 114
    }, {
      "referenceID" : 23,
      "context" : "This graph metric occurs in various different guises as a common choice of proximity measure [1, 6, 7, 11, 24, 25].",
      "startOffset" : 93,
      "endOffset" : 114
    }, {
      "referenceID" : 24,
      "context" : "This graph metric occurs in various different guises as a common choice of proximity measure [1, 6, 7, 11, 24, 25].",
      "startOffset" : 93,
      "endOffset" : 114
    }, {
      "referenceID" : 21,
      "context" : "4 Generalized Gradients This section extends the concept of generalized differentiability in the sense of Norkin [22] to orbifold functions.",
      "startOffset" : 113,
      "endOffset" : 117
    }, {
      "referenceID" : 21,
      "context" : "Generalized differentiable functions have the following properties [22]: 1.",
      "startOffset" : 67,
      "endOffset" : 71
    }, {
      "referenceID" : 7,
      "context" : "Since the interchange of integral and generalized gradient is valid, that is ∂WR(W ) = E [∂WL(Z,W )] under mild assumptions [8, 22], we can minimize the expected risk R(W ) according to the following stochastic generalized gradient (SGG) method: Wt+1 = ΠΩ (Wt − ηtSt), t ≥ 0, where W0 ∈ Ω and ΠΩ is a projection operator on Ω.",
      "startOffset" : 124,
      "endOffset" : 131
    }, {
      "referenceID" : 21,
      "context" : "Since the interchange of integral and generalized gradient is valid, that is ∂WR(W ) = E [∂WL(Z,W )] under mild assumptions [8, 22], we can minimize the expected risk R(W ) according to the following stochastic generalized gradient (SGG) method: Wt+1 = ΠΩ (Wt − ηtSt), t ≥ 0, where W0 ∈ Ω and ΠΩ is a projection operator on Ω.",
      "startOffset" : 124,
      "endOffset" : 131
    }, {
      "referenceID" : 7,
      "context" : "Then by Ermoliev and Norkin’s Theorem [8], the SGG method is consistent in the sense that the sequence (Wt)t≥0 converges almost surely to points satisfying necessary extremum conditions Ω = {W ∈ Ω : 0 ∈ ∂WR(W ) +NΩ(W )},",
      "startOffset" : 38,
      "endOffset" : 41
    }, {
      "referenceID" : 3,
      "context" : "online k-means) [4].",
      "startOffset" : 16,
      "endOffset" : 19
    }, {
      "referenceID" : 25,
      "context" : "Orbifold adaline generalizes the adaline proposed by [26].",
      "startOffset" : 53,
      "endOffset" : 57
    }, {
      "referenceID" : 19,
      "context" : "Non-standard examples include multi-layer perceptrons for adaptive processing of graphs [20] and learning to predict structured data [2].",
      "startOffset" : 88,
      "endOffset" : 92
    }, {
      "referenceID" : 1,
      "context" : "Non-standard examples include multi-layer perceptrons for adaptive processing of graphs [20] and learning to predict structured data [2].",
      "startOffset" : 133,
      "endOffset" : 136
    }, {
      "referenceID" : 11,
      "context" : "Examples include competitive learning [12, 13, 17] and k-means as well as k-medoids algorithms [10, 15, 23].",
      "startOffset" : 38,
      "endOffset" : 50
    }, {
      "referenceID" : 12,
      "context" : "Examples include competitive learning [12, 13, 17] and k-means as well as k-medoids algorithms [10, 15, 23].",
      "startOffset" : 38,
      "endOffset" : 50
    }, {
      "referenceID" : 16,
      "context" : "Examples include competitive learning [12, 13, 17] and k-means as well as k-medoids algorithms [10, 15, 23].",
      "startOffset" : 38,
      "endOffset" : 50
    }, {
      "referenceID" : 9,
      "context" : "Examples include competitive learning [12, 13, 17] and k-means as well as k-medoids algorithms [10, 15, 23].",
      "startOffset" : 95,
      "endOffset" : 107
    }, {
      "referenceID" : 14,
      "context" : "Examples include competitive learning [12, 13, 17] and k-means as well as k-medoids algorithms [10, 15, 23].",
      "startOffset" : 95,
      "endOffset" : 107
    }, {
      "referenceID" : 22,
      "context" : "Examples include competitive learning [12, 13, 17] and k-means as well as k-medoids algorithms [10, 15, 23].",
      "startOffset" : 95,
      "endOffset" : 107
    } ],
    "year" : 2012,
    "abstractText" : "Learning in Riemannian orbifolds is motivated by existing machine learning algorithms that directly operate on finite combinatorial structures such as point patterns, trees, and graphs. These methods, however, lack statistical justification. This contribution derives consistency results for learning problems in structured domains and thereby generalizes learning in vector spaces and manifolds.",
    "creator" : "LaTeX with hyperref package"
  }
}