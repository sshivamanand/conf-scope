{
  "name" : "1104.4053.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "On the evolution of the instance level of DL-Lite knowledge bases",
    "authors" : [ "Maurizio Lenzerini", "Domenico Fabio Savo" ],
    "emails" : [ "@dis.uniroma1.it" ],
    "sections" : [ {
      "heading" : null,
      "text" : "ar X\niv :1\n10 4.\n40 53\nv1 [\ncs .A\nI] 2\n0 A\npr 2"
    }, {
      "heading" : "1 Introduction",
      "text" : "Description Logics (DLs) [3] are logics for expressing knowledge bases (KBs) constituted by two components, namely, the TBox, asserting general properties of concepts and roles (binary relations), and the ABox, which is a set of assertions about individuals that are instances of concepts and roles. It is widely accepted that such logics are well-suited for expressing ontologies, with the TBox capturing the intensional knowledge about the domain of interest, and the ABox expressing the knowledge about the instance level of the predicates defined in the TBox. Following this idea, several Knowledge Representation Systems, called DL systems, have been recently built, providing methods and tools for managing ontologies expressed in DLs 1. Notice that numerous DLs have been studied in the last decades, with the goal of analyzing the impact of the expressive power of the DL language to the complexity of reasoning. Consequently, each DL system is tailored towards managing KB expressed in a specific DL.\nBy referring to the so-called functional view of knowledge representation [13], DL systems should be able to perform two kinds of operations, called ASK and TELL. ASK operations, such as subsumption checking, or query answering, are\n1 http://www.cs.man.ac.uk/ sattler/reasoners.html\nused to extract information from the KB, whereas TELL operations aim at changing the KB according to new knowledge acquired over the domain. In other words, TELL operations should be able to cope with the evolution of the KB.\nThere are two types of evolution operators, corresponding to inserting, and deleting chunks of knowledge, respectively. In the case of insertion, the aim is to incorporate new knowledge into the KB, and the corresponding operator should be defined in such a way to compute a consistent KB that supports the new knowledge. In the case of deletion, the aim is to come up with a consistent KB where the retracted knowledge is not valid. In both cases, the crucial aspect to take into account is that evolving a consistent knowledge base should not introduce inconsistencies. We point out that a different approach would be to allow inconsistencies in the KB, and then resorting to sophisticated quesy answering mechanisms, tolerant to such inconsistencies (see, for example, [1,12], but this is outside the scope of the approach presented here.\nNotice that, while ASK operations have been investigated in detail by the DL community, existing DL reasoners do not provide explicit services for KB evolution. Nevertheless, many recent papers demonstrate that the interest towards a well-defined approach to KB evolution is growing significantly [9,14,7,15,6].\nFollowing the tradition of the work on knowledge revision and update [11], all the above papers advocate some minimality criterion in the changes of the KB that must be undertaken to realize the evolution operations. In other words, the need is commonly perceived of keeping the distance between the original KB and the KB resulting from the application of an evolution operator minimal. There are two main approaches to define such a distance, called model-based and formula-based, respectively. In the model-based approaches, the result of an evolution operation applied to the KB K is defined in terms of a set of models, with the idea that such a set should be as close as possible to the models of K. One basic problem with this approach is to characterize the language needed to express the KB that exactly captures the resulting set of models. Conversely, in the formula-based approaches, the result is explicitly defined in terms of a formula, by resorting to some minimality criterion with respect to the formula expressing K. Here, the basic problem is that the formula constituting the result of an evolution operation is not unique in general.\nIn this paper, we study the problem of DL KB evolution, by focusing our attention to scenarios characterized by the following elements:\n1. We consider the case where the evolution affects only the instance level of the KB, i.e., the ABox. In other words, we enforce the condition that the KB resulting from the application of the evolution operators has the same TBox as the original KB (similarly to [14,7]).\n2. We aim at a situation where the KB resulting from the evolution can be expressed in the same DL as the original KB. This is coherent with our goal of providing the foundations for equipping DL systems with evolution operators: indeed, if a DL system S is able to manage KBs expressed in a DL L, the result of evolving such KBs should be expressible in L.\n3. The KBs resulting from the application of an evolution operator on two logically equivalent KBs should be mutually equivalent. In other words, we want the result to be independent of the syntactic form of the original KB.\nAssumption (1), although limiting the generality of our approach, captures several interesting scenarios, including ontology-based data management, where the DL KB is used as a logic-based interface to existing information systems (databases, web sources, etc.).\nAs for item (2), we note that virtually all model-based approaches suffer from the expressibility problem. This has been reported in many recent papers, including [14,7,6], for DLs whose expressive power range from DL-Lite to ALCQIO. For this reason, we adopt a formula-based approach, inspired in particular by the work developed in [8] for updating logical theories. As in [8], we consider both insertions and deletions. However, we differ from [8] for an important aspect. We already noted that the formula constituting the result of an evolution operation is not unique in general. While [8] essentially proposes to keep the whole set of such formulas, we take a radical approach, and consider their intersection as the result of the evolution. In other words, we follow the When In Doubt Throw It Out (WIDTIO) [10,16] principle.\nFinally, to deal with item (3), we sanction that the notion of distance between KBs refers to the closure of the ABox of a KB, rather than to the ABox itself. The closure of an ABox A with respect to an TBox T is defined as the set of all ABox assertions that logically follows from T and A. By basing the definition of distance on the closure of ABoxes, we achieve the goal of making the result of our operators independent of the form of the original KB.\nAfter a brief introduction to DLs (Section 2), we provide the definition of our evolution operators in Section 3, together with a comparison with related approaches. The remaining sections are devoted to illustrating algorithms for deletion (Section 4), and insertion (Section 5) for KBs expressed in the DL DL-LiteA,id, which is the most expressive logic in the DL-Lite family [4] The DL-Lite family2 has been specifically designed to keep all reasoning tasks polynomially tractable, and we show that this property still holds for the evolution operators proposed in this paper. Indeed, we show that computing the result of both insertions and deletions to KBs expressed DL-LiteA,id is tractable."
    }, {
      "heading" : "2 Preliminaries",
      "text" : "Let S be a signature of symbols for individual (object and value) constants, and atomic elements, i.e., concepts, value-domains, attributes, and roles. If L is a DL, then an L-KB K over S is a pair 〈T ,A〉 [3] where T , called TBox, is a finite set of intensional assertions over S expressed in L, and A, called ABox, is a finite set of instance assertions, i.e, assertions on individuals, over S. Different DLs allow for different kinds of TBox and/or ABox assertions. In this paper we\n2 Not to be confused with the set of DLs studied in [2], which form the DL-Litebool family.\nassume that ABox assertions are always atomic, i.e., they correspond to ground atoms, and therefore we omit to refer to L when we talk about ABox assertions.\nThe semantics of a DL KB is given in terms of first-order interpretations [3]. An interpretation is a model of a DL knowledge base K = 〈T ,A〉 if it satisfies all assertions in T ∪A (the notion of satisfaction depends on the constructs allowed by the specific DL in which K is expressed). We denote the set of models of K with Mod(K).\nLet T be a TBox in L, and let A be an ABox. We say that A is T -consistent if 〈T ,A〉 is satisfiable, i.e. if Mod(〈T ,A〉) 6= ∅, T -inconsistent otherwise. The T -closure of A with respect to T , denoted clT (A), is the set of all atomic ABox assertion that are formed with individuals in A, and are logically implied by 〈T ,A〉. Obviously, 〈T ,A〉 is logically equivalent to 〈T , clT (A)〉. A is said to be T -closed if clT (A) = A. Finally, for an ABox assertion γ1, we denote by Subsumee〈T ,A〉(γ1) the set of atoms γ2 ∈ clT (A) such that 〈T ,A〉 |= γ2 ⊃ γ1. The description logic DL-LiteA,id. The DL-Lite family [4] is a family of low complexity DLs particularly suited for dealing with KBs with very large ABoxes, and forms the basis of OWL 2 QL, one of the profile of OWL 2, the official ontology specification language of the World-Wide-Web Consortium (W3C)3.\nWe now present the DL DL-LiteA,id, which is the most exprressive logic in the family. Expressions in DL-LiteA,id are formed according to the following syntax:\nB −→ A | ∃Q | δ(U) E −→ ρ(U) C −→ B | ¬B T −→ ⊤D | T1 | · · · | Tn Q −→ P | P− V −→ U | ¬U R −→ Q | ¬Q\nwhere A, P , and U are symbols in S denoting respectively an atomic concept name, an atomic role name and an attribute name, T1, . . . , Tn are all the valuedomains allowed in the logic (those corresponding to the data types adopted by Resource Description Framework (RDF)4), ⊤D denotes the union of all domain values, P− denotes the inverse of P , ∃Q denotes the objects related to by the role Q, ¬ denotes negation, δ(U) denotes the domain of U , i.e., the set of objects that U relates to values, and ρ(U) denotes the range of U , i.e., the set of values related to objects by U .\nA DL-LiteA,id TBox T contains intensional assertions of three types, namely inclusion assertions, functionality assertions, and identification assertions [5] (IDs). More precisely, DL-LiteA,id assertions are of the form:\nB ⊑ C concept inclusion assertion E ⊑ T value-domain inclusion assertion Q ⊑ R role inclusion assertion (funct U) attribute functionality assertion (id B π1, ..., πn) identification assertions\n3 http://www.w3.org/TR/2008/WD-owl2-profiles-20081008/ 4 http://www.w3.org/RDF/\nIn the identification assertions, π denotes a path, which is an expression built according to the following syntax rule:\nπ −→ S | B? | π1 ◦ π2\nwhere S denotes an atomic role, the inverse of an atomic role, or an atomic attribute, π1 ◦π2 denotes the composition of the paths π1 and π2, and B?, called test relation, represents the identity relation on instances of the concept B. In our logic, identification assertions are local, i.e., at least one πi ∈ {π1, ..., πn} has length 1, i.e., it is an atomic role, the inverse of an atomic role, or an atomic attribute. In what follows, we only refer to IDs which are local.\nA concept inclusion assertion expresses that a (basic) concept B is subsumed by a (general) concept C. Analogously for the other types of inclusion assertions. Inclusion assertions that do not contain (resp. contain) the symbols ’¬’ in the right-hand side are called positive inclusions (resp. negative inclusions). Attribute functionality assertions are used to impose that attributes are actually functions from objects to domain values. Finally, an ID (id B π1, ..., πn) asserts that for any two different instances a,b of B, there is at least on πi such that a and b differ in the set of their πi-fillers. Note that IDs can be used to assert functionality of roles. Specifically, the assertion (id ∃Q− Q−) imposes that Q is functional.\nThe set of positive (resp., negative) inclusions in T will be denoted by T + (resp., T −), whereas the set of identification assertions in T will be denoted by Tid.\nA DL-LiteA,id ABox A is a finite set of assertions of the form A(a), P (a, b), and U(a, v), where A, P , and U are as above, a and b are object constants in S, and v is a value constant in S.\nExample 1. We consider a portion of the Formula One domain. We know that official drivers (OD) and test drivers (TD) are both team members (TM), and official drivers are not test drivers. Every team member is a member of (mf) a exactly one team (FT ), and every team has at most one official driver. Finally, no race director (RD) is a member of a team. We also know that s is the official driver of team t1, that b is a test driver, and that p is a team member. The corresponding DL-LiteA,id-KB K is:\nT : OD ⊑ TM TD ⊑ TM OD ⊑ ¬TD RD ⊑ ¬TM TM ⊑ ∃mf TM ⊑ ¬FT ∃mf ⊑ TM ∃mf− ⊑ FT (id OD mf) (id FT mf−) A: OD(s) mf(s, t1) TD(b) TM(p)\nWe conclude this section with a brief discussione on the complexity of reasoning about a DL-LiteA,id-KB 〈T ,A〉. Satisfiability can be checked in polynomial time with respect to |T \\Tid| and |A|, and in NP with respect to |Tid|. Moreover, if 〈T ,A〉 is satisfiable, then answering a query q posed to 〈T ,A〉 can be done in polynomial time with respect to |T | and |A|, and in NP with respect to |q|. Finally, clT (A) can be computed in quadratic time with respect to |T | and |A|."
    }, {
      "heading" : "3 WIDTIO approach to KB evolution in DLs",
      "text" : "In this section we first present our semantics for the evolution of DL knowledge bases at the instance level, and then we provide a comparison between our operator and other work in the literature. Semantics. In what follows, L is a DL, and K = 〈T ,A〉 is a satisfiable L-KB. In other words, we do not consider the evolution of unsatisfiable KBs. In addition, F is a finite set of atomic ABox assertions in L.\nThe following definition specifies when a set of ABox assertions “realizes” the insertion or deletion of a set of ABox assertions with respect to K = 〈T ,A〉.\nDefinition 1. Let A′ be a finite set of ABox assertions in L. Then, we say that 〈T ,A′〉 accomplishes the insertion of F into 〈T ,A〉 if 〈T ,A′〉 is satisfiable, and 〈T ,A′〉 |= F (i.e., F ⊆ clT (A′)). Similarly, 〈T ,A′〉 accomplishes the deletion of F from 〈T ,A〉 if 〈T ,A′〉 is satisfiable, and 〈T ,A′〉 6|= F (i.e., F 6⊆ clT (A′)).\nObviously, we are interested in KBs which accomplish the evolution of a KB with a minimal change. In order to formalize the notion of minimal change, we first need to provide some definitions.\nLet A1 and A2 be two finite sets of ABox assertions in L. Then, we say that 〈T ,A1〉 has fewer insertions than 〈T ,A2〉 with respect to 〈T ,A〉 if clT (A1) \\ clT (A) ⊂ clT (A2) \\ clT (A); and 〈T ,A1〉 has fewer deletions than 〈T ,A2〉 with respect to 〈T ,A〉 if clT (A)\\clT (A1) ⊂ clT (A)\\clT (A2). Also, we say that 〈T ,A1〉 and 〈T ,A2〉 have the same deletions with respect to 〈T ,A〉 if clT (A)\\clT (A1) = clT (A) \\ clT (A2).\nDefinition 2. Let A1 and A2 be two finite sets of ABox assertions in L. Then, 〈T ,A1〉 has fewer changes than 〈T ,A2〉 with respect to 〈T ,A〉 if 〈T ,A1〉 has fewer deletions than 〈T ,A2〉 with respect to 〈T ,A〉, or 〈T ,A1〉 and 〈T ,A2〉 have the same deletions with respect to 〈T ,A〉, and 〈T ,A1〉 has fewer insertions than 〈T ,A2〉 with respect to 〈T ,A〉.\nNow that we have defined the relation of fewer changes between two KBs w.r.t. another one, we can define the notion of a KB which accomplishes the insertion (resp. deletion) of a set of facts into (resp. from) another KB minimally.\nDefinition 3. The L-KB 〈T ,A′〉 accomplishes the insertion (deletion) of F into (from) 〈T ,A〉 minimally if 〈T ,A′〉 accomplishes the insertion (deletion) of F into (from) 〈T ,A〉, and there is no L-KB 〈T ,A′′〉 that accomplishes the insertion (deletion) of F into (from) 〈T ,A〉, and has fewer changes than 〈T ,A′〉 with respect to 〈T ,A〉.\nWith these notions in place, we can now define our evolution operator.\nDefinition 4. Let U = {〈T ,A1〉, . . . , 〈T ,An〉} be the set of all L-KBs accomplishing the insertion (deletion) of F into (from) 〈T ,A〉 minimally, and let 〈T ,A′〉 be an L-KB. Then, 〈T ,A′〉 is the result of changing 〈T ,A〉 with the insertion (deletion) of F if (1) U is empty, and 〈T , clT (A′)〉 = 〈T , clT (A)〉, or (2) U is nonempty, and 〈T , clT (A′)〉 = 〈T , ⋂ 1≤i≤n clT (Ai)〉.\nIt is immediate to verify that, up to logical equivalence, the result of changing 〈T ,A〉 with the insertion or the deletion of F is unique. In the rest of this paper, the result of changing K = 〈T ,A〉 with the insertion (resp. deletion) of F according to our semantics will be denoted by K ⊕T∩ F (resp. K ⊖ T ∩ F ). Notice that, by definition of our operator, in the case where F is inconsistent with T , the result of changing 〈T ,A〉 with both the insertion and the deletion of F is logically equivalent to 〈T ,A〉 itself.\nExample 2. Consider the DL-LiteA,id KB K of the Example 1, and suppose that p becomes now a race director, and b becomes the new official driver ofq team t1. To reflect this new information, we change K with the insertion of F1 = {RD(p), OD(b),mf(b, t1)}. Since the TBox implies that a race director cannot be a team member, RD(p) contradicts TM(p). Also, since every team has at most one official driver, OD(b) and mf(b, t1) contradict mf(s, t). According to Definition 3, the KBs accomplishing the insertion of F1 into K minimally are:\nK1 = 〈T , {RD(p),OD(b),mf(b, t1),TM(s),mf(s, t1)}〉 K2 = 〈T , {RD(p),OD(b),mf(b, t1),TM(s),OD(s)}〉\nThus, K ⊕T∩ F1 is:\nK3 = 〈T , {RD(p),OD(b),mf(b, t1),TM(s)}〉.\nNow, suppose that we do not know anymore whether b is a member of t1, and, even more, whether b is a team member at all. Then, we change K3 with the deletion of F2 = {TM(b),mf(b, t1)}, thus obtaining\nK3 ⊕T∩ F2 = 〈T , {RD(p),TM(s),OD(b)}〉.\nComparison with related work. We mentioned in the introduction several model-based approaches to DL KB evolution, and noticed that they all suffer from the expressibility problem. This problem is also shared by [15], that uses features instead of models, and proposes the notion of approximation to cope with the expressibility problem, similarly to [7].\nRelated to our proposal are several formula-based approaches proposed in the literature. We already pointed out that our proposal is inspired by [8], although the problem studied in [8] is evolution in propositional logic, whereas the context dealt with in our work is instance-level evolution in DLs. Perhaps, the closest approach to the one proposed in this paper is that reported in [6], where formula-based evolution (actually, insertion) of DL-Lite KBs is studied. The main difference with our work is that we base our semantics on the WIDTIO principles, and therefore we compute the intersection of all KBs accomplishing the change minimally. Conversely, in the bold semantics discussed in [6], the result of the change is chosen non-deterministically among the KBs accomplishing the change minimally. Another difference is that while [6] addresses the issue of evolution of both the TBox and the ABox, we only deal with the case of fixed TBox (in the terminology of [6], this corresponds to keep the TBox protected). It is interesting to observe that the specific DL considered in [6] is DL-LiteFR,\nand for this logic, exactly one KB accomplishes the insertion of a set of ABox assertions minimally. It follows that for instance-level insertion, their bold semantics coincides with ours. On the other hand, the presence of identification assertions in DL-LiteA,id changes the picture considerably, since with such assertions in the TBox, many KBs may exist accomplishing the insertion minimally. In this case, the two approaches are indeed different. Finally, [6] proposes a variant of the bold semantics, called careful semantics, for instance-level insertion in DL-LiteFR. Intuitively, such a semantics aims at disregarding knowledge that is entailed neither by the original KB, nor by the set of newly asserted facts. Although such principle is interesting, we believe that the careful semantics is too drastic, as it tends to eliminate too many information from the original KB as shown in the following example.\nExample 3. Consider the KB K of the Example 1, and suppose that we c is now a member of a formula one team, which means changing K with the insertion of TM(c). Notice that such a new fact does not contradict any information in K. Therefore, in our approach, the result of the insertion is 〈T , {OD(s), mf(s, t1), TD(b), TM(p), TM(c) }〉. Conversely, one can verify that the result under the careful semantics is 〈T , {OD(s), mf(s, t1), TM(c) }〉, thus loosing both the information that b is a test driver, and the information that p is a team member.\nFinally, we point out that, to our knowledge, the evolution operator presented in this work is the first tractable evolution operator based on the WIDTIO principle.\n4 Deletion in DL-LiteA,id\nWe study deletion under the assumption that the DL language L is DL-LiteA,id. Thus, we refer to a DL-LiteA,id-KB K = 〈T ,A〉, and we address the problem of changing K with the deletion of a finite set F of ABox assertions. We assume that both 〈T ,A〉 and 〈T , F 〉 are satisfiable.\nThe following theorem specifies when a DL-LiteA,id-KB accomplishes the deletion of F from 〈T ,A〉 minimally.\nTheorem 1. 〈T ,A′〉 accomplishes the deletion of F from 〈T ,A〉 minimally if and only if clT (A′) is a maximal T -closed subset of clT (A) such that F 6⊆ clT (A′).\nWe now consider the case where the set F is constituted by just one assertion f . By exploiting Theorem 1, it is easy to conclude that there is exactly one KB accomplishing the deletion of {f} from a given KB.\nTheorem 2. Let f be an ABox assertion. Up to logical equivalence, there is exactly one KB of the form 〈T ,A′〉 that accomplishes the deletion of {f} from 〈T ,A〉 minimally, and such KB can be computed in polynomial time with respect to |T | and |A|.\nProof (sketch). The proof is based on the fact that 〈T ,A \\ SubsumeeK(f)〉 is the unique maximal T -closed subset A′ of clT (A) such that {f} 6⊆ clT (A′).\nLet us now consider the case of arbitrary F = {f1, . . . , fm}. Suppose that, for every 1 ≤ i ≤ m, 〈T ,Ai〉 accomplishes the deletion of {fi} from 〈T ,A〉 minimally. One might wonder whether the set Γ1 of all KBs accomplishing the deletion of F from 〈T ,A〉 minimally coincides (modulo logical equivalence) with Γ2 = {〈T ,A1〉, . . . 〈T ,Am〉}. The next theorem tells us that one direction is indeed valid: for each KB K1 ∈ Γ1 there exists a KB K2 ∈ Γ2 such that Mod(K1) = Mod(K2).\nTheorem 3. If 〈T ,A′〉 accomplishes the deletion of {f1, . . . , fm} from 〈T ,A〉 minimally, then there exists i ∈ {1..m} such that 〈T ,A′〉 accomplishes the deletion of fi from 〈T ,A〉 minimally.\nHowever, the following example shows that the other direction does not hold: there may exist a K2 ∈ Γ2 that is not logically equivalent to any K1 ∈ Γ1.\nExample 4. Let T be {B ⊑ C,C ⊑ D,E ⊑ D}, let A be {B(a), E(a)}, and let F be {C(a), D(a)}. It is easy to see that the deletion of D(a) from 〈T ,A〉 is accomplished minimally by 〈T , ∅〉, while the deletion of C(a) from 〈T ,A〉 is accomplished minimally by 〈T , {E(a)}〉. Therefore, in this case Γ2 = {〈T , ∅〉, 〈T , {E(a)}〉}. Also, one can verify that 〈T , {E(a)}〉 is the only (up to logical equivalence) KB accomplishing the deletion of F minimally, i.e., Γ1 = {〈T , {E(a)}〉}. Thus, there is a KB in Γ2, namely 〈T , ∅〉, that is not logically equivalent to any KB in Γ1.\nNote that the above example also shows that deleting F is not equivalent to iteratively deleting all atoms in F .\nThe next theorem characterizes when a given 〈T ,Ai〉 ∈ Γ2 accomplishes the deletion of F minimally.\nTheorem 4. Let F = {f1, . . . , fm}, and, for every 1 ≤ i ≤ m, let 〈T ,Ai〉 accomplish the deletion of {fi} from 〈T ,A〉 minimally. Then, 〈T ,Aj〉, where j ∈ {1..m}, accomplishes the deletion of F from 〈T ,A〉 minimally if and only if there is no h ∈ {1..m} such that h 6= j, and 〈T , {fh}〉 |= fj.\nProof (sketch). We first show that (α) 〈T ,Aj〉, where j ∈ {1..m}, accomplishes the deletion of F from 〈T ,A〉 minimally if and only if there is no h ∈ {1..m} such that Aj ⊂ Ah, and then show that (β) Aj ⊂ Ah if and only if h 6= j, and 〈T , {fh}〉 |= fj .\nBy exploiting Theorems 2, 3, and 4, we can directly prove that K ⊖T∩ F can be computed by the algorithm ComputeDeletion below. It is easy to see that the time complexity of the algorithm is O(|T |2 × |F |2 + |A|2).\nTheorem 5. ComputeDeletion(〈T ,A〉, F ) terminates, and computes 〈T ,A〉⊖T∩ F in polynomial time with respect to |T |, |A| and |F |.\nInput: a satisfiable DL-LiteA,id KB K = 〈T ,A〉, a finite set of ABox assertions F such that 〈T , F 〉 is satisfiable Output: a DL-LiteA,id KB. begin\nF ′ ← F ; foreach fi ∈ F\n′ and fj ∈ F such that i 6= j do if 〈T , {fj}〉 |= fi then F\n′ ← F ′ \\ {fi} return 〈T , clT (A) \\ {α ∈ SubsumeeK(f) | f ∈ F ′}〉;\nAlgorithm 1: Algorithm ComputeDeletion(〈T ,A〉, F )\n5 Insertion in DL-LiteA,id\nWe refer to a DL-LiteA,id-KB K = 〈T ,A〉, and we address the problem of changing K with the insertion of a finite set F of ABox assertions. As in the previous section, we assume that both 〈T ,A〉 and 〈T , F 〉 are satisfiable. The main problem to be faced with insertion is described by the following observation.\nSuppose that T contains n identification assertions with at least two atoms that become simoultaneously violated with the insertion of a single ABox assertion f into 〈T ,A〉, and such that every choice of retracting one of such atoms yields a maximal subset of clT (A) that is T -consistent with f . Obviously, there are at least 2n such maximal subsets. What the above example shows is that, given f , there can be an exponential number of maximal subsets A′ of clT (A) such that 〈T ,A′ ∪ {f}〉 is satisfiable. Note that this cannot happen in those DLs of the DL-Lite family which do not admit the use of identification assertions (such as the DL studied in [6]). Indeed, in such logic, there is always one maximal subset of clT (A) that is consistent with a set F of ABox assertions.\nIt follows from the above observation that building all maximal subsets of 〈T ,A〉 which are T -consistent with F , and then computing their intersection is computationally costly. Fortunately, we show in the following that we can compute K ⊕T∩ F without computing all maximal consistent subsets of 〈T ,A〉 with F .\nTo describe our method, we need some preliminary notions. A set V of facts is called a T -violation set for t ∈ T \\ T + if 〈T + ∪ {t}, V 〉 is unsatisfiable, while for every proper subset V ′ of V , 〈T + ∪ {t}, V ′〉 is satisfiable. Any set V of facts that is a T -violation set for a t ∈ T \\ T + is simply called a T -violation set.\nTheorem 6. Let 〈T ,A〉 be a satisfiable DL-LiteA,id-KB, and let α be an ABox assertion such that 〈T , {α}〉 is satisfiable. If 〈T ,A ∪ {α}〉 is unsatisfiable, then there is a T -violation set V in clT (A∪{α}) such that (i) V contains α, and (ii) (V \\ {α}) ⊆ clT (A).\nProof (sketch). We first show that, if 〈T ,A ∪ {α}〉 is unsatisfiable, then there is a TBox assertion t in T \\ T + such that 〈T +,A ∪ {α}〉 |= qt, where qt is the boolean query corresponding to the negation of t. This implies that there is a query q′ in the T -expansion of qt that evaluates true on clT (A ∪ {α}), i.e.,\nthat forms a T -violation set for t in clT (A ∪ {α}). Now suppose that, for every t ∈ T \\T +, and for every T -violation set V in clT (A∪{α}), V does not contain α. This means that either (i) there is no T -violation set in clT (A ∪ {α}), or (ii) all T -violation sets in clT (A ∪ {α}) do not contain α. Btoh cases lead to a contradiction, and, therefore, we conclude that there is a T -violation set V in clT (A ∪ {α}) such that V contains α. Finally, since 〈T , {α}〉 is satisfiable, it is immediate to verify that (V \\ {α}) ⊆ clT (A).\nThe next theorem is the key to our solution.\nTheorem 7. Let α be an atom such that α ∈ clT (A) \\ clT (F ). There exists a maximal subset Σ of clT (A) such that 〈T , Σ ∪ F 〉 is satisfiable and Σ does not contain α if and only if there is a T -violation set V in clT (A)∪clT (F ) such that α ∈ V , and 〈T , F ∪ (V \\ {α})〉 is satisfiable.\nProof (sketch). (⇒) Suppose that there is a T -violation set V in clT (A)∪clT (F ) such that α ∈ V and 〈T , F ∪ (V \\ {α})〉 is satisfiable. Since 〈T , F ∪ (V \\ {α})〉 is satisfiable, the set of maximal subsets Σ of clT (A) such that 〈T , Σ∪F∪(V \\{α})〉 is satisfiable is non-empty. Consider any Σ in such a set, i.e., assume that Σ is a maximal subset of clT (A) such that 〈T , Σ ∪ F ∪ (V \\ {α})〉 is satisfiable. It can be shown that (1) Σ does not contain α, and (2) Σ is a maximal subset of clT (A) such that 〈T , Σ ∪ F 〉 is satisfiable.\n(⇐) Suppose that there is no T -violation set V in clT (A)∪ clT (F ) such that α ∈ V and 〈T , F ∪ (V \\ {α})〉 is satisfiable. We show that every maximal subset Σ′ of clT (A) such that 〈T , Σ′ ∪ F 〉 is satisfiable contains α, by showing that, if Σ is a subset of clT (A) such that 〈T , Σ∪F 〉 is satisfiable, then 〈T , Σ ∪F ∪{α}〉 is also satisfiable. Indeed, assume by way of contradiction that 〈T , Σ ∪F ∪{α}〉 is unsatisfiable. Note that α ∈ clT (A), and, since 〈T ,A〉 is satisfiable, 〈T , {α}〉 is also satisfiable. We can therefore apply theorem 6, and conclude that there is a T -violation set V in clT (F ∪ Σ ∪ {α}) such that (1) V contains α, (2) (V \\ {α}) ⊆ clT (F ∪ Σ). Now, since (V \\ {α}) ⊆ clT (F ∪ Σ), and 〈T , Σ ∪ F 〉 is satisfiable, it follows that 〈T , F ∪ (V \\ {α})〉 is satisfiable. This implies that there is a T -violation set V in clT (F ∪ Σ ∪ {α}) ⊆ clT (A) ∪ clT (F ) such that α ∈ V and 〈T , F ∪ (V \\ {α})〉 is satisfiable, which is a contradiction.\nTheorems 6 and 7 allow us to prove that K ⊕T∩ F can be computed by the algorithm ComputeInsertion below.\nAlgorithm ComputeInsertion requires to compute all T -violation sets in clT (A)∪clT (F ). It can be shown that this can be done by computing the results of suitable conjunctive queries posed to clT (A) ∪ clT (F ). Such queries are built out of the negative inclusion assertions and the identification assertions Tid in T , and essentially look for tuples that satisfy the negation of such assertions. From this observation, one can derive the following theorem.\nTheorem 8. ComputeInsertion(〈T ,A〉,F) terminates, and computes 〈T ,A〉⊕T∩ F in polynomial time with respect to |T \\ Tid|, |A|, and |F |, and in NP with respect to |Tid|.\nInput: a satisfiable DL-LiteA,id KB K = 〈T ,A〉, a finite set of ABox assertions F such that 〈T , F 〉 is satisfiable Output: a DL-LiteA,id KB. begin\nF ′ = ∅; foreach α ∈ clT (A) \\ clT (F ) do\nif ∃ a T -violation set V in clT (A) ∪ clT (F ) s.t. α ∈ V and 〈T , F ∪ (V \\ {α})〉 is satisfiable then\nF ′ ← F ′ ∪ {α} return 〈T , F ∪ clT (A) \\ F ′〉;\nAlgorithm 2: Algorithm ComputeInsertion(〈T ,A〉,F)\nIt can also be shown that the problem of checking for the existence of T - violation sets in a set of ABox assertions is NP-complete with respect to |Tid|."
    }, {
      "heading" : "6 Conclusions",
      "text" : "We have illustrated a WIDTIO approach to instance-level evolution in DL, and we have presented algorithms for the case of DL-LiteA,id. We plan to continue our work along several directions. First, we will extend the algorithms to the case where the KB contains denial constraints, which are constraints that can be added to DL-LiteA,id without changing the complexity of all reasoning tasks. The extension is based on the fact that denial constraints behave similarly to identification assertions with respect to KB evolution. Also, we aim at extending our approach to the problem of evolution of the whole KB, as opposed to the ABox only. Finally, we will add the notion of protected part to our approach, to model situations where one wants to prevent changes on specific parts of the KB when applying insertions or deletions."
    } ],
    "references" : [ {
      "title" : "Consistent query answers in inconsistent databases",
      "author" : [ "Marcelo Arenas", "Leopoldo E. Bertossi", "Jan Chomicki" ],
      "venue" : "In Proc. of PODS’99,",
      "citeRegEx" : "1",
      "shortCiteRegEx" : "1",
      "year" : 1999
    }, {
      "title" : "The DL-Lite family and relations",
      "author" : [ "Alessandro Artale", "Diego Calvanese", "Roman Kontchakov", "Michael Zakharyaschev" ],
      "venue" : "J. of Artificial Intelligence Research,",
      "citeRegEx" : "2",
      "shortCiteRegEx" : "2",
      "year" : 2009
    }, {
      "title" : "The Description Logic Handbook: Theory, Implementation and Applications",
      "author" : [ "Franz Baader", "Diego Calvanese", "Deborah McGuinness", "Daniele Nardi", "Peter F. Patel-Schneider", "editors" ],
      "venue" : null,
      "citeRegEx" : "3",
      "shortCiteRegEx" : "3",
      "year" : 2003
    }, {
      "title" : "Tractable reasoning and efficient query answering in description logics: The DL-Lite family",
      "author" : [ "Diego Calvanese", "Giuseppe De Giacomo", "Domenico Lembo", "Maurizio Lenzerini", "Riccardo Rosati" ],
      "venue" : "J. of Automated Reasoning,",
      "citeRegEx" : "4",
      "shortCiteRegEx" : "4",
      "year" : 2007
    }, {
      "title" : "Path-based identification constraints in description logics",
      "author" : [ "Diego Calvanese", "Giuseppe De Giacomo", "Domenico Lembo", "Maurizio Lenzerini", "Riccardo Rosati" ],
      "venue" : "In Proc. of KR",
      "citeRegEx" : "5",
      "shortCiteRegEx" : "5",
      "year" : 2008
    }, {
      "title" : "Evolution of DL-Lite knowledge bases",
      "author" : [ "Diego Calvanese", "Evgeny Kharlamov", "Werner Nutt", "Dmitriy Zheleznyakov" ],
      "venue" : "In Proc. of ISWC 2010,",
      "citeRegEx" : "6",
      "shortCiteRegEx" : "6",
      "year" : 2010
    }, {
      "title" : "On instance-level update and erasure in description logic ontologies",
      "author" : [ "Giuseppe De Giacomo", "Maurizio Lenzerini", "Antonella Poggi", "Riccardo Rosati" ],
      "venue" : "J. of Logic and Computation, Special Issue on Ontology Dynamics,",
      "citeRegEx" : "7",
      "shortCiteRegEx" : "7",
      "year" : 2009
    }, {
      "title" : "On the semantics of updates in databases",
      "author" : [ "Ronald Fagin", "Jeffrey D. Ullman", "Moshe Y. Vardi" ],
      "venue" : "In Proc. of PODS’83,",
      "citeRegEx" : "8",
      "shortCiteRegEx" : "8",
      "year" : 1983
    }, {
      "title" : "Ontology change: Classification and survey",
      "author" : [ "Giorgos Flouris", "Dimitris Manakanatas", "Haridimos Kondylakis", "Dimitris Plexousakis", "Grigoris Antoniou" ],
      "venue" : "Knowledge Engineering Review,",
      "citeRegEx" : "9",
      "shortCiteRegEx" : "9",
      "year" : 2008
    }, {
      "title" : "Reasoning about action I: A possible worlds approach",
      "author" : [ "Matthew L. Ginsberg", "David E. Smith" ],
      "venue" : "Technical Report KSL-86-65, Knowledge Systems, AI Laboratory,",
      "citeRegEx" : "10",
      "shortCiteRegEx" : "10",
      "year" : 1987
    }, {
      "title" : "On the difference between updating a knowledge base and revising it",
      "author" : [ "Hirofumi Katsuno", "Alberto Mendelzon" ],
      "venue" : "In Proc. of KR’91,",
      "citeRegEx" : "11",
      "shortCiteRegEx" : "11",
      "year" : 1991
    }, {
      "title" : "The INFOMIX system for advanced integration of incomplete and inconsistent data",
      "author" : [ "Nicola Leone", "Thomas Eiter", "Wolfgang Faber", "Michael Fink", "Georg Gottlob", "Gianluigi Greco", "Edyta Kalka", "Giovambattista Ianni", "Domenico Lembo", "Maurizio Lenzerini", "Vincenzino Lio", "Bartosz Nowicki", "Riccardo Rosati", "Marco Ruzzi", "Witold Staniszkis", "Giorgio Terracina" ],
      "venue" : "In Proc. of ACM SIGMOD,",
      "citeRegEx" : "12",
      "shortCiteRegEx" : "12",
      "year" : 2005
    }, {
      "title" : "Foundations of a functional approach to knowledge representation",
      "author" : [ "Hector J. Levesque" ],
      "venue" : "Artificial Intelligence,",
      "citeRegEx" : "13",
      "shortCiteRegEx" : "13",
      "year" : 1984
    }, {
      "title" : "Updating description logic ABoxes",
      "author" : [ "H. Liu", "C. Lutz", "M. Milicic", "F. Wolter" ],
      "venue" : "In Proc. of KR",
      "citeRegEx" : "14",
      "shortCiteRegEx" : "14",
      "year" : 2006
    }, {
      "title" : "A new approach to knowledge base revision in DL-Lite",
      "author" : [ "Zhe Wang", "Kewen Wang", "Rodney W. Topor" ],
      "venue" : "In Proc. of AAAI",
      "citeRegEx" : "15",
      "shortCiteRegEx" : "15",
      "year" : 2010
    }, {
      "title" : "Updating Logical Databases",
      "author" : [ "Marianne Winslett" ],
      "venue" : null,
      "citeRegEx" : "16",
      "shortCiteRegEx" : "16",
      "year" : 1990
    } ],
    "referenceMentions" : [ {
      "referenceID" : 2,
      "context" : "Description Logics (DLs) [3] are logics for expressing knowledge bases (KBs) constituted by two components, namely, the TBox, asserting general properties of concepts and roles (binary relations), and the ABox, which is a set of assertions about individuals that are instances of concepts and roles.",
      "startOffset" : 25,
      "endOffset" : 28
    }, {
      "referenceID" : 12,
      "context" : "By referring to the so-called functional view of knowledge representation [13], DL systems should be able to perform two kinds of operations, called ASK and TELL.",
      "startOffset" : 74,
      "endOffset" : 78
    }, {
      "referenceID" : 0,
      "context" : "We point out that a different approach would be to allow inconsistencies in the KB, and then resorting to sophisticated quesy answering mechanisms, tolerant to such inconsistencies (see, for example, [1,12], but this is outside the scope of the approach presented here.",
      "startOffset" : 200,
      "endOffset" : 206
    }, {
      "referenceID" : 11,
      "context" : "We point out that a different approach would be to allow inconsistencies in the KB, and then resorting to sophisticated quesy answering mechanisms, tolerant to such inconsistencies (see, for example, [1,12], but this is outside the scope of the approach presented here.",
      "startOffset" : 200,
      "endOffset" : 206
    }, {
      "referenceID" : 8,
      "context" : "Nevertheless, many recent papers demonstrate that the interest towards a well-defined approach to KB evolution is growing significantly [9,14,7,15,6].",
      "startOffset" : 136,
      "endOffset" : 149
    }, {
      "referenceID" : 13,
      "context" : "Nevertheless, many recent papers demonstrate that the interest towards a well-defined approach to KB evolution is growing significantly [9,14,7,15,6].",
      "startOffset" : 136,
      "endOffset" : 149
    }, {
      "referenceID" : 6,
      "context" : "Nevertheless, many recent papers demonstrate that the interest towards a well-defined approach to KB evolution is growing significantly [9,14,7,15,6].",
      "startOffset" : 136,
      "endOffset" : 149
    }, {
      "referenceID" : 14,
      "context" : "Nevertheless, many recent papers demonstrate that the interest towards a well-defined approach to KB evolution is growing significantly [9,14,7,15,6].",
      "startOffset" : 136,
      "endOffset" : 149
    }, {
      "referenceID" : 5,
      "context" : "Nevertheless, many recent papers demonstrate that the interest towards a well-defined approach to KB evolution is growing significantly [9,14,7,15,6].",
      "startOffset" : 136,
      "endOffset" : 149
    }, {
      "referenceID" : 10,
      "context" : "Following the tradition of the work on knowledge revision and update [11], all the above papers advocate some minimality criterion in the changes of the KB that must be undertaken to realize the evolution operations.",
      "startOffset" : 69,
      "endOffset" : 73
    }, {
      "referenceID" : 13,
      "context" : "In other words, we enforce the condition that the KB resulting from the application of the evolution operators has the same TBox as the original KB (similarly to [14,7]).",
      "startOffset" : 162,
      "endOffset" : 168
    }, {
      "referenceID" : 6,
      "context" : "In other words, we enforce the condition that the KB resulting from the application of the evolution operators has the same TBox as the original KB (similarly to [14,7]).",
      "startOffset" : 162,
      "endOffset" : 168
    }, {
      "referenceID" : 13,
      "context" : "This has been reported in many recent papers, including [14,7,6], for DLs whose expressive power range from DL-Lite to ALCQIO.",
      "startOffset" : 56,
      "endOffset" : 64
    }, {
      "referenceID" : 6,
      "context" : "This has been reported in many recent papers, including [14,7,6], for DLs whose expressive power range from DL-Lite to ALCQIO.",
      "startOffset" : 56,
      "endOffset" : 64
    }, {
      "referenceID" : 5,
      "context" : "This has been reported in many recent papers, including [14,7,6], for DLs whose expressive power range from DL-Lite to ALCQIO.",
      "startOffset" : 56,
      "endOffset" : 64
    }, {
      "referenceID" : 7,
      "context" : "For this reason, we adopt a formula-based approach, inspired in particular by the work developed in [8] for updating logical theories.",
      "startOffset" : 100,
      "endOffset" : 103
    }, {
      "referenceID" : 7,
      "context" : "As in [8], we consider both insertions and deletions.",
      "startOffset" : 6,
      "endOffset" : 9
    }, {
      "referenceID" : 7,
      "context" : "However, we differ from [8] for an important aspect.",
      "startOffset" : 24,
      "endOffset" : 27
    }, {
      "referenceID" : 7,
      "context" : "While [8] essentially proposes to keep the whole set of such formulas, we take a radical approach, and consider their intersection as the result of the evolution.",
      "startOffset" : 6,
      "endOffset" : 9
    }, {
      "referenceID" : 9,
      "context" : "In other words, we follow the When In Doubt Throw It Out (WIDTIO) [10,16] principle.",
      "startOffset" : 66,
      "endOffset" : 73
    }, {
      "referenceID" : 15,
      "context" : "In other words, we follow the When In Doubt Throw It Out (WIDTIO) [10,16] principle.",
      "startOffset" : 66,
      "endOffset" : 73
    }, {
      "referenceID" : 3,
      "context" : "The remaining sections are devoted to illustrating algorithms for deletion (Section 4), and insertion (Section 5) for KBs expressed in the DL DL-LiteA,id, which is the most expressive logic in the DL-Lite family [4] The DL-Lite family has been specifically designed to keep all reasoning tasks polynomially tractable, and we show that this property still holds for the evolution operators proposed in this paper.",
      "startOffset" : 212,
      "endOffset" : 215
    }, {
      "referenceID" : 2,
      "context" : "If L is a DL, then an L-KB K over S is a pair 〈T ,A〉 [3] where T , called TBox, is a finite set of intensional assertions over S expressed in L, and A, called ABox, is a finite set of instance assertions, i.",
      "startOffset" : 53,
      "endOffset" : 56
    }, {
      "referenceID" : 1,
      "context" : "2 Not to be confused with the set of DLs studied in [2], which form the DL-Litebool family.",
      "startOffset" : 52,
      "endOffset" : 55
    }, {
      "referenceID" : 2,
      "context" : "The semantics of a DL KB is given in terms of first-order interpretations [3].",
      "startOffset" : 74,
      "endOffset" : 77
    }, {
      "referenceID" : 3,
      "context" : "The DL-Lite family [4] is a family of low complexity DLs particularly suited for dealing with KBs with very large ABoxes, and forms the basis of OWL 2 QL, one of the profile of OWL 2, the official ontology specification language of the World-Wide-Web Consortium (W3C).",
      "startOffset" : 19,
      "endOffset" : 22
    }, {
      "referenceID" : 4,
      "context" : "A DL-LiteA,id TBox T contains intensional assertions of three types, namely inclusion assertions, functionality assertions, and identification assertions [5] (IDs).",
      "startOffset" : 154,
      "endOffset" : 157
    }, {
      "referenceID" : 14,
      "context" : "This problem is also shared by [15], that uses features instead of models, and proposes the notion of approximation to cope with the expressibility problem, similarly to [7].",
      "startOffset" : 31,
      "endOffset" : 35
    }, {
      "referenceID" : 6,
      "context" : "This problem is also shared by [15], that uses features instead of models, and proposes the notion of approximation to cope with the expressibility problem, similarly to [7].",
      "startOffset" : 170,
      "endOffset" : 173
    }, {
      "referenceID" : 7,
      "context" : "We already pointed out that our proposal is inspired by [8], although the problem studied in [8] is evolution in propositional logic, whereas the context dealt with in our work is instance-level evolution in DLs.",
      "startOffset" : 56,
      "endOffset" : 59
    }, {
      "referenceID" : 7,
      "context" : "We already pointed out that our proposal is inspired by [8], although the problem studied in [8] is evolution in propositional logic, whereas the context dealt with in our work is instance-level evolution in DLs.",
      "startOffset" : 93,
      "endOffset" : 96
    }, {
      "referenceID" : 5,
      "context" : "Perhaps, the closest approach to the one proposed in this paper is that reported in [6], where formula-based evolution (actually, insertion) of DL-Lite KBs is studied.",
      "startOffset" : 84,
      "endOffset" : 87
    }, {
      "referenceID" : 5,
      "context" : "Conversely, in the bold semantics discussed in [6], the result of the change is chosen non-deterministically among the KBs accomplishing the change minimally.",
      "startOffset" : 47,
      "endOffset" : 50
    }, {
      "referenceID" : 5,
      "context" : "Another difference is that while [6] addresses the issue of evolution of both the TBox and the ABox, we only deal with the case of fixed TBox (in the terminology of [6], this corresponds to keep the TBox protected).",
      "startOffset" : 33,
      "endOffset" : 36
    }, {
      "referenceID" : 5,
      "context" : "Another difference is that while [6] addresses the issue of evolution of both the TBox and the ABox, we only deal with the case of fixed TBox (in the terminology of [6], this corresponds to keep the TBox protected).",
      "startOffset" : 165,
      "endOffset" : 168
    }, {
      "referenceID" : 5,
      "context" : "It is interesting to observe that the specific DL considered in [6] is DL-LiteFR,",
      "startOffset" : 64,
      "endOffset" : 67
    }, {
      "referenceID" : 5,
      "context" : "Finally, [6] proposes a variant of the bold semantics, called careful semantics, for instance-level insertion in DL-LiteFR.",
      "startOffset" : 9,
      "endOffset" : 12
    }, {
      "referenceID" : 5,
      "context" : "Note that this cannot happen in those DLs of the DL-Lite family which do not admit the use of identification assertions (such as the DL studied in [6]).",
      "startOffset" : 147,
      "endOffset" : 150
    } ],
    "year" : 2014,
    "abstractText" : "Recent papers address the issue of updating the instance level of knowledge bases expressed in Description Logic following a modelbased approach. One of the outcomes of these papers is that the result of updating a knowledge base K is generally not expressible in the Description Logic used to express K. In this paper we introduce a formula-based approach to this problem, by revisiting some research work on formulabased updates developed in the ’80s, in particular the WIDTIO (When In Doubt, Throw It Out) approach. We show that our operator enjoys desirable properties, including that both insertions and deletions according to such operator can be expressed in the DL used for the original KB. Also, we present polynomial time algorithms for the evolution of the instance level knowledge bases expressed in DL-LiteA,id, which the most expressive Description Logics of the DL-Lite family.",
    "creator" : "LaTeX with hyperref package"
  }
}