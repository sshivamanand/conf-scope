{
  "name" : "94.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "A Full Non-Monotonic Transition System for Unrestricted Non-Projective Parsing",
    "authors" : [ ],
    "emails" : [ ],
    "sections" : [ {
      "heading" : null,
      "text" : "1 000\n011\n012\n013\n014\n015\n016\n017\n018\n019\n020\n021\n022\n023\n024\n025\n026\n027\n028\n029\n030\n031\n032\n033\n034\n035\n036\n037\n038\n039\n040\n041\n042\n043\n044\n045\n046\n047\n048\n049\n061\n062\n063\n064\n065\n066\n067\n068\n069\n070\n071\n072\n073\n074\n075\n076\n077\n078\n079\n080\n081\n082\n083\n084\n085\n086\n087\n088\n089\n090\n091\n092\n093\n094\n095\n096\n097\n098\n099"
    }, {
      "heading" : "1 Introduction",
      "text" : "Greedy transition-based dependency parsers are widely used in different NLP tasks due to their speed and efficiency. They parse a sentence from left to right by greedily choosing the highestscoring transition to go from the current parser configuration or state to the next. The resulting sequence of transitions incrementally builds a parse for the input sentence. The scoring of the transitions is provided by a statistical model, previously trained to approximate an oracle, a function that selects the needed transitions to parse a gold tree.\nUnfortunately, the greedy nature that grants these parsers their efficiency also represents their main limitation. McDonald and Nivre (2007) show that greedy transition-based parsers lose accuracy to error propagation: a transition erroneously chosen by the greedy parser can place it\nin an incorrect and unknown configuration, causing more mistakes in the rest of the transition sequence. Training with a dynamic oracle (Goldberg and Nivre, 2012) improves robustness in these situations, but in a monotonic transition system, erroneous decisions made in the past are permanent, even when the availability of further information in later states might be useful to correct them.\nHonnibal et al. (2013) show that allowing some degree of non-monotonicity, by using a limited set of non-monotonic actions that can repair past mistakes and replace previously-built arcs, can increase the accuracy of a transition-based parser. In particular, they present a modified arc-eager transition system where the Left-Arc and Reduce transitions are non-monotonic: the former is used to repair invalid attachments made in previous states by replacing them with a leftward arc, and the latter allows the parser to link two words with a rightward arc that were previously left unattached due to an erroneous decision. Since the Right-Arc transition is still monotonic and leftward arcs can never be repaired because their dependent is removed from the stack by the arc-eager parser and rendered inaccessible, this approach can only repair certain kinds of mistakes: namely, it can fix erroneous rightward arcs by replacing them with a leftward arc, and connect a limited set of unattached words with rightward arcs. In addition, they argue that non-monotonicity in the training oracle can be harmful for the final accuracy and, therefore, they suggest to apply it only as a fallback component for a monotonic oracle, which is given priority over the non-monotonic one. Thus, this strategy will follow the path dictated by the monotonic oracle the majority of the time. Honnibal and Johnson (2015) present an extension of this transition system with an Unshift transition allowing it some extra flexibility to correct past errors. However, the restriction that only rightward\n2\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\narcs can be deleted, and only by replacing them with leftward arcs, is still in place. Furthermore, both versions of the algorithm are limited to projective trees.\nIn this paper, we propose a non-monotonic transition system based on the non-projective Covington parser, together with a dynamic oracle to train it with erroneous examples that will need to be repaired. Unlike the system developed in (Honnibal et al., 2013; Honnibal and Johnson, 2015), we work with full non-monotonicity. This has a twofold meaning: (1) our approach can repair previous erroneous attachments regardless of their original direction, and it can replace them either with a rightward or leftward arc as both arc transitions are non-monotonic;1 and (2) we use exclusively a non-monotonic oracle, without the interferences of monotonic decisions. These modifications are feasible because the non-projective Covington transition system is less rigid than the arc-eager algorithm, as words are never deleted from the parser’s data structures and can always be revisited, making it a better option to exploit the full potencial of non-monotonicity. To our knowledge, the presented system is the first nonmonotonic parser that can produce non-projective dependency analyses. Another novel aspect is that our dynamic oracle is approximate, i.e., based on efficiently-computable approximations of the loss due to the complexity of calculating its actual value in a non-monotonic and non-projective scenario. However, this is not a problem in practice: experimental results show how our parser and oracle can use non-monotonic actions to repair erroneous attachments, outperforming the monotonic version developed by Gómez-Rodrı́guez and Fernández-González (2015) in a large majority of the datasets tested."
    }, {
      "heading" : "2 Preliminaries",
      "text" : ""
    }, {
      "heading" : "2.1 Non-Projective Covington Transition System",
      "text" : "The non-projective Covington parser was originally defined by Covington (2001), and then recast by Nivre (2008) under the transition-based parsing framework.\n1The only restriction is that parsing must still proceed in left-to-right order. For this reason, a leftward arc cannot be repaired with a rightward arc, because this would imply going back in the sentence. The other three combinations (replacing leftward with leftward, rightward with leftward or rightward with rightward arcs) are possible.\nThe transition system that defines this parser is as follows: each parser configuration is of the form c = 〈λ1, λ2, B,A〉, such that λ1 and λ2 are lists of partially processed words, B is another list (called the buffer) containing currently unprocessed words, and A is the set of dependencies that have been built so far. Suppose that our input is a string w1 · · ·wn, whose word occurrences will be identified with their indices 1 · · ·n for simplicity. Then, the parser will start at an initial configuration cs(w1 . . . wn) = 〈[], [], [1 . . . n], ∅〉, and execute transitions chosen from those in Figure 1 until a terminal configuration of the form {〈λ1, λ2, [], A〉 ∈ C} is reached. At that point, the sentence’s parse tree is obtained from A.2\nThese transitions implement the same logic as the double nested loop traversing word pairs in the original formulation by Covington (2001). When the parser’s configuration is 〈λ1|i, λ2, j|B,A〉, we say that it is considering the focus words i and j, located at the end of the first list and at the beginning of the buffer. At that point, the parser must decide whether these two words should be linked with a leftward arc i ← j (Left-Arc transition), a rightward arc i → j (Right-Arc transition), or not linked at all (No-Arc transition). However, the two transitions that create arcs will be disallowed in configurations where this would cause a violation of the single-head constraint (a node can have at most one incoming arc) or the acyclicity constraint (the dependency graph cannot have cycles). After applying any of these three transitions, i is moved to the second list to make i − 1 and j the focus words for the next step. As an alternative, we can instead choose to execute a Shift transition which lets the parser read a new input word, placing the focus on j and j + 1.\nThe resulting parser can generate any possible dependency tree for the input, including arbitrary non-projective trees. While it runs in quadratic worst-case time, in theory worse than lineartime transition-based parsers (e.g. (Nivre, 2003; Gómez-Rodrı́guez and Nivre, 2013)), it has been shown to outspeed linear algorithms in practice, thanks to feature extraction optimizations that cannot be implemented in other parsers (Volokh and Neumann, 2012). In fact, one of the fastest dependency parsers ever reported uses this algorithm\n2In general A is a forest, but it can be converted to a tree by linking headless nodes as dependents of an artificial root node at position 0. When we refer to parser outputs as trees, we assume that this transformation is being implicitly made.\n3\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\nShift: 〈λ1, λ2, j|B,A〉 ⇒ 〈λ1 · λ2|j, [], B,A〉 No-Arc: 〈λ1|i, λ2, B,A〉 ⇒ 〈λ1, i|λ2, B,A〉 Left-Arc: 〈λ1|i, λ2, j|B,A〉 ⇒ 〈λ1, i|λ2, j|B,A ∪ {j → i}〉 only if @k | k → i ∈ A (single-head) and i→∗ j 6∈ A (acyclicity). Right-Arc: 〈λ1|i, λ2, j|B,A〉 ⇒ 〈λ1, i|λ2, j|B,A ∪ {i→ j}〉\nonly if @k | k → j ∈ A (single-head) and j →∗ i 6∈ A (acyclicity).\nFigure 1: Transitions of the monotonic Covington non-projective dependency parser. The notation i→∗ j ∈ A means that there is a (possibly empty) directed path from i to j in A.\n(Volokh, 2013)."
    }, {
      "heading" : "2.2 Monotonic Dynamic Oracle",
      "text" : "A dynamic oracle is a function that maps a configuration c and a gold tree tG to the set of transitions that can be applied in c and lead to some parse tree t minimizing the Hamming loss with respect to tG (the amount of nodes whose head is different in t and tG). Following Goldberg and Nivre (2013), we say that an arc set A is reachable from configuration c, and we write c A, if there is some (possibly empty) path of transitions from c to some configuration c′ = 〈λ1, λ2, B,A′〉, with A ⊆ A′. Then, we can define the loss of configuration c as\n`(c) = min t|c t\nL(t, tG),\nand therefore, a correct dynamic oracle will return the set of transitions\nod(c, tG) = {τ | `(c)− `(τ(c)) = 0},\ni.e., the set of transitions that do not increase configuration loss, and thus lead to the best parse (in terms of loss) reachable from c. Hence, implementing a dynamic oracle reduces to computing the loss `(c) for each configuration c.\nGoldberg and Nivre (2013) show a straightforward method to calculate loss for parsers that are arc-decomposable, i.e., those where every arc set A that can be part of a well-formed parse verifies that if c (i → j) for every i → j ∈ A (i.e., each of the individual arcs of A is reachable from a given configuration c), then c A (i.e., the set A as a whole is reachable from c). If this holds, then the loss of a configuration c equals the number of gold arcs that are not individually reachable from c, which is easy to compute in most parsers.\nGómez-Rodrı́guez and Fernández-González (2015) show that the non-projective Covington parser is not arc-decomposable because sets of individually reachable arcs may form cycles together with already-built arcs, preventing them\nfrom being jointly reachable due to the acyclicity constraint. In spite of this, they prove that a dynamic oracle for the Covington parser can be efficiently built by counting individually unreachable arcs, and correcting for the presence of such cycles. Concretely, the loss is computed as:\n`(c) = |U(c, tG)|+ nc(A ∪ I(c, tG))\nwhere I(c, tG) = {x → y ∈ tG | c (x → y)} is the set of individually reachable arcs of tG from configuration c; U(c, tG) is the set of individually unreachable arcs of tG from c, computed as tG\\I(c, tG); and nc(G) denotes the number of cycles in a graph G.\nTherefore, to calculate the loss of a configuration c, we only need to compute the two terms |U(c, tG)| and nc(A ∪ I(c, tG)). To calculate the first term, given a configuration cwith focus words i and j (i.e., c = 〈λ1|i, λ2, j|B,A〉), an arc x→ y will be in U(c, tG) if it is not in A, and at least one of the following holds:\n• j > max(x, y), (i.e., we have read too far in the string and can no longer get max(x, y) as right focus word), • j = max(x, y) ∧ i < min(x, y), (i.e., we\nhave max(x, y) as the right focus word but the left focus word has already moved left past min(x, y), and we cannot go back), • there is some z 6= 0, z 6= x such that z → y ∈ A, (i.e., we cannot create x→ y because it would violate the single-head constraint), • x and y are on the same weakly connected\ncomponent of A (i.e., we cannot create x → y due to the acyclicity constraint).\nThe second term of the loss, nc(A ∪ I(c, tG)), can be computed by first obtaining I(c, tG) as tG \\ U(c, tG). Since the graph I(c, tG) has indegree 1, the algorithm by Tarjan (1972) can then be used to find and count the cycles in O(n) time.\n4\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\nAlgorithm 1 Computation of the loss of a configuration in the monotonic oracle. 1: function LOSS(c = 〈λ1|i, λ2, j|B,A〉, tG) 2: U ← ∅ . Variable U is for U(c, tG) 3: for each x→ y ∈ (tG \\A) do 4: left ← min(x, y) 5: right ← max(x, y) 6: if j > right ∨ 7: (j = right ∧ i < left)∨ 8: (∃z > 0, z 6= x : z → y ∈ A)∨ 9: WEAKLYCONNECTED(A, x, y) then 10: U ← u ∪ {x→ y} 11: I ← tG \\U . Variable I is for I(c, tG) 12: return |U |+ COUNTCYCLES(A ∪ I )\nAlgorithm 1 shows the resulting loss calculation algorithm, where COUNTCYCLES is a function that counts the number of cycles in the given graph and WEAKLYCONNECTED returns whether two given nodes are weakly connected in A."
    }, {
      "heading" : "3 Non-Monotonic Transition System for the Covington Non-Projective Parser",
      "text" : "We now define a non-monotonic variant of the Covington non-projective parser. To do so, we allow the Right-Arc and Left-Arc transitions to create arcs between any pair of nodes without restriction. If the node attached as dependent already had a previous head, the existing attachment is discarded in favor of the new one. This allows the parser to correct erroneous attachments made in the past by assigning new heads, while still enforcing the single-head constraint, as only the most recent head assigned to each node is kept.\nTo enforce acyclicity, one possibility would be to keep the logic of the monotonic algorithm, forbidding the creation of arcs that would create cycles. However, this greatly complicates the definition of the set of individually unreachable arcs, which is needed to compute the loss bounds that will be used by the dynamic oracle. This is because a gold arc x → y may superficially seem unreachable due to forming a cycle together with arcs in A, but it might in fact be reachable if there is some transition sequence that first breaks the cycle using non-monotonic transitions to remove arcs from A, to then create x → y. We do not know of a way to characterize the conditions under which such a transition sequence exists, and thus cannot estimate the loss efficiently.\nInstead, we enforce the acyclicity constraint in a similar way to the single-head constraint: Right-Arc and Left-Arc transitions are always allowed, even if the prospective arc would create a\ncycle in A. However, if the creation of a new arc x→ y generates a cycle in A, we immediately remove the arc of the form z → x from A (which trivially exists, and is unique due to the singlehead constraint). This not only enforces the acyclicity constraint while keeping the computation of U(c, tG) simple and efficient, but also produces a straightforward, coherent algorithm (arc transitions are always allowed, and both constraints are enforced by deleting a previous arc) and allows us to exploit non-monotonicity to the maximum (we can not only recover from assigning a node the wrong head, but also from situations where previous errors together with the acyclicity constraint prevent us from building a gold arc, keeping with the principle that later decisions override earlier ones).\nIn Figure 2, we can see the resulting nonmonotonic transition system for the non-projective Covington algorithm, where, unlike the monotonic version, all transitions are allowed at each configuration, and the single-head and acyclicity constraints are kept in A by removing offending arcs."
    }, {
      "heading" : "4 Non-Monotonic Approximate Dynamic Oracle",
      "text" : "To successfully train a non-monotonic system, we need a dynamic oracle with error exploration, so that the parser will be put in erroneous states and need to apply non-monotonic transitions in order to repair them. To achieve that, we modify the dynamic oracle defined by Gómez-Rodrı́guez and Fernández-González (2015) so that it can deal with non-monotonicity. Our modification is an approximate dynamic oracle: due to the extra flexibility added to the algorithm by non-monotonicity, we do not know of an efficient way of obtaining an exact calculation of the loss of a given configuration. Instead, we use upper or lower bounds on the loss, which we empirically show to be very tight (less that 1% relative error with respect to the real loss) and are sufficient for the algorithm to provide better accuracy than the exact monotonic oracle.\nFirst of all, we adapt the computation of the set of individually unreachable arcs U(c, tG) to the new algorithm. In particular, if c has focus words i and j (i.e., c = 〈λ1|i, λ2, j|B,A〉), then an arc x → y is in U(c, tG) if it is not in A, and at least one of the following holds: • j > max(x, y), (i.e., we have read too far in\nthe string and can no longer get max(x, y) as\n5\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\nShift: 〈λ1, λ2, j|B,A〉 ⇒ 〈λ1 · λ2|j, [], B,A〉 No-Arc: 〈λ1|i, λ2, B,A〉 ⇒ 〈λ1, i|λ2, B,A〉 Left-Arc: 〈λ1|i, λ2, j|B,A〉 ⇒ 〈λ1, i|λ2, j|B, (A ∪ {j → i}) \\{x→ i ∈ A} \\ {k → j ∈ A | i→∗ k ∈ A}〉 Right-Arc: 〈λ1|i, λ2, j|B,A〉 ⇒ 〈λ1, i|λ2, j|B,A ∪ {i→ j}\n\\{x→ j ∈ A} \\ {k → i ∈ A | j →∗ k ∈ A}〉\nFigure 2: Transitions of the non-monotonic Covington non-projective dependency parser. The notation i→∗ j ∈ A means that there is a (possibly empty) directed path from i to j in A.\nright focus word), • j = max(x, y) ∧ i < min(x, y) (i.e., we\nhave max(x, y) as the right focus word but the left focus word has already moved left past min(x, y), and we cannot move it back).\nNote that, since the head of a node can change during the parsing process and arcs that produce cycles in A can be built, the two last conditions present in the monotonic scenario for computing U(c, tG) are not needed when we use nonmonotonicity and, as a consequence, the set of individually reachable arcs I(c, tG) is larger: due to the greater flexibility provided by nonmonotonicity, we can reach arcs that would be unreachable for the monotonic version.\nSince arcs that are in this new U(c, tG) are unreachable even by the non-monotonic parser, |U(c, tG)| is trivially a lower bound of the loss `(c). It is worth noting that there always exists at least one transition sequence that builds every arc in I(c, tG) at some point (although not all of them necessarily appear in the final tree, due to non-monotonicity). This can be easily shown based on the fact that the non-monotonic parser does not forbid transitions at any configuration. Thanks to this, we can can generate one such sequence by just applying the original Covington (2001) criteria (choose an arc transition whenever the focus words are linked in I(c, tG), and otherwise Shift or No-Arc depending on whether the left focus word is the first word in the sentence or not), although this sequence is not necessarily optimal in terms of loss. In such a transition sequence, the gold arcs that are missed are (1) those in U(c, tG), and (2) those that are removed by the cycle-breaking in Left-Arc and Right-Arc transitions. In practice configurations where (2) is needed are uncommon, so this lower bound is a very close approximation of the real loss, as will be seen empirically below.\nThis reasoning also helps us calculate an up-\nper bound of the loss: in a transition sequence as described, if we only build the arcs in I(c, tG) and none else, the amount of arcs removed by breaking cycles (2) cannot be larger than the number of cycles in A ∪ I(c, tG). This means that |U(c, tG)|+nc(A∪I(c, tG)) is an upper bound of the loss `(c). Note that, contrary to the monotonic case, this expression does not always give us the exact loss, for several reasons: firstly, A∪I(c, tG) can have non-disjoint cycles (a node may have different heads in A and I since attachments are not permanent, contrary to the monotonic version) and thus removing a single arc may break more than one cycle; secondly, the removed arc can be a non-gold arc of A and therefore not incur loss; and thirdly, there may exist alternative transition sequences where a cycle in A∪I(c, tG) is broken early by non-monotonic configurations that change the head of a wrongly-attached node in A to a different (and also wrong) head,3 removing the cycle before the cycle-breaking mechanism needs to come into play without incurring in extra errors. Characterizing the situations where such an alternative exists is the main difficulty for an exact calculation of the loss.\nHowever, it is possible to obtain a closer upper bound to the real loss if we consider the following: for each cycle in A ∪ I(c, tG) that will be broken by the transition sequence described above, we can determine exactly which is the arc removed by cycle-breaking (if x → y is the arc that will close the cycle according to the Covington arc-building order, then the affected arc is the one of the form z → x). The cycle can only cause the loss of a gold arc if that arc z → x is gold, which can be trivially checked. Hence, if we call cycles where that holds problematic cycles, then the expression\n3Note that, in this scenario, the new head must also be wrong because otherwise the newly created arc would be an arc of I(c, tG) (and therefore, would not be breaking a cycle in A ∪ I(c, tG)). However, replacing a wrong attachment with another wrong attachment need not increase loss.\n6\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\naverage value relative difference to loss Language lower loss pc upper upper lower pc upper upper Arabic 0.66925 0.67257 0.67312 0.68143 0.00182 0.00029 0.00587 Basque 0.58260 0.58318 0.58389 0.62543 0.00035 0.00038 0.02732 Catalan 0.58009 0.58793 0.58931 0.60644 0.00424 0.00069 0.00961 Chinese 0.56515 0.56711 0.57156 0.62921 0.00121 0.00302 0.03984 Czech 0.57521 0.58357 0.59401 0.62883 0.00476 0.00685 0.02662 English 0.55267 0.56383 0.56884 0.59494 0.00633 0.00294 0.01767 Greek 0.56123 0.57443 0.57983 0.61256 0.00731 0.00296 0.02256 Hungarian 0.46495 0.46672 0.46873 0.48797 0.00097 0.00114 0.01165 Italian 0.62033 0.62612 0.62767 0.64356 0.00307 0.00082 0.00883 Turkish 0.60143 0.60215 0.60660 0.63560 0.00060 0.00329 0.02139 Bulgarian 0.61415 0.62257 0.62433 0.64497 0.00456 0.00086 0.01233 Danish 0.67350 0.67904 0.68119 0.69436 0.00291 0.00108 0.00916 Dutch 0.69201 0.70600 0.71105 0.74008 0.00709 0.00251 0.01862 German 0.54581 0.54755 0.55080 0.58182 0.00104 0.00208 0.02033 Japanese 0.60515 0.60515 0.60515 0.60654 0.00000 0.00000 0.00115 Portuguese 0.58880 0.60063 0.60185 0.61780 0.00651 0.00067 0.00867 Slovene 0.56155 0.56860 0.57135 0.60373 0.00396 0.00153 0.01979 Spanish 0.58247 0.59119 0.59277 0.61273 0.00487 0.00089 0.01197 Swedish 0.57543 0.58636 0.58933 0.61104 0.00585 0.00153 0.01383 Average 0.59009 0.59656 0.59954 0.62416 0.00355 0.00176 0.01513\nTable 1: Average value of the different bounds and the loss, and of the relative differences from each bound to the loss, on CoNLL-XI (first block) and CoNLL-X (second block) datasets during 100,000 transitions. For each language, we show in boldface the average value and relative difference of the bound that is closer to the loss.\n|U(c, tG)|+npc(A∪I(c, tG)), where “pc” stands for problematic cycles, is a closer upper bound to the loss `(c) and the following holds:\n|U(c, tG)| ≤ `(c) ≤ |U(c, tG)|+npc(A∪I(c, tG))\n≤ |U(c, tG)|+ nc(A ∪ I(c, tG))\nAs mentioned before, unlike the monotonic approach, a node can have a different head in A than in I(c, tG) and, as a consequence, the resulting graph A ∪ I(c, tG) has maximum in-degree 2 rather than 1, and there can be overlapping cycles. Therefore, the computation of the non-monotonic terms nc(A ∪ I(c, tG)) and npc(A ∪ I(c, tG)) requires an algorithm such as the one by Johnson (1975) to find all elementary cycles in a directed graph. This runs in O((n + e)(c + 1)), where n is the number of vertices, e is the number of edges and c is the number of elementary cycles in the graph. This implies that the calculation of the two non-monotonic upper bounds is less efficient than the linear loss computation in the monotonic scenario. However, a non-monotonic algorithm that uses the lower bound as loss expression is the fastest option (even faster than the monotonic approach) as the oracle does not need to compute cycles at all, speeding up the training process.\nAlgorithm 2 shows the non-monotonic variant of Algorithm 1, where COUNTRELEVANTCYCLES is a function that counts the number of cycles or problematic cycles in the given graph,\nAlgorithm 2 Computation of the approximate loss of a non-monotonic configuration. 1: function LOSS(c = 〈λ1|i, λ2, j|B,A〉, tG) 2: U ← ∅ . Variable U is for U(c, tG) 3: for each x→ y ∈ (tG \\A) do 4: left ← min(x, y) 5: right ← max(x, y) 6: if j > right ∨ 7: (j = right ∧ i < left) then 8: U ← u ∪ {x→ y} 9: I ← tG \\U . Variable I is for I(c, tG) 10: return |U |+ COUNTRELEVANTCYCLES(A ∪ I )\ndepending on the upper bound implemented, and will return 0 in case we use the lower bound."
    }, {
      "heading" : "5 Evaluation of the loss bounds",
      "text" : "To determine how close the lower bound |U(c, tG)| and the upper bounds |U(c, tG)| + npc(A∪I(c, tG)) and |U(c, tG)|+nc(A∪I(c, tG)) are to the actual loss in practical scenarios, we use exhaustive search to calculate the real loss of a given configuration, to then compare it with the bounds. This is feasible because the lower and upper bounds allow us to prune the search space: if an upper and a lower bound coincide for a configuration we already know the loss and need not keep searching, and if we can branch to two configurations such that the lower bound of one is greater or equal than an upper bound of the other, we can discard the former as it will never lead to smaller loss than the latter. Therefore, this ex-\n7\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628\n629\n630\n631\n632\n633\n634\n635\n636\n637\n638\n639\n640\n641\n642\n643\n644\n645\n646\n647\n648\n649\n650\n651\n652\n653\n654\n655\n656\n657\n658\n659\n660\n661\n662\n663\n664\n665\n666\n667\n668\n669\n670\n671\n672\n673\n674\n675\n676\n677\n678\n679\n680\n681\n682\n683\n684\n685\n686\n687\n688\n689\n690\n691\n692\n693\n694\n695\n696\n697\n698\n699\nUnigrams L0w; L0p; L0wp; L0l; L0hw; L0hp; L0hl; L0l′w; L0l′p; L0l′ l; L0r′w; L0r′p; L0r′ l; L0h2w; L0h2p; L0h2l; L0lw; L0lp; L0ll; L0rw; L0rp; L0rl; L0wd; L0pd; L0wvr ; L0pvr ; L0wvl; L0pvl; L0wsl; L0psl; L0wsr ; L0psr ; L1w; L1p; L1wp; R0w; R0p; R0wp; R0hw; R0hp;R0hl; R0h2w; R0h2p; R0l′w; R0l′p; R0l′ l; R0lw; R0lp; R0ll; R0wd; R0pd; R0wvl; R0pvl; R0wsl; R0psl; R1w; R1p; R1wp; R2w; R2p; R2wp; CLw; CLp; CLwp; CRw; CRp; CRwp; Pairs L0wp+R0wp; L0wp+R0w; L0w+R0wp; L0wp+R0p; L0p+R0wp; L0w+R0w; L0p+R0p; R0p+R1p; L0w+R0wd; L0p+R0pd; Triples R0p+R1p+R2p; L0p+R0p+R1p; L0hp+L0p+R0p; L0p+L0l′p+R0p; L0p+L0r′p+R0p; L0p+R0p+R0l′p; L0p+L0l′p+L0lp; L0p+L0r′p+L0rp; L0p+L0hp+L0h2p; R0p+R0l′p+R0lp;\nTable 2: Feature templates. L0 and R0 denote the left and right focus words; L1, L2, . . . are the words to the left of L0 and R1, R2, . . . those to the right of R0. Xih means the head of Xi, Xih2 the grandparent, Xil and Xil′ the farthest and closest left dependents, and Xir and Xir′ the farthest and closest right dependents, respectively. CL and CR are the first and last words between L0 andR0 whose head is not in the interval [L0, R0]. Finally, w stands for word form; p for PoS tag; l for dependency label; d is the distance between L0 and R0; vl, vr are the left/right valencies (number of left/right dependents); and sl, sr the left/right label sets (dependency labels of left/right dependents).\nhaustive search with pruning guarantees to find the exact loss.\nDue to the time complexity of this process, we undertake the analysis of only the first 100,000 transitions on each dataset of the nineteen languages available from CoNLL-X and CoNLL-XI shared tasks (Buchholz and Marsi, 2006; Nivre et al., 2007). In Table 1, we present the average values for the lower bound, both upper bounds and the loss, as well as the relative differences from each bound to the real loss. After those experiments, we conclude that the lower and the closer upper bounds are a tight approximation of the loss, with both bounds incurring relative errors below 0.8% in all datasets. If we compare them, the real loss is closer to the upper bound |U(c, tG)| + npc(A ∪ I(c, tG)) in the majority of datasets (12 out of 18 languages, excluding Japanese where both bounds were exactly equal to the real loss in the whole sample of configurations). This means that the term npc(A∪I(c, tG)) provides a close approximation of the gold arcs missed by the presence of cycles in A. Regarding the upper bound |U(c, tG)|+nc(A∪I(c, tG)),\nit presents a more variable relative error, ranging from 0.1% to 4.0%.\nThus, although we do not know an algorithm to obtain the exact loss which is fast enough to be practical, any of the three studied loss bounds can be used to obtain a feasible approximate dynamic oracle with full non-monotonicity."
    }, {
      "heading" : "6 Experiments",
      "text" : "To prove the usefulness of our approach, we implement the static, dynamic monotonic and nonmonotonic oracles for the non-projective Covington algorithm and compare their accuracies on nine datasets from the CoNLL-X shared task (Buchholz and Marsi, 2006) and all datasets from the CoNLL-XI shared task (Nivre et al., 2007). For the non-monotonic algorithm, we test the three different loss expressions defined in the previous section. We train an averaged perceptron model for 15 iterations and use the same feature templates for all languages, which are listed in detail in Table 2.\nThe accuracies obtained by the non-projective Covington parser with the three available oracles are presented in Table 3. For the non-monotonic dynamic oracle, three variants are shown, one for each loss expression implemented. As we can see, the novel non-monotonic oracle improves over the accuracy of the monotonic version on 14 out of 19 languages (0.32 in UAS on average) with the best loss calculation |U(c, tG)|+nc(A∪I(c, tG)), where 6 of these improvements are statistically significant at the .05 level (Yeh, 2000). The other two loss calculation methods also achieve good results, outperforming the monotonic algorithm on 12 out of 19 datasets tested.\nThe loss expression |U(c, tG)| + nc(A ∪ I(c, tG)) obtains greater accuracy on average than the other two loss expressions, including the more adjusted upper bound that is provably closer to the real loss. This could be explained by the fact that identifying problematic cycles is a difficult task to learn for the parser, and for this reason a more straightforward approach, which tries to avoid all kinds of cycles (regardless of whether they will cost gold arcs or not), can perform better. This also leads us to hypothesize that, even if it were feasible to build an oracle with the exact loss, it would not provide practical improvements over these approximate oracles; as it appears difficult for a statistical model to learn the situations where repla-\n8\n701\n702\n703\n704\n705\n706\n707\n708\n709\n710\n711\n712\n713\n714\n715\n716\n717\n718\n719\n720\n721\n722\n723\n724\n725\n726\n727\n728\n729\n730\n731\n732\n733\n734\n735\n736\n737\n738\n739\n740\n741\n742\n743\n744\n745\n746\n747\n748\n749\n750\n751\n752\n753\n754\n755\n756\n757\n758\n759\n760\n761\n762\n763\n764\n765\n766\n767\n768\n769\n770\n771\n772\n773\n774\n775\n776\n777\n778\n779\n780\n781\n782\n783\n784\n785\n786\n787\n788\n789\n790\n791\n792\n793\n794\n795\n796\n797\n798\n799\ndynamic dynamic non-monotonic static monotonic lower pc upper upper\nLanguage UAS LAS UAS LAS UAS LAS UAS LAS UAS LAS Arabic 80.67 66.51 82.76∗ 68.48∗ 83.29∗ 69.14∗ 83.18∗ 69.05∗ 83.40† 69.29† Basque 76.55 66.05 77.49† 67.31† 74.61 65.31 74.69 65.18 74.27 64.78 Catalan 90.52 85.09 91.37∗ 85.98∗ 90.51 85.35 90.40 85.30 90.44 85.35 Chinese 84.93 80.80 85.82 82.15 86.55∗ 82.53∗ 86.29∗ 82.27∗ 86.60∗ 82.51∗ Czech 78.49 61.77 80.21∗ 63.52∗ 81.32† 64.89† 81.33† 64.81† 81.49† 65.18† English 85.35 84.29 87.47∗ 86.55∗ 88.44† 87.37† 88.23† 87.22† 88.50† 87.55† Greek 79.47 69.35 80.76 70.43 80.90 70.46 80.84 70.34 81.02∗ 70.49∗ Hungarian 77.65 68.32 78.84∗ 70.16∗ 78.67∗ 69.83∗ 78.47∗ 69.66∗ 78.65∗ 69.74∗ Italian 84.06 79.79 84.30 80.17 84.38 80.30 84.64 80.52 84.47 80.32 Turkish 81.28 70.97 81.14 71.38 80.65 71.15 80.80 71.29 80.60 71.07 Bulgarian 89.13 85.30 90.45∗ 86.86∗ 91.36† 87.88† 91.33† 87.89† 91.73† 88.26† Danish 86.00 81.49 86.91∗ 82.75∗ 86.83∗ 82.63∗ 86.89∗ 82.74∗ 86.94∗ 82.68∗ Dutch 81.54 78.46 82.07 79.26 82.78∗ 79.64∗ 82.80∗ 79.68∗ 83.02† 79.92† German 86.97 83.91 87.95∗ 85.17∗ 87.31 84.37 87.18 84.22 87.48 84.54 Japanese 93.63 92.20 93.67 92.33 94.02 92.68 94.02 92.68 93.97 92.66 Portuguese 86.55 82.61 87.45∗ 83.62∗ 87.17∗ 83.47∗ 87.12∗ 83.45∗ 87.40∗ 83.71∗ Slovene 76.76 63.53 77.86 64.43 80.39† 67.04† 80.56† 67.10† 80.47† 67.10† Spanish 79.20 76.00 80.12∗ 77.24∗ 81.36∗ 78.30∗ 81.12∗ 77.99∗ 81.33∗ 78.16∗ Swedish 87.43 81.77 88.05∗ 82.77∗ 88.20∗ 83.02∗ 88.09∗ 82.87∗ 88.36∗ 83.16∗ Average 83.48 76.75 84.46 77.92 84.67 78.18 84.63 78.12 84.74 78.24\nTable 3: Parsing accuracy (UAS and LAS, including punctuation) of the Covington non-projective parser with static, and dynamic monotonic and non-monotonic oracles on CoNLL-XI (first block) and CoNLLX (second block) datasets. For the dynamic non-monotonic oracle, we show the performance with the three loss expressions, where lower stands for the lower bound |U(c, tG)|, pc upper for the upper bound |U(c, tG)| + npc(A ∪ I(c, tG)), and upper for the upper bound |U(c, tG)| + nc(A ∪ I(c, tG)). For each language, we run five experiments with the same setup but different seeds and report the averaged accuracy. Best results for each language are shown in boldface. Statistically significant improvements (α = .05) of both dynamic oracles are marked with ∗ if they are only over the static oracle, and with † if they are over the opposite dynamic oracle too.\ncing a wrong arc with another indirectly helps due to breaking prospective cycles.\nIt is also worth mentioning that the nonmonotonic dynamic oracle with the best loss expression accomplishes an average improvement over the static version (1.26 UAS) greater than that obtained by the monotonic oracle (0.98 UAS), resulting in 13 statistically significant improvements achieved by the non-monotonic variant over the static oracle in comparison to the 12 obtained by the monotonic system. Finally, note that, despite this remarkable performance, the non-monotonic version (regardless of the loss expression implemented) has an inexplicable drop in accuracy in Basque in comparison to the other two oracles."
    }, {
      "heading" : "7 Conclusion",
      "text" : "We presented a novel, fully non-monotonic variant of the well-known non-projective Covington parser, trained with a dynamic oracle. Due to the unpredictability of a non-monotonic scenario, the real loss of each configuration cannot be computed. To overcome this, we proposed three different loss expressions that closely bound the loss and enable us to implement a practical non-monotonic\ndynamic oracle.\nOn average, our non-monotonic algorithm obtains better perfomance than the monotonic version, regardless of the loss calculation used. In particular, one of the loss expressions developed proved very promising by providing the best average accuracy, in spite of being the farthest approximation from the actual loss. On the other hand, the proposed lower bound makes the nonmonotonic system the fastest one among all dynamic oracles developed for the non-projective Covington algorithm.\nTo our knowledge, this is the first implementation of non-monotonicity for a nonprojective parsing algorithm, and the first approximate dynamic oracle that uses close, efficientlycomputable approximations of the loss, showing this to be a feasible alternative when it is not practical to compute the actual loss.\nWhile we used a perceptron classifier for our experiments, our oracle could also be used in neuralnetwork implementations of greedy transitionbased parsing (Chen and Manning, 2014; Dyer et al., 2015), providing an interesting avenue for future work.\n9\n801\n802\n803\n804\n805\n806\n807\n808\n809\n810\n811\n812\n813\n814\n815\n816\n817\n818\n819\n820\n821\n822\n823\n824\n825\n826\n827\n828\n829\n830\n831\n832\n833\n834\n835\n836\n837\n838\n839\n840\n841\n842\n843\n844\n845\n846\n847\n848\n849\n850\n851\n852\n853\n854\n855\n856\n857\n858\n859\n860\n861\n862\n863\n864\n865\n866\n867\n868\n869\n870\n871\n872\n873\n874\n875\n876\n877\n878\n879\n880\n881\n882\n883\n884\n885\n886\n887\n888\n889\n890\n891\n892\n893\n894\n895\n896\n897\n898\n899"
    } ],
    "references" : [ {
      "title" : "CoNLL-X shared task on multilingual dependency parsing",
      "author" : [ "Sabine Buchholz", "Erwin Marsi." ],
      "venue" : "Proceedings of the 10th Conference on Computational Natural Language Learning (CoNLL). pages 149–164.",
      "citeRegEx" : "Buchholz and Marsi.,? 2006",
      "shortCiteRegEx" : "Buchholz and Marsi.",
      "year" : 2006
    }, {
      "title" : "A fast and accurate dependency parser using neural networks",
      "author" : [ "Danqi Chen", "Christopher Manning." ],
      "venue" : "Proceedings of the 2014 Conference on Empirical Methods in Natural Language Processing (EMNLP). Association for Computa-",
      "citeRegEx" : "Chen and Manning.,? 2014",
      "shortCiteRegEx" : "Chen and Manning.",
      "year" : 2014
    }, {
      "title" : "A fundamental algorithm for dependency parsing",
      "author" : [ "Michael A. Covington." ],
      "venue" : "Proceedings of the 39th Annual ACM Southeast Conference. ACM, New York, NY, USA, pages 95–102.",
      "citeRegEx" : "Covington.,? 2001",
      "shortCiteRegEx" : "Covington.",
      "year" : 2001
    }, {
      "title" : "Transitionbased dependency parsing with stack long shortterm memory",
      "author" : [ "Chris Dyer", "Miguel Ballesteros", "Wang Ling", "Austin Matthews", "Noah A. Smith." ],
      "venue" : "Proceedings of the 53rd Annual Meeting of the Association for Computational",
      "citeRegEx" : "Dyer et al\\.,? 2015",
      "shortCiteRegEx" : "Dyer et al\\.",
      "year" : 2015
    }, {
      "title" : "A dynamic oracle for arc-eager dependency parsing",
      "author" : [ "Yoav Goldberg", "Joakim Nivre." ],
      "venue" : "Proceedings of COLING 2012. Association for Computational Linguistics, Mumbai, India, pages 959–976. http://www.aclweb.org/anthology/C12-1059.",
      "citeRegEx" : "Goldberg and Nivre.,? 2012",
      "shortCiteRegEx" : "Goldberg and Nivre.",
      "year" : 2012
    }, {
      "title" : "Training deterministic parsers with non-deterministic oracles",
      "author" : [ "Yoav Goldberg", "Joakim Nivre." ],
      "venue" : "Transactions of the Association for Computational Linguistics 1:403–414. http://anthology.aclweb.org/Q/Q13/Q13-1033.pdf.",
      "citeRegEx" : "Goldberg and Nivre.,? 2013",
      "shortCiteRegEx" : "Goldberg and Nivre.",
      "year" : 2013
    }, {
      "title" : "An efficient dynamic oracle for unrestricted non-projective parsing",
      "author" : [ "Carlos Gómez-Rodrı́guez", "Daniel FernándezGonzález" ],
      "venue" : "In Proceedings of the 53rd Annual Meeting of the Association for Computational Linguistics and the 7th Interna-",
      "citeRegEx" : "Gómez.Rodrı́guez and FernándezGonzález.,? \\Q2015\\E",
      "shortCiteRegEx" : "Gómez.Rodrı́guez and FernándezGonzález.",
      "year" : 2015
    }, {
      "title" : "Divisible transition systems and multiplanar dependency parsing",
      "author" : [ "Carlos Gómez-Rodrı́guez", "Joakim Nivre" ],
      "venue" : "Computational Linguistics",
      "citeRegEx" : "Gómez.Rodrı́guez and Nivre.,? \\Q2013\\E",
      "shortCiteRegEx" : "Gómez.Rodrı́guez and Nivre.",
      "year" : 2013
    }, {
      "title" : "A non-monotonic arc-eager transition system for dependency parsing",
      "author" : [ "Matthew Honnibal", "Yoav Goldberg", "Mark Johnson." ],
      "venue" : "Proceedings of the Seventeenth Conference on Computational Natural Language Learning, CoNLL 2013,",
      "citeRegEx" : "Honnibal et al\\.,? 2013",
      "shortCiteRegEx" : "Honnibal et al\\.",
      "year" : 2013
    }, {
      "title" : "An improved non-monotonic transition system for dependency parsing",
      "author" : [ "Matthew Honnibal", "Mark Johnson." ],
      "venue" : "Proceedings of the 2015 Conference on Empirical Methods in Natural Language Processing. Association for Computational",
      "citeRegEx" : "Honnibal and Johnson.,? 2015",
      "shortCiteRegEx" : "Honnibal and Johnson.",
      "year" : 2015
    }, {
      "title" : "Finding all the elementary circuits of a directed graph",
      "author" : [ "Donald B. Johnson." ],
      "venue" : "SIAM Journal on Computing 4(1):77–84. https://doi.org/10.1137/0204007.",
      "citeRegEx" : "Johnson.,? 1975",
      "shortCiteRegEx" : "Johnson.",
      "year" : 1975
    }, {
      "title" : "Characterizing the errors of data-driven dependency parsing models",
      "author" : [ "Ryan McDonald", "Joakim Nivre." ],
      "venue" : "Proceedings of the 2007 Joint Conference on Empirical Methods in Natural Language Processing and Computational Natural Language",
      "citeRegEx" : "McDonald and Nivre.,? 2007",
      "shortCiteRegEx" : "McDonald and Nivre.",
      "year" : 2007
    }, {
      "title" : "An efficient algorithm for projective dependency parsing",
      "author" : [ "Joakim Nivre." ],
      "venue" : "Proceedings of the 8th International Workshop on Parsing Technologies (IWPT 03). ACL/SIGPARSE, pages 149–160.",
      "citeRegEx" : "Nivre.,? 2003",
      "shortCiteRegEx" : "Nivre.",
      "year" : 2003
    }, {
      "title" : "Algorithms for Deterministic Incremental Dependency Parsing",
      "author" : [ "Joakim Nivre." ],
      "venue" : "Computational Linguistics 34(4):513–553. https://doi.org/10.1162/coli.07-056-R1-07-027.",
      "citeRegEx" : "Nivre.,? 2008",
      "shortCiteRegEx" : "Nivre.",
      "year" : 2008
    }, {
      "title" : "The CoNLL 2007 shared task on dependency parsing",
      "author" : [ "Joakim Nivre", "Johan Hall", "Sandra Kübler", "Ryan McDonald", "Jens Nilsson", "Sebastian Riedel", "Deniz Yuret." ],
      "venue" : "Proceedings of the CoNLL Shared Task Session of EMNLP-CoNLL 2007. pages",
      "citeRegEx" : "Nivre et al\\.,? 2007",
      "shortCiteRegEx" : "Nivre et al\\.",
      "year" : 2007
    }, {
      "title" : "Depth-first search and linear graph algorithms",
      "author" : [ "Robert Endre Tarjan." ],
      "venue" : "SIAM J. Comput. 1(2):146–160.",
      "citeRegEx" : "Tarjan.,? 1972",
      "shortCiteRegEx" : "Tarjan.",
      "year" : 1972
    }, {
      "title" : "Performance-Oriented Dependency Parsing",
      "author" : [ "Alexander Volokh." ],
      "venue" : "Doctoral dissertation, Saarland University, Saarbrücken, Germany.",
      "citeRegEx" : "Volokh.,? 2013",
      "shortCiteRegEx" : "Volokh.",
      "year" : 2013
    }, {
      "title" : "Dependency parsing with efficient feature extraction",
      "author" : [ "Alexander Volokh", "Günter Neumann." ],
      "venue" : "Birte Glimm and Antonio Krüger, editors, KI. Springer, volume 7526 of Lecture Notes in Computer Science, pages 253–256.",
      "citeRegEx" : "Volokh and Neumann.,? 2012",
      "shortCiteRegEx" : "Volokh and Neumann.",
      "year" : 2012
    }, {
      "title" : "More accurate tests for the statistical significance of result differences",
      "author" : [ "Alexander Yeh." ],
      "venue" : "Proceedings of the 18th International Conference on Computational Linguistics (COLING). pages 947–953.",
      "citeRegEx" : "Yeh.,? 2000",
      "shortCiteRegEx" : "Yeh.",
      "year" : 2000
    } ],
    "referenceMentions" : [ {
      "referenceID" : 4,
      "context" : "Training with a dynamic oracle (Goldberg and Nivre, 2012) improves robustness in these situations, but in a monotonic transition system, erroneous decisions made in the past are permanent, even when the availability of further information in later states might be useful to correct them.",
      "startOffset" : 31,
      "endOffset" : 57
    }, {
      "referenceID" : 6,
      "context" : "McDonald and Nivre (2007) show that greedy transition-based parsers lose accuracy to error propagation: a transition erroneously chosen by the greedy parser can place it in an incorrect and unknown configuration, causing more mistakes in the rest of the transition sequence.",
      "startOffset" : 0,
      "endOffset" : 26
    }, {
      "referenceID" : 4,
      "context" : "Training with a dynamic oracle (Goldberg and Nivre, 2012) improves robustness in these situations, but in a monotonic transition system, erroneous decisions made in the past are permanent, even when the availability of further information in later states might be useful to correct them. Honnibal et al. (2013) show that allowing some degree of non-monotonicity, by using a limited set of non-monotonic actions that can repair past mistakes and replace previously-built arcs, can increase the accuracy of a transition-based parser.",
      "startOffset" : 32,
      "endOffset" : 311
    }, {
      "referenceID" : 4,
      "context" : "Training with a dynamic oracle (Goldberg and Nivre, 2012) improves robustness in these situations, but in a monotonic transition system, erroneous decisions made in the past are permanent, even when the availability of further information in later states might be useful to correct them. Honnibal et al. (2013) show that allowing some degree of non-monotonicity, by using a limited set of non-monotonic actions that can repair past mistakes and replace previously-built arcs, can increase the accuracy of a transition-based parser. In particular, they present a modified arc-eager transition system where the Left-Arc and Reduce transitions are non-monotonic: the former is used to repair invalid attachments made in previous states by replacing them with a leftward arc, and the latter allows the parser to link two words with a rightward arc that were previously left unattached due to an erroneous decision. Since the Right-Arc transition is still monotonic and leftward arcs can never be repaired because their dependent is removed from the stack by the arc-eager parser and rendered inaccessible, this approach can only repair certain kinds of mistakes: namely, it can fix erroneous rightward arcs by replacing them with a leftward arc, and connect a limited set of unattached words with rightward arcs. In addition, they argue that non-monotonicity in the training oracle can be harmful for the final accuracy and, therefore, they suggest to apply it only as a fallback component for a monotonic oracle, which is given priority over the non-monotonic one. Thus, this strategy will follow the path dictated by the monotonic oracle the majority of the time. Honnibal and Johnson (2015) present an extension of this transition system with an Unshift transition allowing it some extra flexibility to correct past errors.",
      "startOffset" : 32,
      "endOffset" : 1690
    }, {
      "referenceID" : 8,
      "context" : "Unlike the system developed in (Honnibal et al., 2013; Honnibal and Johnson, 2015), we work with full non-monotonicity.",
      "startOffset" : 31,
      "endOffset" : 82
    }, {
      "referenceID" : 9,
      "context" : "Unlike the system developed in (Honnibal et al., 2013; Honnibal and Johnson, 2015), we work with full non-monotonicity.",
      "startOffset" : 31,
      "endOffset" : 82
    }, {
      "referenceID" : 2,
      "context" : "In this paper, we propose a non-monotonic transition system based on the non-projective Covington parser, together with a dynamic oracle to train it with erroneous examples that will need to be repaired. Unlike the system developed in (Honnibal et al., 2013; Honnibal and Johnson, 2015), we work with full non-monotonicity. This has a twofold meaning: (1) our approach can repair previous erroneous attachments regardless of their original direction, and it can replace them either with a rightward or leftward arc as both arc transitions are non-monotonic;1 and (2) we use exclusively a non-monotonic oracle, without the interferences of monotonic decisions. These modifications are feasible because the non-projective Covington transition system is less rigid than the arc-eager algorithm, as words are never deleted from the parser’s data structures and can always be revisited, making it a better option to exploit the full potencial of non-monotonicity. To our knowledge, the presented system is the first nonmonotonic parser that can produce non-projective dependency analyses. Another novel aspect is that our dynamic oracle is approximate, i.e., based on efficiently-computable approximations of the loss due to the complexity of calculating its actual value in a non-monotonic and non-projective scenario. However, this is not a problem in practice: experimental results show how our parser and oracle can use non-monotonic actions to repair erroneous attachments, outperforming the monotonic version developed by Gómez-Rodrı́guez and Fernández-González (2015) in a large majority of the datasets tested.",
      "startOffset" : 88,
      "endOffset" : 1570
    }, {
      "referenceID" : 12,
      "context" : "(Nivre, 2003; Gómez-Rodrı́guez and Nivre, 2013)), it has been shown to outspeed linear algorithms in practice, thanks to feature extraction optimizations that cannot be implemented in other parsers (Volokh and Neumann, 2012).",
      "startOffset" : 0,
      "endOffset" : 47
    }, {
      "referenceID" : 7,
      "context" : "(Nivre, 2003; Gómez-Rodrı́guez and Nivre, 2013)), it has been shown to outspeed linear algorithms in practice, thanks to feature extraction optimizations that cannot be implemented in other parsers (Volokh and Neumann, 2012).",
      "startOffset" : 0,
      "endOffset" : 47
    }, {
      "referenceID" : 17,
      "context" : "(Nivre, 2003; Gómez-Rodrı́guez and Nivre, 2013)), it has been shown to outspeed linear algorithms in practice, thanks to feature extraction optimizations that cannot be implemented in other parsers (Volokh and Neumann, 2012).",
      "startOffset" : 198,
      "endOffset" : 224
    }, {
      "referenceID" : 2,
      "context" : "1 Non-Projective Covington Transition System The non-projective Covington parser was originally defined by Covington (2001), and then recast by Nivre (2008) under the transition-based parsing framework.",
      "startOffset" : 17,
      "endOffset" : 124
    }, {
      "referenceID" : 2,
      "context" : "1 Non-Projective Covington Transition System The non-projective Covington parser was originally defined by Covington (2001), and then recast by Nivre (2008) under the transition-based parsing framework.",
      "startOffset" : 17,
      "endOffset" : 157
    }, {
      "referenceID" : 2,
      "context" : "1 Non-Projective Covington Transition System The non-projective Covington parser was originally defined by Covington (2001), and then recast by Nivre (2008) under the transition-based parsing framework. The only restriction is that parsing must still proceed in left-to-right order. For this reason, a leftward arc cannot be repaired with a rightward arc, because this would imply going back in the sentence. The other three combinations (replacing leftward with leftward, rightward with leftward or rightward with rightward arcs) are possible. The transition system that defines this parser is as follows: each parser configuration is of the form c = 〈λ1, λ2, B,A〉, such that λ1 and λ2 are lists of partially processed words, B is another list (called the buffer) containing currently unprocessed words, and A is the set of dependencies that have been built so far. Suppose that our input is a string w1 · · ·wn, whose word occurrences will be identified with their indices 1 · · ·n for simplicity. Then, the parser will start at an initial configuration cs(w1 . . . wn) = 〈[], [], [1 . . . n], ∅〉, and execute transitions chosen from those in Figure 1 until a terminal configuration of the form {〈λ1, λ2, [], A〉 ∈ C} is reached. At that point, the sentence’s parse tree is obtained from A.2 These transitions implement the same logic as the double nested loop traversing word pairs in the original formulation by Covington (2001). When the parser’s configuration is 〈λ1|i, λ2, j|B,A〉, we say that it is considering the focus words i and j, located at the end of the first list and at the beginning of the buffer.",
      "startOffset" : 17,
      "endOffset" : 1432
    }, {
      "referenceID" : 16,
      "context" : "(Volokh, 2013).",
      "startOffset" : 0,
      "endOffset" : 14
    }, {
      "referenceID" : 4,
      "context" : "Following Goldberg and Nivre (2013), we say that an arc set A is reachable from configuration c, and we write c A, if there is some (possibly empty) path of transitions from c to some configuration c′ = 〈λ1, λ2, B,A′〉, with A ⊆ A′.",
      "startOffset" : 10,
      "endOffset" : 36
    }, {
      "referenceID" : 3,
      "context" : "Goldberg and Nivre (2013) show a straightforward method to calculate loss for parsers that are arc-decomposable, i.",
      "startOffset" : 0,
      "endOffset" : 26
    }, {
      "referenceID" : 3,
      "context" : "Goldberg and Nivre (2013) show a straightforward method to calculate loss for parsers that are arc-decomposable, i.e., those where every arc set A that can be part of a well-formed parse verifies that if c (i → j) for every i → j ∈ A (i.e., each of the individual arcs of A is reachable from a given configuration c), then c A (i.e., the set A as a whole is reachable from c). If this holds, then the loss of a configuration c equals the number of gold arcs that are not individually reachable from c, which is easy to compute in most parsers. Gómez-Rodrı́guez and Fernández-González (2015) show that the non-projective Covington parser is not arc-decomposable because sets of individually reachable arcs may form cycles together with already-built arcs, preventing them from being jointly reachable due to the acyclicity constraint.",
      "startOffset" : 0,
      "endOffset" : 591
    }, {
      "referenceID" : 15,
      "context" : "Since the graph I(c, tG) has indegree 1, the algorithm by Tarjan (1972) can then be used to find and count the cycles in O(n) time.",
      "startOffset" : 58,
      "endOffset" : 72
    }, {
      "referenceID" : 2,
      "context" : "Thanks to this, we can can generate one such sequence by just applying the original Covington (2001) criteria (choose an arc transition whenever the focus words are linked in I(c, tG), and otherwise Shift or No-Arc depending on whether the left focus word is the first word in the sentence or not), although this sequence is not necessarily optimal in terms of loss.",
      "startOffset" : 84,
      "endOffset" : 101
    }, {
      "referenceID" : 10,
      "context" : "Therefore, the computation of the non-monotonic terms nc(A ∪ I(c, tG)) and npc(A ∪ I(c, tG)) requires an algorithm such as the one by Johnson (1975) to find all elementary cycles in a directed graph.",
      "startOffset" : 134,
      "endOffset" : 149
    }, {
      "referenceID" : 0,
      "context" : "Due to the time complexity of this process, we undertake the analysis of only the first 100,000 transitions on each dataset of the nineteen languages available from CoNLL-X and CoNLL-XI shared tasks (Buchholz and Marsi, 2006; Nivre et al., 2007).",
      "startOffset" : 199,
      "endOffset" : 245
    }, {
      "referenceID" : 14,
      "context" : "Due to the time complexity of this process, we undertake the analysis of only the first 100,000 transitions on each dataset of the nineteen languages available from CoNLL-X and CoNLL-XI shared tasks (Buchholz and Marsi, 2006; Nivre et al., 2007).",
      "startOffset" : 199,
      "endOffset" : 245
    }, {
      "referenceID" : 0,
      "context" : "To prove the usefulness of our approach, we implement the static, dynamic monotonic and nonmonotonic oracles for the non-projective Covington algorithm and compare their accuracies on nine datasets from the CoNLL-X shared task (Buchholz and Marsi, 2006) and all datasets from the CoNLL-XI shared task (Nivre et al.",
      "startOffset" : 227,
      "endOffset" : 253
    }, {
      "referenceID" : 14,
      "context" : "To prove the usefulness of our approach, we implement the static, dynamic monotonic and nonmonotonic oracles for the non-projective Covington algorithm and compare their accuracies on nine datasets from the CoNLL-X shared task (Buchholz and Marsi, 2006) and all datasets from the CoNLL-XI shared task (Nivre et al., 2007).",
      "startOffset" : 301,
      "endOffset" : 321
    }, {
      "referenceID" : 18,
      "context" : "05 level (Yeh, 2000).",
      "startOffset" : 9,
      "endOffset" : 20
    }, {
      "referenceID" : 1,
      "context" : "While we used a perceptron classifier for our experiments, our oracle could also be used in neuralnetwork implementations of greedy transitionbased parsing (Chen and Manning, 2014; Dyer et al., 2015), providing an interesting avenue for future work.",
      "startOffset" : 156,
      "endOffset" : 199
    }, {
      "referenceID" : 3,
      "context" : "While we used a perceptron classifier for our experiments, our oracle could also be used in neuralnetwork implementations of greedy transitionbased parsing (Chen and Manning, 2014; Dyer et al., 2015), providing an interesting avenue for future work.",
      "startOffset" : 156,
      "endOffset" : 199
    } ],
    "year" : 2017,
    "abstractText" : "Restricted non-monotonicity has been shown beneficial for the projective arceager dependency parser in previous research, as posterior decisions can repair mistakes made in previous states due to the lack of information. In this paper, we propose a novel, fully non-monotonic transition system based on the non-projective Covington algorithm. As a non-monotonic system requires exploration of erroneous actions during the training process, we develop several non-monotonic variants of the recently defined dynamic oracle for the Covington parser, based on tight approximations of the loss. Experiments on datasets from the CoNLL-X and CoNLL-XI shared tasks show that a non-monotonic dynamic oracle outperforms the monotonic version in the majority of languages.",
    "creator" : "LaTeX with hyperref package"
  }
}