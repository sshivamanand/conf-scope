{
  "name" : "12.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Time Expression Analysis and Recognition Using Syntactic Types and Simple Heuristic Rules",
    "authors" : [ ],
    "emails" : [ ],
    "sections" : [ {
      "heading" : null,
      "text" : "1 000\n011\n012\n013\n014\n015\n016\n017\n018\n019\n020\n021\n022\n023\n024\n025\n026\n027\n028\n029\n030\n031\n032\n033\n034\n035\n036\n037\n038\n039\n040\n041\n042\n043\n044\n045\n046\n047\n048\n049\n061\n062\n063\n064\n065\n066\n067\n068\n069\n070\n071\n072\n073\n074\n075\n076\n077\n078\n079\n080\n081\n082\n083\n084\n085\n086\n087\n088\n089\n090\n091\n092\n093\n094\n095\n096\n097\n098\n099"
    }, {
      "heading" : "1 Introduction",
      "text" : "Time expression plays an important role in information retrieval and many applications in natural language processing (Alonso et al., 2011). Recognizing time expressions from free text has attracted considerable attention since last decade (Verhagen et al., 2007, 2010; UzZaman et al., 2013).\nTime expression recognition main involves two\nkinds of methods, rule-based method (Strotgen and Gertz, 2013; Strötgen and Gertz, 2010; Chang and Manning, 2012) and machine learning based method (Bethard, 2013; Lee et al., 2014). Rulebased time expression taggers could recognize most time expressions with carefully designed rules, while they could not recognize the time expressions that are not matched in any explicit rule. Machine learning based methods require training data for good performance, and may not recognize less frequent time expressions.\nIn our study, we analyze the time expressions in four datasets: TimeBank (Pustejovsky et al., 2003b), Gigaword (Parker et al., 2011), WikiWars (Mazur and Dale, 2010), and Tweets. From the analysis, we make four observations. First, most time expressions are very short, with 80% of time expressions containing no more than three tokens. Second, the vocabulary used to express time information is very small, with a small group of keywords. Third, at least 93% of time expressions contain at least one time token. The last observation is that words in time expressions demonstrate similar syntactic behaviors. All the observations relate to the principle of least effort (Zipf, 1949). That is, people will act under the least effort in order to minimize the cost of energy at both individual level and collective level to language usage (Zipf, 1949). Time expression is part of language and acts as an interface of communication. Short expressions, small vocabulary, occurrence, and similar syntactic behaviors all reduce the cost of energy required to communicate.\nBased on the observations, we propose a typebased approach, named SynTime (‘Syn’ is from Syntactic), to recognize time expressions. Specifically, we define 3 main types, namely time token, modifier, and numeral, to group time-related regular expressions over tokens. Time tokens are the words that explicitly express time information,\n2\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\nsuch as time units (e.g., ‘month’). Modifiers modify time tokens; they may appear before or after time tokens, e.g., ‘several’ and ‘ago’ in ‘several months ago.’ Numeral are ordinals and numbers. From free text SynTime first identifies time tokens, and then recognizes modifiers and numerals.\nNaturally, SynTime is a rule-based tagger. The key difference between SynTime and other rulebased taggers lies in the way of defining types and the way of designing rules. The type definition of SynTime is inspired by part-of-speech in which “linguists group some words of language into classes (sets) which show similar syntactic behaviour.” (Manning and Schutze, 1999) SynTime defines types for tokens according to their syntactic behaviors. Other rule-based taggers define types for tokens based on their semantic meaning. For example, SUTime defines 5 semantic modifier types, such as frequency modifiers; 1 while SynTime defines 5 syntactic modifier types, such as modifiers that appear before time tokens. (see Section 4.1 for details.) Accordingly, other rule-based taggers design rules for each type based on their meanings and deal with each type separately. SynTime designs rules based on the token types and their relative positions in time expressions. That is why we call SynTime a type-based approach. More importantly, other rule-based taggers design rules in a fixed way, including fixed length and fixed position. In contrast, SynTime designs rules in a heuristic method based on the idea of boundary expansion. The heuristic rules are quite simple that it makes SynTime much more flexible, expansible, and extremely light-weight, leading SynTime to run in real time.\nWe evaluate SynTime against three state-of-theart baselines, namely, HeidelTime, SUTime, and UWTime, on three datasets, namely, TimeBank, WikiWars, and Tweets. TimeBank and WikiWars are benchmark datasets for time expression extraction. 2 Experiment results show that SynTime significantly outperforms the three state-of-the-art methods on TimeBank and Tweets datasets. On WikiWars, SynTime achieves comparable results. More importantly, SynTime achieves the best recalls on all three datasets and exceptionally good results on Tweets dataset. To sum up, we make the following contributions.\n1 https://github.com/stanfordnlp/CoreNLP/tree/\nmaster/src/edu/stanford/nlp/time/rules 2Gigaword dataset was not used in our experiments because the labels in the dataset was automatically generated by other taggers which may not be the ground truth labels.\n• We analyze the time expressions from four datasets and make four observations. The observations provide evidence in terms of time expression for the principle of least effort (Zipf, 1949). We design SynTime based on the observations.\n• We propose a type-based time expression tagger, SynTime, that defines syntactic types and designs simple heuristic rules for time expression recognition. SynTime provides an idea to simplify rule-based time tagger.\n• We conduct experiments on three datasets, and the results demonstrate the effectiveness of SynTime against state-of-the-art baselines."
    }, {
      "heading" : "2 Related Work",
      "text" : "Many research on time expression identification are reported in TempEval exercises (Verhagen et al., 2007, 2010; UzZaman et al., 2013). The task is divided into two subtasks: Recognition and normalization.\nRule-based Time Expression Recognition. Rule-based time taggers like GUTime, HeidelTime, and SUTime, predefine time-related words and rules (Verhagen et al., 2005; Strötgen and Gertz, 2010; Chang and Manning, 2012). HeidelTime (Strötgen and Gertz, 2010) hand-crafts rules with time resources like weekdays and months, and leverages language clues like part-of-speech to identify time expression. SUTime (Chang and Manning, 2012) designs fixed rules using a cascade finite automata (Hobbs et al., 1997) on regular expressions over tokens (Chang and Manning, 2014). It first identifies individual words, then expands them to chunks, and finally to time expressions. Rule-based taggers achieve very good results in TempEval exercises.\nSynTime is also a rule-based tagger while the key differences between SynTime and other rulebased taggers are the way of defining types and of designing rules. SynTime defines types for tokens according to their syntactic behaviors and designs rules in a heuristic way.\nMachine Learning based Method. Machine learning based methods extract features from the text and apply statistical models on the features for recognizing time expressions. Example features include character features, word features, syntactic features, semantic features, and gazetteer\n3\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\nfeatures (Llorens et al., 2010; Filannino et al., 2013; Bethard, 2013). The statistical models include Markov Logic Network, Logistic Regression, Support Vector Machines, Maximum Entropy, and Conditional Random Fields (Llorens et al., 2010; UzZaman and Allen, 2010; Filannino et al., 2013; Bethard, 2013). Some models obtain good performance, and even achieve the highest F1 of 82.71% on strict match in TempEval3 (Bethard, 2013).\nOutside TempEval exercises, Angeli et al. leverage compositional grammar and employ a EM-style approach to learn a latent parser for time expression recognition (Angeli et al., 2012). In the method named UWTime, Lee et al. handcraft a Combinatory Categorial Grammar (CCG) (Steedman, 1996) to define a set of lexicon with rules and use L1-regularization to learn linguistic context (Lee et al., 2014). The two methods explicitly use linguistic information. Particulaly in (Lee et al., 2014), CCG could capture rich structure information of language, similar to the rule-based methods. Tabassum et al. focus on resolving the dates in tweets, and use distant supervision to recognize time expressions (Tabassum et al., 2016). They use five time types and assign one of them to each word, which is similar to SynTime in the way of defining types over tokens. However, they focus only on the type of date, while SynTime can recoginize all the time expressions and does not involve learning and runs in real time.\nTime Expression Normalization. Methods in TempEval exercises design rules for time expression normalization (Verhagen et al., 2005; Strötgen and Gertz, 2010; Llorens et al., 2010; UzZaman and Allen, 2010; Filannino et al., 2013; Bethard, 2013). Because the rule systems has high similarity, Llorens et al. suggest to construct a large knowledge base as a public resource for the task (Llorens et al., 2012). Some researchers treat the normalization process as a learning task and use machine learning methods (Lee et al., 2014; Tabassum et al., 2016). Lee et al. (Lee et al., 2014) use AdaGrad algorithm (Duchi et al., 2011) and Tabassum et al. (Tabassum et al., 2016) use a loglinear algorithm to normalize the time expressions.\nSynTime focuses only on time expression recognition, and the normalization could be achieved by using methods similar to the existing rule systems, because they are highly similar (Llorens et al., 2012)."
    }, {
      "heading" : "3 Time Expression Analysis",
      "text" : ""
    }, {
      "heading" : "3.1 Dataset",
      "text" : "We conduct analysis on four datasets: TimeBank, Gigaword, WikiWars, and Tweets. TimeBank (Pustejovsky et al., 2003b) is a benchmark dataset in TempEval series (Verhagen et al., 2007, 2010; UzZaman et al., 2013), consisting of 183 news articles. Gigaword (Parker et al., 2011) is a large automatically labeled dataset with 2,452 news articles and is used in TempEval-3. WikiWars dataset is derived from Wikipedia articles about wars (Mazur and Dale, 2010). Tweets is our manually annotated dataset with 942 tweets of which each contains at least one time expression. Table 1 summarizes the datasets."
    }, {
      "heading" : "3.2 Observation",
      "text" : "From the four datasets, we analyze their time expressions and make four observations.\nObservation 1 Time expressions are very short. More than 80% of time expressions contain no more than three words and more than 90% contain no more than four words.\nFigure 1 plots the length distribution of time expressions. Although the texts are collected from different sources (i.e., news articles, Wikipedia articles, and tweets) and vary in sizes, the length of time expressions follow a similar distribution. In particular, the one-word time expressions range\n4\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\nTable 2: The percentage of time expressions that contain at least one time token, and the average length of time expressions.\nDataset Percent Average Length TimeBank 95.15 2.00 Gigaword 97.69 1.70 WikiWars 93.18 2.38 Tweets 97.81 1.51\nTable 3: Number of distinct words and number of distinct time tokens in time expressions.\nDataset #Words #Time Tokens TimeBank 130 64 Gigaword 214 80 WikiWars 224 74 Tweets 107 64\nfrom 36.23% in WikiWars to 62.91% in Tweets. In informal communication people tend to use words in minimum length to express time information. The third column in Table 2 reports the average length of time expressions. On average, time expressions contain about two words.\nObservation 2 Only a small group of time-related keywords are used to express time information.\nFrom the time expressions in all four datasets, we observe that the group of keywords used to express time information is small.\nTable 3 reports the number of distinct words and of distinct time tokens. The words/tokens are manually normalized before counting and their variants are ignored. For example, ‘month’ and ‘5mons’ are counted as one token ‘month.’ Numerals in the counting are ignored. Despite the different sizes in the four datasets, the numbers of distinct time tokens are comparable.\nObservation 3 More than 93% of time expressions contain at least one time token.\nThe second column in Table 2 reports the percentage of time expressions that contain at least one time token. Observe that at least 93.18% of time expressions contain time token(s), which suggests that to recognize the time expressions, it is essential to recognize their time tokens.\nObservation 4 Part-of-speech (POS) could not distinguish time expressions from common words, but within time expressions, POS can help distinguish their constituents.\nFor each dataset we list the top 10 POS tags that appear in time expressions, and their percentages over whole text. Among the 40 tags (10 × 4 datasets), 36 have percentage lower than 10%; other 4 are CD. This indicates that POS could not provide enough information to distinguish time expressions from common words. However, the most common POS tags in time expressions are NN*, JJ, RB, CD, and DT. Within time expressions, the time tokens usually have NN* and RB, the modifiers have JJ and RB, and the numerals have CD. This observation indicates that for the time expressions, their similar constituents behave in similar syntactic way. When seeing this, we realize that this is exactly how linguists define part-of-speech for language. 3 The definition of POS for language inspires us to define a syntactic type system for the time expression, part of language.\nThe four observations all relate to the principle of least effort (Zipf, 1949). That is, people will act under the least effort so as to minimize the cost of energy at both individual and collective level to the language usage (Zipf, 1949). Time expression is part of language and acts as an interface of communication. Short expressions, small vocabulary, occurrence, and similar syntactic behaviors all reduce the cost of energy required to communicate.\nTo summarize: On average, a time expression contains two tokens of which one is time token and the other is modifier/numeral, and the size of time tokens is small. To recognize a time expression, therefore, we first recognize the time token, then recognize the modifier/numeral."
    }, {
      "heading" : "4 SynTime: Syntactic Types and Simple Heuristic Rules",
      "text" : "Figure 2 shows the overview of SynTime. Shown in the left-hand side of the figure, SynTime is initialized with regular expressions over tokens. After initialization SynTime can be directly applied on text, without training. On the other hand, SynTime can be easily expanded by adding timerelated token regular expressions from training text. The expansion enables SynTime to recognize time expressions in text from different types and from different domains.\nShown in the right-hand side of Figure 2, SynTime recognizing time expression includes three main steps. In the first step, SynTime identifies\n3“linguists group some words of language into classes (sets) which show similar syntactic behaviour.” (Manning and Schutze, 1999)\n5\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\nFigure 2: Overview of SynTime. Left-hand side shows the construction of SynTime, with initialization using token regular expressions, and optional expansion using training text. Right-hand side shows the main steps that SynTime recognizes time expressions.\nthe time tokens from POS-tagged raw text. Then around the time tokens SynTime searches for modifiers and numerals to form time segments. In the last step, SynTime transforms the time segments to time expressions."
    }, {
      "heading" : "4.1 SynTime Construction",
      "text" : "We define a syntactic type system for time expression, specifically, 15 types for time tokens, 5 types for modifiers, and 1 type for numeral.\nTime Token. We define 15 types for the time tokens and use their names similar to JodaTime classes: 4 DECADE (-), YEAR (-), SEASON (5), MONTH (12), WEEK (7), DATE (-), TIME (-), DAY TIME (27), TIMELINE (12), HOLIDAY (20), PERIOD (9), DURATION (-), TIME UNIT (15), TIME ZONE (6), and ERA (2). Number in ‘()’ indicates the number of distinct tokens in this type, without counting variants. ‘-’ indicates the type involves changing digits and cannot be counted.\nModifier. We define 3 types for the modifiers according to their possible positions relative to time tokens. Modifiers that appear before time tokens are PREFIX (48); modifiers after time tokens are SUFFIX (2). LINKAGE (4) link two time tokens. Besides, we define 2 special modifier types, COMMA (1) for comma ‘,’ and IN ARTICLE (2) for indefinite articles ‘a’ and ‘an.’\n4 http://www.joda.org/joda-time/\nTimeML (Pustejovsky et al., 2003a) and TimeBank (Pustejovsky et al., 2003b) do not treat most prepositions like ‘on’ as a part of time expressions. Thus SynTime does not collect those prepositions.\nNumeral. Number in time expressions can be a time token e.g., ‘10’ in ‘October 10, 2016,’ or a modifier e.g., ‘10’ in ‘10 days.’ We define NUMERAL (-) for the ordinals and numbers.\nSynTime Initialization. The token regular expressions for initializing SynTime are collected from SUTime,5 a state-of-the-art rule-based tagger that achieved the highest recall in TempEval3 (Chang and Manning, 2012, 2013). Specifically, we collect from SUTime only the tokens and the regular expressions over tokens, and discard its other rules of recognizing full time expressions."
    }, {
      "heading" : "4.2 Time Expression Recognition",
      "text" : "On the types, SynTime designs simple heuristic rules to recognize time expressions. The recognition process includes three main steps: (1) Time token identification, (2) time segment identification, and (3) time expression extraction."
    }, {
      "heading" : "4.2.1 Time Token Identification",
      "text" : "Identifying Time tokens is simple and straightforward, through matching of string and regular expression. Some words might cause ambiguity. For example ‘May’ could be a modal verb, or the fifth month of year. To filter out the ambiguous words, we use POS information. In implementation, we use Stanford POS Tagger, 6 and the POS tags for matching the instances of SynTime types are based on our Observation 4 in Section 3.2."
    }, {
      "heading" : "4.2.2 Time Segment Identification",
      "text" : "The task of time segment identification is to search the surrounding of each time token identified in previous step for the modifiers and numerals, then gather the time token with its modifiers and numerals to form a time segment. The searching is under simple heuristic rules in which the key idea is to expand the time token’s boundaries.\nAt first, each time token is a time segment. If it is either a PERIOD or DURATION, then no need to further search. Otherwise, search its left and its right for modifiers and numerals. For the left searching, if encounter a PREFIX or NUMERAL or IN ARTICLE, then continue searching. For the right\n5 https://github.com/stanfordnlp/CoreNLP/tree/\nmaster/src/edu/stanford/nlp/time/rules 6 http://nlp.stanford.edu/software/tagger.shtml\n6\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\nthe/PREFIX last/PREFIX week/TIME_UNIT … said Friday/WEEK s1 s2\ne1 s1\n(a) Stand-alone time segment to time expression.\ns1 s2\ns1\nthe/PREFIX third/NUMERAL quarter/TIME_UNIT of/PREFIXT 1984/YEAR\n(b) Merge adjacent time segments.\ns1 s2\ns1\nJanuary/MONTH 13/NUMERAL 1951/YEAR\n(c) Merge overlapping time segments.\ns1 s2\ns1\nJune/MONTH 30/NUMERAL,/COMMA 1990/YEAR\n(d) Merge overlapping time segments.\ns1 s2\ne1 s1\n8/NUMERAL to/LINKAGE 20/NUMERAL days/TIME_UNIT\n(e) Dependent time segment and time segment.\nFigure 3: Example time segments and time expressions. The labels above are from time segment identification; the labels below are for time expression extraction.\nsearching, if encounter a SUFFIX or NUMERAL, then continue searching. Both the left and the right searching will stop when reaching a COMMA or LINKAGE or non-modifier/numeral word. The left searching will not exceed the previous time token; the right searching will not exceed the next time token. A time segment consists of exactly one time token, and zero or more modifiers/numerals.\nA special kind of time segments do not contain any time token; they depend on other time segments next to them. For example, in ‘8 to 20 days,’ ‘to 20 days’ is a time segment, and ‘8 to’ forms a dependent time segment. (see Figure 3(e).)"
    }, {
      "heading" : "4.2.3 Time Expression Extraction",
      "text" : "The task of time expression extraction is to extract time expressions from the identified time segments in which the core step is to determine whether to merge two adjacent or overlapping time segments into a new time segment.\nWe scan the time segments in a sentence from beginning to the end. A stand-alone time segment is a time expression. (see Figure 3(a).) The main focus is to deal with two or more time segments that are adjacent and overlapping. If two time segments s1 and s2 are adjacent, merge them to form\na new time segment s1. (see Figure 3(b).) Consider that s1 and s2 overlap at a shared boundary. According to our time segment identification, the shared boundary could be a modifier or a numeral. If the word at the shared boundary is neither a COMMA nor a LINKAGE, then merge s1 and s2. (see Figure 3(c).) If the word is a LINKAGE, then extract s1 as a time expression and continue scanning. When the shared boundary is a COMMA, merge s1 and s2 only if the COMMA’s previous token and its next token satisfy the three conditions: (1) The previous token is a time token or a NUMERAL; (2) the next token is a time token; and (3) the types of the previous token and of the next token are not the same. (see Figure 3(d).)"
    }, {
      "heading" : "4.3 SynTime Expansion",
      "text" : "SynTime expansion requires the words to be added to be annotated manually. We apply the initial SynTime on the time expressions from training text and list the words that are not covered. Whether the uncovered words are added to SynTime is manually determined. The rule for determination is that the added words can not cause ambiguity and should be generic. WikiWars dataset contains a few examples like this: ‘The time Arnold reached Quebec City.’ Words in this example are extremely descriptive, and we do not collect them. In tweets, on the other hand, people may use words’ abbreviations and informal variants, for example, ‘2day’ and ‘tday’ are popular spellings of ‘today.’ Such kind of abbreviations and informal variants will be collected.\nAccording to our observations, not many words are used to express time information, the manual addition of keywords thus will not cost much. In addition, we find that even in tweets people tend to use formal words. In the Twitter word clusters trained from 56 million English tweets, 7 the most often used words are the formal words, and their frequencies are much greater than informal words’. The cluster of ‘today,’ 8 for example, its most often use is the formal one, ‘today,’ which appears 1,220,829 times; while its second most often use ‘2day’ appears only 34,827 times. The low rate of informal words (e.g., about 3% in ‘today’ cluster) suggests that even in informal environment the manual keyword addition costs little.\n7 http://www.cs.cmu.edu/˜ark/TweetNLP/cluster_\nviewer.html 8 http://www.cs.cmu.edu/˜ark/TweetNLP/paths/ 01111110010.html\n7\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628\n629\n630\n631\n632\n633\n634\n635\n636\n637\n638\n639\n640\n641\n642\n643\n644\n645\n646\n647\n648\n649\n650\n651\n652\n653\n654\n655\n656\n657\n658\n659\n660\n661\n662\n663\n664\n665\n666\n667\n668\n669\n670\n671\n672\n673\n674\n675\n676\n677\n678\n679\n680\n681\n682\n683\n684\n685\n686\n687\n688\n689\n690\n691\n692\n693\n694\n695\n696\n697\n698\n699"
    }, {
      "heading" : "5 Experiments",
      "text" : "We conduct experiments on three datasets and compare SynTime with three state-of-the-art baselines: HeidelTime, SUTime, and UWTime. For SynTime we report the results of its two versions: SynTime-I and SynTime-E. SynTime-I is the initial version, and SynTime-E is the expanded version by adding keywords to SynTime-I."
    }, {
      "heading" : "5.1 Experiment Setting",
      "text" : "Datasets. We use two benchmark datasets, TimeBank and WikiWars, and one manually labeled Tweets dataset. Section 3.1 shows details of TimeBank and WikiWars datasets. The Tweets dataset is collected from Twitter. We randomly sample 4000 tweets and use SUTime to tag them. 942 tweets of which each contains at least one time expression. From the remaining 3,058 tweets, we randomly sample 500 and manually annotate them, and find that only 15 tweets contain time expressions. Thus we roughly consider that SUTime misses about 3% time expressions in tweets. We then manually annotate the 942 tweets, according to the standards of TimeML and TimeBank, and get 1,127 manually labeled time expressions. For the 942 tweets, we randomly sample 200 tweets as test set, and the rest 742 as training set, because a baseline UWTime requires training.\nBaseline Methods. We compare SynTime with methods: HeidelTime (Strötgen and Gertz, 2010), SUTime (Chang and Manning, 2012), and UWTime (Lee et al., 2014). HeidelTime and SUTime both are rule-based methods, and UWTime is a learning method. When training UWTime on Tweets, we try two settings: (1) Train with only Tweets training set; (2) train with TimeBank and Tweets training set. The second setting achieves slightly better result and we report that result.\nEvaluation Metrics. We follow TempEval-3 and use their evaluation toolkit 9 to report Precision, Recall, and F1 in terms of strict match and relaxed match (UzZaman et al., 2013)."
    }, {
      "heading" : "5.2 Experiment Result",
      "text" : "Table 4 reports the overall perfermance. Among the 18 measures, SynTime-I and SynTime-E achieve 12 best results and 13 second best results. Except the strict match on WikiWars dataset,\n9 http://www.cs.rochester.edu/˜naushad/tempeval3/\ntools.zip\nboth SynTime-I and SynTime-E achieve F1 above 91%. For the relaxed match on all three datasets, SynTime-I and SynTime-E achieve recalls above 92%. The high recalls are consistent with our observation that at least 93.18% of time expressions contain time token(s). (see Table 2.) This indicates that SynTime covers most of time tokens. On Tweets dataset, SynTime-I and SynTime-E achieve exceptionally good performance. Their F1 reach 91.74% with 11.37% improvement in strict match and 95.87% with 6.33% improvement in relaxed match. The reasons are that in informal environment people tend to use time expressions in minimum length, (62.91% of one-word time expressions in Tweets; see Figure 1.) the size of time keywords is small, (only 60 distinct time tokens; see Table 3.) and even in tweets people tend to use formal words. (see Section 4.3 for our finding from Twitter word clusters.) For precision, SynTime achieves comparable results in strict match and performs slightly poorer in relaxed match."
    }, {
      "heading" : "5.2.1 SynTime-I v.s. Baseline Methods",
      "text" : "On TimeBank dataset, SynTime-I achieves F1 of 92.09% in strict match and of 94.96% in relaxed match. On Tweets, SynTime-I achieves 91.74% and 95.87%, respectively. It outperforms all the baseline methods. The reason is that for the rulebased time taggers, their rules are designed in a fixed way, lacking flexibility. For example, SUTime could recognize ‘1 year’ but not ‘year 1.’ For the machine learning based methods, some of the features they used actually hurt the modelling. Time expressions involve quite many changing numbers which in themselves affect the pattern recognition. For example, it is difficult to build connection between ‘June 30, 1990’ and ‘October 12, 2008’ at the level of word or of character. One suggestion is to consider a type-based learning method that could use type information. For example, the above two time expressions refer to the same pattern of ‘MONTH NUMERAL COMMA YEAR’ at the level of type. POS is a kind of type information. But according to our analysis, POS could not distinguish time expressions from common words. Features need carefully designing. On WikiWars, SynTime-I achieves competitive results in both matches. Time expressions in WikiWars include lots of prepositions and quite a few descriptive time expressions. SynTime could not fully recognize such kinds of time expressions because it follows TimeML and TimeBank.\n8\n701\n702\n703\n704\n705\n706\n707\n708\n709\n710\n711\n712\n713\n714\n715\n716\n717\n718\n719\n720\n721\n722\n723\n724\n725\n726\n727\n728\n729\n730\n731\n732\n733\n734\n735\n736\n737\n738\n739\n740\n741\n742\n743\n744\n745\n746\n747\n748\n749\n750\n751\n752\n753\n754\n755\n756\n757\n758\n759\n760\n761\n762\n763\n764\n765\n766\n767\n768\n769\n770\n771\n772\n773\n774\n775\n776\n777\n778\n779\n780\n781\n782\n783\n784\n785\n786\n787\n788\n789\n790\n791\n792\n793\n794\n795\n796\n797\n798\n799\nTable 4: Overall performance. The best results are in bold face and the second best are underlined. Some results are borrowed from their original papers and the papers are indicated by the references.\nDataset Method Strict Match Relaxed Match Pr. Re. F1 Pr. Re. F1\nTimeBank\nHeidelTime(Strotgen et al., 2013) 83.85 78.99 81.34 93.08 87.68 90.30 SUTime(Chang and Manning, 2013) 78.72 80.43 79.57 89.36 91.30 90.32\nUWTime(Lee et al., 2014) 86.10 80.40 83.10 94.60 88.40 91.40 SynTime-I 91.43 92.75 92.09 94.29 95.65 94.96 SynTime-E 91.49 93.48 92.47 93.62 95.65 94.62\nWikiWars\nHeidelTime(Lee et al., 2014) 85.20 79.30 82.10 92.60 86.20 89.30 SUTime 78.61 76.69 76.64 95.74 89.57 92.55\nUWTime(Lee et al., 2014) 87.70 78.80 83.00 97.60 87.60 92.30 SynTime-I 80.00 80.22 80.11 92.16 92.41 92.29 SynTime-E 79.18 83.47 81.27 90.49 95.39 92.88\nTweets\nHeidelTime 89.58 72.88 80.37 95.83 77.97 85.98 SUTime 76.03 77.97 76.99 88.43 90.68 89.54 UWTime 88.54 72.03 79.44 96.88 78.81 86.92 SynTime-I 89.52 94.07 91.74 93.55 98.31 95.87 SynTime-E 89.20 94.49 91.77 93.20 98.78 95.88\nTable 5: Number of time tokens and modifiers for expansion\nDataset #Time Tokens #Modifiers TimeBank 4 5 WikiWars 16 19 Tweets 3 2"
    }, {
      "heading" : "5.2.2 SynTime-E v.s. SynTime-I",
      "text" : "Table 5 lists the number of time tokens and modifiers added to SynTime-I to get SynTime-E.\nOn TimeBank and Tweets datasets, only a few tokens are added, the corresponding results are affected slightly. This confirms the small size of time words and the high coverage of SynTime. On WikiWars, relatively more tokens are added, SynTime-E performs much better than SynTimeI, especially in recall. It improves the recall by 3.25% in strict match and by 2.98% in relaxed match. This indicates that with more words added from specific domains (e.g., WikiWars about war), SynTime can improve the performance."
    }, {
      "heading" : "5.3 Limitations",
      "text" : "SynTime assumes that words are tokenized and POS tagged correctly. In reality, however, the tokenized and tagged words are not that perfect, due to the limit of used tools. For example, Stanford POS Tagger assigns VBD to the word ‘sat’ in ‘friday or sat’ while whose tag should be NNP. The incorrect tokens and POS tags affect the result."
    }, {
      "heading" : "6 Conclusion and future work",
      "text" : "We conduct an analysis on the time expressions from four datasets, and observe that time expressions in general are very short and expressed by a small vocabulary, and words in time expressions demonstrate similar syntactic behavior. Our observations provide evidence in terms of time expression for the principle of least effort (Zipf, 1949). Inspired by part-of-speech, based on the observations, we define a syntactic type system for the time expression, and propose a type-based time expression tagger, named by SynTime. SynTime defines syntactic types for tokens and on the types it designs simple heuristic rules based on the idea of boundary expansion. Experiments on three datasets show that SynTime outperforms the state-of-the-art baselines, including rule-based time taggers and machine learning based time tagger. As an extremely light-weight rule-based tagger, SynTime runs in real time. SynTime provides an idea to simplify the rule-based time tagger.\nTime expression is part of language and follows the principle of least effort (Zipf, 1949). Since language usage relates to human habits (Chomsky, 1986; Pinker, 1995), we might expect that humans would share some common habits, and therefore expect that other languages and other parts of language would more or less follow the same principle. In the future we will try our analytical method on other languages and other parts of language.\n9\n801\n802\n803\n804\n805\n806\n807\n808\n809\n810\n811\n812\n813\n814\n815\n816\n817\n818\n819\n820\n821\n822\n823\n824\n825\n826\n827\n828\n829\n830\n831\n832\n833\n834\n835\n836\n837\n838\n839\n840\n841\n842\n843\n844\n845\n846\n847\n848\n849\n850\n851\n852\n853\n854\n855\n856\n857\n858\n859\n860\n861\n862\n863\n864\n865\n866\n867\n868\n869\n870\n871\n872\n873\n874\n875\n876\n877\n878\n879\n880\n881\n882\n883\n884\n885\n886\n887\n888\n889\n890\n891\n892\n893\n894\n895\n896\n897\n898\n899"
    } ],
    "references" : [ {
      "title" : "Temporal information retrieval: Challenges and opportunities",
      "author" : [ "Omar Alonso", "Jannik Strotgen", "Ricardo Baeza-Yates", "Michael Gertz." ],
      "venue" : "Proceedings of 1st International Temporal Web Analytics Workshop. pages 1–8.",
      "citeRegEx" : "Alonso et al\\.,? 2011",
      "shortCiteRegEx" : "Alonso et al\\.",
      "year" : 2011
    }, {
      "title" : "Parsing time: Learning to interpret time expressions",
      "author" : [ "Gabor Angeli", "Christopher D. Manning", "Daniel Jurafsky." ],
      "venue" : "Proceedings of 2012 Conference of the North American Chapter of the Association for Computational Linguistics: Human Lan-",
      "citeRegEx" : "Angeli et al\\.,? 2012",
      "shortCiteRegEx" : "Angeli et al\\.",
      "year" : 2012
    }, {
      "title" : "Cleartk-timeml: A minimalist approach to tempeval 2013",
      "author" : [ "Steven Bethard." ],
      "venue" : "Proceedings of the 7th International Workshop on Semantic Evaluation. pages 10–14.",
      "citeRegEx" : "Bethard.,? 2013",
      "shortCiteRegEx" : "Bethard.",
      "year" : 2013
    }, {
      "title" : "Sutime: A library for recognizing and normalizing time expressions",
      "author" : [ "Angel X. Chang", "Christopher D. Manning." ],
      "venue" : "Proceedings of 8th International Conference on Language Resources and Evaluation. pages 3735–3740.",
      "citeRegEx" : "Chang and Manning.,? 2012",
      "shortCiteRegEx" : "Chang and Manning.",
      "year" : 2012
    }, {
      "title" : "Sutime: Evaluation in tempeval-3",
      "author" : [ "Angel X. Chang", "Christopher D. Manning." ],
      "venue" : "Proceedings of second Joint Conference on Lexical and Computational Semantics (SEM). pages 78–82.",
      "citeRegEx" : "Chang and Manning.,? 2013",
      "shortCiteRegEx" : "Chang and Manning.",
      "year" : 2013
    }, {
      "title" : "Tokensregex: Defining cascaded regular expressions over tokens",
      "author" : [ "Angel X. Chang", "Christopher D. Manning." ],
      "venue" : "Technical report, Department of Computer Science, Stanford University.",
      "citeRegEx" : "Chang and Manning.,? 2014",
      "shortCiteRegEx" : "Chang and Manning.",
      "year" : 2014
    }, {
      "title" : "Knowledge of Language: Its Nature, Origin, and Use",
      "author" : [ "Noam Chomsky." ],
      "venue" : "New York: Prager.",
      "citeRegEx" : "Chomsky.,? 1986",
      "shortCiteRegEx" : "Chomsky.",
      "year" : 1986
    }, {
      "title" : "Adaptive subgradient methods for online learning and stochastic optimization",
      "author" : [ "John Duchi", "Elad Hazan", "Yoram Singer." ],
      "venue" : "The Journal of Machine Learning Research 12:2121–2159.",
      "citeRegEx" : "Duchi et al\\.,? 2011",
      "shortCiteRegEx" : "Duchi et al\\.",
      "year" : 2011
    }, {
      "title" : "Mantime: Temporal expression identification and normalization in the tempeval-3 challenge",
      "author" : [ "Michele Filannino", "Gavin Brown", "Goran Nenadic." ],
      "venue" : "Proceedings of the 7th International Workshop on Semantic Evaluation.",
      "citeRegEx" : "Filannino et al\\.,? 2013",
      "shortCiteRegEx" : "Filannino et al\\.",
      "year" : 2013
    }, {
      "title" : "Fastus: A cascaded finite-state transducer for extracting information from natruallanguage text",
      "author" : [ "Jerry R. Hobbs", "Douglas E. Appelt", "John Bear", "David Israel", "Megumi Kameyama", "Mark Stickel", "Mabry Tyson." ],
      "venue" : "Finite State Devices for Natural",
      "citeRegEx" : "Hobbs et al\\.,? 1997",
      "shortCiteRegEx" : "Hobbs et al\\.",
      "year" : 1997
    }, {
      "title" : "Context-dependent semantic parsing for time expressions",
      "author" : [ "Kenton Lee", "Yoav Artzi", "Jesse Dodge", "Luke Zettlemoyer." ],
      "venue" : "Proceedings of the 52th Annual Meeting of the Association for Computational Linguistics. pages 1437–1447.",
      "citeRegEx" : "Lee et al\\.,? 2014",
      "shortCiteRegEx" : "Lee et al\\.",
      "year" : 2014
    }, {
      "title" : "Timen: An open temporal expression normalisation resource",
      "author" : [ "Hector Llorens", "Leon Derczynski", "Robert Gaizauskas", "Estela Saquete." ],
      "venue" : "Proceedings of 8th International Conference on Language Resources and Evaluation. pages 3044–3051.",
      "citeRegEx" : "Llorens et al\\.,? 2012",
      "shortCiteRegEx" : "Llorens et al\\.",
      "year" : 2012
    }, {
      "title" : "Tipsem (english and spanish): Evaluating crfs and semantic roles in tempeval-2",
      "author" : [ "Hector Llorens", "Estela Saquete", "Borja Navarro." ],
      "venue" : "Proceedings of the 5th International Workshop on Semantic Evaluation. pages 284–291.",
      "citeRegEx" : "Llorens et al\\.,? 2010",
      "shortCiteRegEx" : "Llorens et al\\.",
      "year" : 2010
    }, {
      "title" : "Foundations of Statistical Natural Language Processing",
      "author" : [ "Christopher Manning", "Hinrich Schutze." ],
      "venue" : "Cambride: MIT Press.",
      "citeRegEx" : "Manning and Schutze.,? 1999",
      "shortCiteRegEx" : "Manning and Schutze.",
      "year" : 1999
    }, {
      "title" : "Wikiwars: A new corpus for research on temporal expressions",
      "author" : [ "Pawel Mazur", "Robert Dale." ],
      "venue" : "Proceedings of the 2010 Conference on Empirical Methods in Natural Language Processing. Association for Computational Linguistics, pages 913–922.",
      "citeRegEx" : "Mazur and Dale.,? 2010",
      "shortCiteRegEx" : "Mazur and Dale.",
      "year" : 2010
    }, {
      "title" : "Engilish gigaword fifth edition",
      "author" : [ "Robert Parker", "David Graff", "Junbo Kong", "Ke Chen", "Kazuaki Maeda" ],
      "venue" : null,
      "citeRegEx" : "Parker et al\\.,? \\Q2011\\E",
      "shortCiteRegEx" : "Parker et al\\.",
      "year" : 2011
    }, {
      "title" : "The language instinct: The new science of language and mind, volume 7529",
      "author" : [ "Steven Pinker." ],
      "venue" : "Penguin.",
      "citeRegEx" : "Pinker.,? 1995",
      "shortCiteRegEx" : "Pinker.",
      "year" : 1995
    }, {
      "title" : "Timeml: Robust specification of event and temporal expressions in text",
      "author" : [ "James Pustejovsky", "Jose Castano", "Robert Ingria", "Roser Sauri", "Robert Gaizauskas", "Andrea Setzer", "Graham Katz", "Dragomir Radev." ],
      "venue" : "New Directions in Question Answering 3:28–",
      "citeRegEx" : "Pustejovsky et al\\.,? 2003a",
      "shortCiteRegEx" : "Pustejovsky et al\\.",
      "year" : 2003
    }, {
      "title" : "The timebank corpus",
      "author" : [ "James Pustejovsky", "Patrick Hanks", "Roser Sauri", "Andrew See", "Robert Gaizauskas", "Andrea Setzer", "Beth Sundheim", "Dragomir Radev", "David Day", "Lisa Ferro", "Marcia Lazo." ],
      "venue" : "Corpus Linguistics 2003:647–656.",
      "citeRegEx" : "Pustejovsky et al\\.,? 2003b",
      "shortCiteRegEx" : "Pustejovsky et al\\.",
      "year" : 2003
    }, {
      "title" : "Surface Structure and Interpretation",
      "author" : [ "Mark Steedman." ],
      "venue" : "The MIT Press.",
      "citeRegEx" : "Steedman.,? 1996",
      "shortCiteRegEx" : "Steedman.",
      "year" : 1996
    }, {
      "title" : "Heideltime: High quality rule-based extraction and normalization of temporal expressions",
      "author" : [ "Jannik Strötgen", "Michael Gertz." ],
      "venue" : "Proceedings of the 5th International Workshop on Semantic Evaluation (SemEval’10). Association for Computational Lin-",
      "citeRegEx" : "Strötgen and Gertz.,? 2010",
      "shortCiteRegEx" : "Strötgen and Gertz.",
      "year" : 2010
    }, {
      "title" : "Multilingual and cross-domain temporal tagging",
      "author" : [ "Jannik Strotgen", "Michael Gertz." ],
      "venue" : "Language Resources and Evaluation 47(2):269–198.",
      "citeRegEx" : "Strotgen and Gertz.,? 2013",
      "shortCiteRegEx" : "Strotgen and Gertz.",
      "year" : 2013
    }, {
      "title" : "Heideltime: Tuning english and developing spanish resources",
      "author" : [ "Jannik Strotgen", "Julian Zell", "Michael Gertz." ],
      "venue" : "Proceedings of second Joint Conference on Lexical and Computational Semantics (SEM). pages 15–19.",
      "citeRegEx" : "Strotgen et al\\.,? 2013",
      "shortCiteRegEx" : "Strotgen et al\\.",
      "year" : 2013
    }, {
      "title" : "A minimally supervised method for recognizing and normalizing time expressions in twitter",
      "author" : [ "Jeniya Tabassum", "Alan Ritter", "Wei Xu." ],
      "venue" : "Conference on Empirical Methods in Natural Language Processing (arXiv).",
      "citeRegEx" : "Tabassum et al\\.,? 2016",
      "shortCiteRegEx" : "Tabassum et al\\.",
      "year" : 2016
    }, {
      "title" : "Trips and trios system for tempeval-2: Extracting temporal information from text",
      "author" : [ "Naushad UzZaman", "James F. Allen." ],
      "venue" : "Proceedings of the",
      "citeRegEx" : "UzZaman and Allen.,? 2010",
      "shortCiteRegEx" : "UzZaman and Allen.",
      "year" : 2010
    }, {
      "title" : "Semeval-2013 task 1: Tempeval-3: Evaluating time expressions, events, and temporal relations",
      "author" : [ "Naushad UzZaman", "Hector Llorens", "Leon Derczynski", "Marc Verhagen", "James Allen", "James Pustejovsky." ],
      "venue" : "Proceedings of the 7th International",
      "citeRegEx" : "UzZaman et al\\.,? 2013",
      "shortCiteRegEx" : "UzZaman et al\\.",
      "year" : 2013
    }, {
      "title" : "Semeval-2007 task 15: Tempeval temporal relation identification",
      "author" : [ "Marc Verhagen", "Robert Gaizauskas", "Frank Schilder", "Mark Hepple", "Graham Katz", "James Pustejovsky." ],
      "venue" : "Proceedings of the 4th International Workshop on Semantic Evaluation.",
      "citeRegEx" : "Verhagen et al\\.,? 2007",
      "shortCiteRegEx" : "Verhagen et al\\.",
      "year" : 2007
    }, {
      "title" : "Automating temporal annotation with tarqi",
      "author" : [ "Pustejovsky." ],
      "venue" : "Proceedings of the ACL Interactive Poster and Demonstration Sessions.. pages 81–84.",
      "citeRegEx" : "Pustejovsky.,? 2005",
      "shortCiteRegEx" : "Pustejovsky.",
      "year" : 2005
    }, {
      "title" : "Semeval-2010 task 13: Tempeval-2",
      "author" : [ "Marc Verhagen", "Roser Sauri", "Tommaso Caselli", "James Pustejovsky." ],
      "venue" : "Proceedings of the 5th International Workshop on Semantic Evaluation. pages 57–62.",
      "citeRegEx" : "Verhagen et al\\.,? 2010",
      "shortCiteRegEx" : "Verhagen et al\\.",
      "year" : 2010
    }, {
      "title" : "Human Behavior and the Principle of Least Effort: An Introduction to Human Ecology",
      "author" : [ "George Zipf." ],
      "venue" : "Addison-Wesley Press, Inc.",
      "citeRegEx" : "Zipf.,? 1949",
      "shortCiteRegEx" : "Zipf.",
      "year" : 1949
    } ],
    "referenceMentions" : [ {
      "referenceID" : 0,
      "context" : "Time expression plays an important role in information retrieval and many applications in natural language processing (Alonso et al., 2011).",
      "startOffset" : 118,
      "endOffset" : 139
    }, {
      "referenceID" : 25,
      "context" : "Recognizing time expressions from free text has attracted considerable attention since last decade (Verhagen et al., 2007, 2010; UzZaman et al., 2013).",
      "startOffset" : 99,
      "endOffset" : 150
    }, {
      "referenceID" : 21,
      "context" : "Time expression recognition main involves two kinds of methods, rule-based method (Strotgen and Gertz, 2013; Strötgen and Gertz, 2010; Chang and Manning, 2012) and machine learning based method (Bethard, 2013; Lee et al.",
      "startOffset" : 82,
      "endOffset" : 159
    }, {
      "referenceID" : 20,
      "context" : "Time expression recognition main involves two kinds of methods, rule-based method (Strotgen and Gertz, 2013; Strötgen and Gertz, 2010; Chang and Manning, 2012) and machine learning based method (Bethard, 2013; Lee et al.",
      "startOffset" : 82,
      "endOffset" : 159
    }, {
      "referenceID" : 3,
      "context" : "Time expression recognition main involves two kinds of methods, rule-based method (Strotgen and Gertz, 2013; Strötgen and Gertz, 2010; Chang and Manning, 2012) and machine learning based method (Bethard, 2013; Lee et al.",
      "startOffset" : 82,
      "endOffset" : 159
    }, {
      "referenceID" : 2,
      "context" : "Time expression recognition main involves two kinds of methods, rule-based method (Strotgen and Gertz, 2013; Strötgen and Gertz, 2010; Chang and Manning, 2012) and machine learning based method (Bethard, 2013; Lee et al., 2014).",
      "startOffset" : 194,
      "endOffset" : 227
    }, {
      "referenceID" : 10,
      "context" : "Time expression recognition main involves two kinds of methods, rule-based method (Strotgen and Gertz, 2013; Strötgen and Gertz, 2010; Chang and Manning, 2012) and machine learning based method (Bethard, 2013; Lee et al., 2014).",
      "startOffset" : 194,
      "endOffset" : 227
    }, {
      "referenceID" : 18,
      "context" : "In our study, we analyze the time expressions in four datasets: TimeBank (Pustejovsky et al., 2003b), Gigaword (Parker et al.",
      "startOffset" : 73,
      "endOffset" : 100
    }, {
      "referenceID" : 15,
      "context" : ", 2003b), Gigaword (Parker et al., 2011), WikiWars (Mazur and Dale, 2010), and Tweets.",
      "startOffset" : 19,
      "endOffset" : 40
    }, {
      "referenceID" : 14,
      "context" : ", 2011), WikiWars (Mazur and Dale, 2010), and Tweets.",
      "startOffset" : 18,
      "endOffset" : 40
    }, {
      "referenceID" : 29,
      "context" : "All the observations relate to the principle of least effort (Zipf, 1949).",
      "startOffset" : 61,
      "endOffset" : 73
    }, {
      "referenceID" : 29,
      "context" : "That is, people will act under the least effort in order to minimize the cost of energy at both individual level and collective level to language usage (Zipf, 1949).",
      "startOffset" : 152,
      "endOffset" : 164
    }, {
      "referenceID" : 13,
      "context" : "” (Manning and Schutze, 1999) SynTime defines types for tokens according to their syntactic behaviors.",
      "startOffset" : 2,
      "endOffset" : 29
    }, {
      "referenceID" : 29,
      "context" : "The observations provide evidence in terms of time expression for the principle of least effort (Zipf, 1949).",
      "startOffset" : 96,
      "endOffset" : 108
    }, {
      "referenceID" : 25,
      "context" : "Many research on time expression identification are reported in TempEval exercises (Verhagen et al., 2007, 2010; UzZaman et al., 2013).",
      "startOffset" : 83,
      "endOffset" : 134
    }, {
      "referenceID" : 20,
      "context" : "Rule-based time taggers like GUTime, HeidelTime, and SUTime, predefine time-related words and rules (Verhagen et al., 2005; Strötgen and Gertz, 2010; Chang and Manning, 2012).",
      "startOffset" : 100,
      "endOffset" : 174
    }, {
      "referenceID" : 3,
      "context" : "Rule-based time taggers like GUTime, HeidelTime, and SUTime, predefine time-related words and rules (Verhagen et al., 2005; Strötgen and Gertz, 2010; Chang and Manning, 2012).",
      "startOffset" : 100,
      "endOffset" : 174
    }, {
      "referenceID" : 20,
      "context" : "HeidelTime (Strötgen and Gertz, 2010) hand-crafts rules with time resources like weekdays and months, and leverages language clues like part-of-speech to identify time expression.",
      "startOffset" : 11,
      "endOffset" : 37
    }, {
      "referenceID" : 3,
      "context" : "SUTime (Chang and Manning, 2012) designs fixed rules using a cascade finite automata (Hobbs et al.",
      "startOffset" : 7,
      "endOffset" : 32
    }, {
      "referenceID" : 9,
      "context" : "SUTime (Chang and Manning, 2012) designs fixed rules using a cascade finite automata (Hobbs et al., 1997) on regular expressions over tokens (Chang and Manning, 2014).",
      "startOffset" : 85,
      "endOffset" : 105
    }, {
      "referenceID" : 5,
      "context" : ", 1997) on regular expressions over tokens (Chang and Manning, 2014).",
      "startOffset" : 43,
      "endOffset" : 68
    }, {
      "referenceID" : 12,
      "context" : "features (Llorens et al., 2010; Filannino et al., 2013; Bethard, 2013).",
      "startOffset" : 9,
      "endOffset" : 70
    }, {
      "referenceID" : 8,
      "context" : "features (Llorens et al., 2010; Filannino et al., 2013; Bethard, 2013).",
      "startOffset" : 9,
      "endOffset" : 70
    }, {
      "referenceID" : 2,
      "context" : "features (Llorens et al., 2010; Filannino et al., 2013; Bethard, 2013).",
      "startOffset" : 9,
      "endOffset" : 70
    }, {
      "referenceID" : 12,
      "context" : "The statistical models include Markov Logic Network, Logistic Regression, Support Vector Machines, Maximum Entropy, and Conditional Random Fields (Llorens et al., 2010; UzZaman and Allen, 2010; Filannino et al., 2013; Bethard, 2013).",
      "startOffset" : 146,
      "endOffset" : 232
    }, {
      "referenceID" : 24,
      "context" : "The statistical models include Markov Logic Network, Logistic Regression, Support Vector Machines, Maximum Entropy, and Conditional Random Fields (Llorens et al., 2010; UzZaman and Allen, 2010; Filannino et al., 2013; Bethard, 2013).",
      "startOffset" : 146,
      "endOffset" : 232
    }, {
      "referenceID" : 8,
      "context" : "The statistical models include Markov Logic Network, Logistic Regression, Support Vector Machines, Maximum Entropy, and Conditional Random Fields (Llorens et al., 2010; UzZaman and Allen, 2010; Filannino et al., 2013; Bethard, 2013).",
      "startOffset" : 146,
      "endOffset" : 232
    }, {
      "referenceID" : 2,
      "context" : "The statistical models include Markov Logic Network, Logistic Regression, Support Vector Machines, Maximum Entropy, and Conditional Random Fields (Llorens et al., 2010; UzZaman and Allen, 2010; Filannino et al., 2013; Bethard, 2013).",
      "startOffset" : 146,
      "endOffset" : 232
    }, {
      "referenceID" : 2,
      "context" : "71% on strict match in TempEval3 (Bethard, 2013).",
      "startOffset" : 33,
      "endOffset" : 48
    }, {
      "referenceID" : 1,
      "context" : "leverage compositional grammar and employ a EM-style approach to learn a latent parser for time expression recognition (Angeli et al., 2012).",
      "startOffset" : 119,
      "endOffset" : 140
    }, {
      "referenceID" : 19,
      "context" : "handcraft a Combinatory Categorial Grammar (CCG) (Steedman, 1996) to define a set of lexicon with rules and use L1-regularization to learn linguistic context (Lee et al.",
      "startOffset" : 49,
      "endOffset" : 65
    }, {
      "referenceID" : 10,
      "context" : "handcraft a Combinatory Categorial Grammar (CCG) (Steedman, 1996) to define a set of lexicon with rules and use L1-regularization to learn linguistic context (Lee et al., 2014).",
      "startOffset" : 158,
      "endOffset" : 176
    }, {
      "referenceID" : 10,
      "context" : "Particulaly in (Lee et al., 2014), CCG could capture rich structure information of language, similar to the rule-based methods.",
      "startOffset" : 15,
      "endOffset" : 33
    }, {
      "referenceID" : 23,
      "context" : "focus on resolving the dates in tweets, and use distant supervision to recognize time expressions (Tabassum et al., 2016).",
      "startOffset" : 98,
      "endOffset" : 121
    }, {
      "referenceID" : 20,
      "context" : "Methods in TempEval exercises design rules for time expression normalization (Verhagen et al., 2005; Strötgen and Gertz, 2010; Llorens et al., 2010; UzZaman and Allen, 2010; Filannino et al., 2013; Bethard, 2013).",
      "startOffset" : 77,
      "endOffset" : 212
    }, {
      "referenceID" : 12,
      "context" : "Methods in TempEval exercises design rules for time expression normalization (Verhagen et al., 2005; Strötgen and Gertz, 2010; Llorens et al., 2010; UzZaman and Allen, 2010; Filannino et al., 2013; Bethard, 2013).",
      "startOffset" : 77,
      "endOffset" : 212
    }, {
      "referenceID" : 24,
      "context" : "Methods in TempEval exercises design rules for time expression normalization (Verhagen et al., 2005; Strötgen and Gertz, 2010; Llorens et al., 2010; UzZaman and Allen, 2010; Filannino et al., 2013; Bethard, 2013).",
      "startOffset" : 77,
      "endOffset" : 212
    }, {
      "referenceID" : 8,
      "context" : "Methods in TempEval exercises design rules for time expression normalization (Verhagen et al., 2005; Strötgen and Gertz, 2010; Llorens et al., 2010; UzZaman and Allen, 2010; Filannino et al., 2013; Bethard, 2013).",
      "startOffset" : 77,
      "endOffset" : 212
    }, {
      "referenceID" : 2,
      "context" : "Methods in TempEval exercises design rules for time expression normalization (Verhagen et al., 2005; Strötgen and Gertz, 2010; Llorens et al., 2010; UzZaman and Allen, 2010; Filannino et al., 2013; Bethard, 2013).",
      "startOffset" : 77,
      "endOffset" : 212
    }, {
      "referenceID" : 11,
      "context" : "suggest to construct a large knowledge base as a public resource for the task (Llorens et al., 2012).",
      "startOffset" : 78,
      "endOffset" : 100
    }, {
      "referenceID" : 10,
      "context" : "Some researchers treat the normalization process as a learning task and use machine learning methods (Lee et al., 2014; Tabassum et al., 2016).",
      "startOffset" : 101,
      "endOffset" : 142
    }, {
      "referenceID" : 23,
      "context" : "Some researchers treat the normalization process as a learning task and use machine learning methods (Lee et al., 2014; Tabassum et al., 2016).",
      "startOffset" : 101,
      "endOffset" : 142
    }, {
      "referenceID" : 10,
      "context" : "(Lee et al., 2014) use AdaGrad algorithm (Duchi et al.",
      "startOffset" : 0,
      "endOffset" : 18
    }, {
      "referenceID" : 7,
      "context" : ", 2014) use AdaGrad algorithm (Duchi et al., 2011) and Tabassum et al.",
      "startOffset" : 30,
      "endOffset" : 50
    }, {
      "referenceID" : 23,
      "context" : "(Tabassum et al., 2016) use a loglinear algorithm to normalize the time expressions.",
      "startOffset" : 0,
      "endOffset" : 23
    }, {
      "referenceID" : 11,
      "context" : "SynTime focuses only on time expression recognition, and the normalization could be achieved by using methods similar to the existing rule systems, because they are highly similar (Llorens et al., 2012).",
      "startOffset" : 180,
      "endOffset" : 202
    }, {
      "referenceID" : 18,
      "context" : "TimeBank (Pustejovsky et al., 2003b) is a benchmark dataset in TempEval series (Verhagen et al.",
      "startOffset" : 9,
      "endOffset" : 36
    }, {
      "referenceID" : 25,
      "context" : ", 2003b) is a benchmark dataset in TempEval series (Verhagen et al., 2007, 2010; UzZaman et al., 2013), consisting of 183 news articles.",
      "startOffset" : 51,
      "endOffset" : 102
    }, {
      "referenceID" : 15,
      "context" : "Gigaword (Parker et al., 2011) is a large automatically labeled dataset with 2,452 news articles and is used in TempEval-3.",
      "startOffset" : 9,
      "endOffset" : 30
    }, {
      "referenceID" : 14,
      "context" : "WikiWars dataset is derived from Wikipedia articles about wars (Mazur and Dale, 2010).",
      "startOffset" : 63,
      "endOffset" : 85
    }, {
      "referenceID" : 29,
      "context" : "The four observations all relate to the principle of least effort (Zipf, 1949).",
      "startOffset" : 66,
      "endOffset" : 78
    }, {
      "referenceID" : 29,
      "context" : "That is, people will act under the least effort so as to minimize the cost of energy at both individual and collective level to the language usage (Zipf, 1949).",
      "startOffset" : 147,
      "endOffset" : 159
    }, {
      "referenceID" : 13,
      "context" : "” (Manning and Schutze, 1999)",
      "startOffset" : 2,
      "endOffset" : 29
    }, {
      "referenceID" : 17,
      "context" : "org/joda-time/ TimeML (Pustejovsky et al., 2003a) and TimeBank (Pustejovsky et al.",
      "startOffset" : 22,
      "endOffset" : 49
    }, {
      "referenceID" : 18,
      "context" : ", 2003a) and TimeBank (Pustejovsky et al., 2003b) do not treat most prepositions like ‘on’ as a part of time expressions.",
      "startOffset" : 22,
      "endOffset" : 49
    }, {
      "referenceID" : 20,
      "context" : "We compare SynTime with methods: HeidelTime (Strötgen and Gertz, 2010), SUTime (Chang and Manning, 2012), and UWTime (Lee et al.",
      "startOffset" : 44,
      "endOffset" : 70
    }, {
      "referenceID" : 3,
      "context" : "We compare SynTime with methods: HeidelTime (Strötgen and Gertz, 2010), SUTime (Chang and Manning, 2012), and UWTime (Lee et al.",
      "startOffset" : 79,
      "endOffset" : 104
    }, {
      "referenceID" : 10,
      "context" : "We compare SynTime with methods: HeidelTime (Strötgen and Gertz, 2010), SUTime (Chang and Manning, 2012), and UWTime (Lee et al., 2014).",
      "startOffset" : 117,
      "endOffset" : 135
    }, {
      "referenceID" : 25,
      "context" : "We follow TempEval-3 and use their evaluation toolkit 9 to report Precision, Recall, and F1 in terms of strict match and relaxed match (UzZaman et al., 2013).",
      "startOffset" : 135,
      "endOffset" : 157
    }, {
      "referenceID" : 22,
      "context" : "TimeBank HeidelTime(Strotgen et al., 2013) 83.",
      "startOffset" : 19,
      "endOffset" : 42
    }, {
      "referenceID" : 4,
      "context" : "30 SUTime(Chang and Manning, 2013) 78.",
      "startOffset" : 9,
      "endOffset" : 34
    }, {
      "referenceID" : 10,
      "context" : "32 UWTime(Lee et al., 2014) 86.",
      "startOffset" : 9,
      "endOffset" : 27
    }, {
      "referenceID" : 10,
      "context" : "WikiWars HeidelTime(Lee et al., 2014) 85.",
      "startOffset" : 19,
      "endOffset" : 37
    }, {
      "referenceID" : 10,
      "context" : "55 UWTime(Lee et al., 2014) 87.",
      "startOffset" : 9,
      "endOffset" : 27
    }, {
      "referenceID" : 29,
      "context" : "Our observations provide evidence in terms of time expression for the principle of least effort (Zipf, 1949).",
      "startOffset" : 96,
      "endOffset" : 108
    }, {
      "referenceID" : 29,
      "context" : "Time expression is part of language and follows the principle of least effort (Zipf, 1949).",
      "startOffset" : 78,
      "endOffset" : 90
    }, {
      "referenceID" : 6,
      "context" : "Since language usage relates to human habits (Chomsky, 1986; Pinker, 1995), we might expect that humans would share some common habits, and therefore expect that other languages and other parts of language would more or less follow the same principle.",
      "startOffset" : 45,
      "endOffset" : 74
    }, {
      "referenceID" : 16,
      "context" : "Since language usage relates to human habits (Chomsky, 1986; Pinker, 1995), we might expect that humans would share some common habits, and therefore expect that other languages and other parts of language would more or less follow the same principle.",
      "startOffset" : 45,
      "endOffset" : 74
    } ],
    "year" : 2017,
    "abstractText" : "Extracting time expressions from free text is a fundamental task for many applications. We analyze the time expressions from four datasets and observe that only a small group of words are used to express time information, and the words in time expressions demonstrate similar syntactic behaviour. Based on the observations, we propose a type-based approach, named SynTime, to recognize time expressions. Specifically, we define three main syntactic types, namely time token, modifier, and numeral, to group time-related regular expressions over tokens. On the types we design simple heuristic rules to recognize time expressions. In recognition, SynTime first identifies the time tokens from raw text, then searches their surroundings for modifiers and numerals to form time segments, and finally merges the time segments to time expressions. As a light-weight rule-based tagger, SynTime runs in real time, and can be easily expanded by simply adding keywords for the text of different types and of different domains. Experiment results show that SynTime outperforms state-of-the-art methods on benchmark datasets and tweets data.",
    "creator" : "LaTeX with hyperref package"
  }
}