{
  "name" : "134.pdf",
  "metadata" : {
    "source" : "CRF",
    "title" : "Neural End-to-End Learning for Computational Argumentation Mining",
    "authors" : [ ],
    "emails" : [ ],
    "sections" : [ {
      "heading" : null,
      "text" : "1 000\n011\n012\n013\n014\n015\n016\n017\n018\n019\n020\n021\n022\n023\n024\n025\n026\n027\n028\n029\n030\n031\n032\n033\n034\n035\n036\n037\n038\n039\n040\n041\n042\n043\n044\n045\n046\n047\n048\n049\n061\n062\n063\n064\n065\n066\n067\n068\n069\n070\n071\n072\n073\n074\n075\n076\n077\n078\n079\n080\n081\n082\n083\n084\n085\n086\n087\n088\n089\n090\n091\n092\n093\n094\n095\n096\n097\n098\n099"
    }, {
      "heading" : "1 Introduction",
      "text" : "Computational argumentation mining (AM) deals with finding argumentation structures in text. This involves several subtasks, such as: (a) separating argumentative units from non-argumentative units, also called ‘component segmentation’; (b) classifying argument components into classes such as “Premise” or “Claim”; (c) finding relations between argument components; (d) classifying relations into classes such as “Support” or “Attack” (Persing and Ng, 2016; Stab and Gurevych, 2016).\nThus, AM would have to detect claims and premises (reasons) in texts such as the following, where premise P supports claim C:\nSince it killed many marine livesP , ::::::: tourism ::: has :::::::::: threatened :::::: natureC .\nArgument structures in real texts are typically much more complex, cf. Figure 1.\nWhile different research has addressed different subsets of the AM problem (see below), the ultimate goal is to solve all of them, starting from unannotated plain text. Two recent approaches to this end-to-end learning scenario are Persing and Ng (2016) and Stab and Gurevych (2016). Both solve the end-to-end task by first training independent models for each subtask and then defining an integer linear programming (ILP) model that encodes global constraints such as that each premise has a parent, etc. Besides their pipeline architecture the approaches also have in common that they heavily rely on hand-crafted features.\nHand-crafted features pose a problem because AM is to some degree an “arbitrary” problem in that the notion of “argument” critically relies on the underlying argumentation theory (Reed et al., 2008; Biran and Rambow, 2011; Habernal and Gurevych, 2015; Stab and Gurevych, 2016). Accordingly, datasets typically differ with respect to their annotation of (often rather complex) argument structure. Thus, feature sets would have to be manually adapted to and designed for each new sample of data, a challenging task. The same critique applies to the designing of ILP constraints. Moreover, from a machine learning perspective, pipeline approaches are problematic because they solve subtasks independently and thus lead to error propagation rather than exploiting interrelationships between variables. In contrast to this, we investigate neural techniques for end-to-end learning in computational AM, which do not require the hand-crafting of features or constraints. The models we survey also all capture some notion of “joint”—rather than “pipeline”—learning. We investigate several approaches.\nFirst, we frame the end-to-end AM problem as a dependency parsing problem. Dependency parsing may be considered a natural choice for AM, because argument structures often form trees, or\n2\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\nclosely resemble them (see §3). Hence, it is not surprising that “discourse parsing” has been suggested for AM (Peldszus and Stede, 2015). What distinguishes our approach from these previous ones is that we operate on the token level, rather than on the level of components, because we address the end-to-end framework and, thus, do not assume that non-argumentative units have already been sorted out and/or that the boundaries of argumentative units are given.\nSecond, we frame the problem as a sequence tagging problem. This is a “natural” choice especially for component segmentation and typing, which is a typical entity recognition problem for which BIO tagging is a standard approach, pursued in AM, e.g., by Habernal and Gurevych (2016). The challenge in the end-to-end setting is to also include relations into the tagging scheme, which we realize by coding the distances between linked components into the tag label. Since related entities in AM are oftentimes several dozens of tokens apart from each other, neural sequence tagging models are in principle ideal candidates for such a framing because they can take into account long-range dependencies—something that is inherently difficult to capture with traditional feature-based tagging models such as conditional random fields (CRFs).\nThird, we frame AM as a multi-task (tagging) problem (Caruana, 1997; Collobert and Weston, 2008). We experiment with subtasks of AM— e.g., component detection—as auxiliary tasks and investigate whether this improves performance on the AM problem. Adding such subtasks can be seen as analogous to de-coupling, e.g., component detection from the full AM problem.\nFourth, we evaluate the model of Miwa and Bansal (2016) that combines sequential (entity) and tree structure (relation) information and is in principle applicable to any problem where the aim is to extract entities and their relations. As such, this model makes fewer assumptions than our dependency parsing and tagging approaches.\nThe contributions of this paper are as follows. (1) We present the first neural end-to-end solutions to computational AM. (2) We show that several of them perform better than the state-of-theart joint ILP model. (3) We show that a framing of AM as a token-based dependency parsing problem is ineffective—in contrast to what has been proposed for systems that operate on the coarser\ncomponent level and that (4) a standard neural sequence tagging model that encodes distance information between components performs robustly in different environments. Finally, (5) we show that a multi-task learning setup where natural subtasks of the full AM problem are added as auxiliary tasks improves performance."
    }, {
      "heading" : "2 Related Work",
      "text" : "AM has applications in legal decision making (Palau and Moens, 2009; Moens et al., 2007), document summarization, and the analysis of scientific papers (Kirschner et al., 2015). Its importance for the educational domain has been highlighted by recent work on writing assistance (Zhang and Litman, 2016) and essay scoring (Persing and Ng, 2015; Somasundaran et al., 2016).\nMost works on AM address subtasks of AM such as locating/typing components (Florou et al., 2013; Moens et al., 2007; Rooney et al., 2012; Knight et al., 2003; Levy et al., 2014; Rinott et al., 2015). Relatively few works address the full AM problem of component and relation identification. Peldszus and Stede (2016) present a corpus of microtexts containing only argumentatively relevant text of controlled complexity. To our best knowledge, Stab and Gurevych (2016) created the only corpus of attested high quality which annotates the AM problem in its entire complexity: it contains token-level annotations of components, their types, as well as relations and their types."
    }, {
      "heading" : "3 Data",
      "text" : "We use the dataset of persuasive essays (PE) from Stab and Gurevych (2016), which contains student essays written in response to controversial topics such as “competition or cooperation—which is better?”\nThe corpus consists of 402 essays, 80 of which are reserved for testing. The annotation distinguishes between major claims (the central position of an author with respect to the essay’s topic), claims (controversial statements that are either for or against the major claims), and premises, which give reasons for claims or other premises and either support or attack them. Overall, there are 751 major claims, 1506 claims, and 3832 premises.\nThe corpus has a special structure, illustrated in Figure 1. First, major claims relate to no other components. Second, claims always relate to all other major claims. Third, each premise relates\n3\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\nMC1 MC2\nC1 C2 C3\nP1 P2 P3 P4 P5 P6\nMC1 C1 P1 P2 P3 P4 C2\nP5 P6 C3 MC2\nFigure 1: Bottom: Linear argumentation structure in a student essay. The essay is comprised of nonargumentative units (square blue) and argumentative units of different types: Premises (P), claims (C) and major claims (MC). Top: Relationsships between argumentative units. Black arrows are support (for), red dashed arrows are attack (against).\nto exactly one claim or premise. Thus, the argument structure in each essay is—almost—a tree. Since there may be several major claims, each claim connects to multiple targets, which violates the tree structure. This does not pose a problem, however, since we can “loss-lessly” re-link the claims to one of the major claims (e.g., the last major claim in a document) and create a special root node to which the major claims link.\nThere is another peculiarity of this data. Each essay is divided into paragraphs, of which there are 2235 in total (1786 train, 449 test). The argumentation structure is completely contained within a paragraph, except, possibly, for the relation from claims to major claims. Paragraphs have an average length of 66 tokens and are therefore much shorter than essays, which have an average length of 368 tokens. Thus, prediction on the paragraph level is easier than prediction on the essay level, because there are fewer components in a paragraph and hence fewer possibilities of source and target components in argument relations. Paragraphs are not only easier for relation classification, but also for component classification: a paragraph can never contain premises only, for example, since premises link to other components."
    }, {
      "heading" : "4 Models",
      "text" : "This section describes our neural network framings for end-to-end AM.\nSequence Tagging is the problem of assigning each element in a stream of input tokens a\nlabel. In a neural context, the natural choice for tagging problems are recurrent neural nets (RNNs) in which a hidden vector representation ht at time point t depends on the previous hidden vector representation ht−1 and the input xt. In this way, an infinite window (“long-range dependencies”) around the current input token xt can be taken into account when making an output prediction yt. We choose particular RNNs, namely, LSTMs (Hochreiter and Schmidhuber, 1997), which are popular for being able to address vanishing/exploding gradients problems. In addition to considering a left-to-right flow of information, bidirectional LSTMs also capture information to the right of the current input token.\nThe most recent generation of neural tagging models add label dependencies to BiLSTMs (BL), so that successive output decisions are not made independently. This class of models is called BiLSTM-CRF (BLC) (Huang et al., 2015). The model of Ma and Hovy (2016) adds convolutional neural nets (CNNs) on the character-level to BiLSTM-CRFs, leading to BiLSTM-CRF-CNN (BLCC) models. The character-level CNN may address problems of out-of-vocabulary words, that is, words not seen during training.\nAM as Sequence Tagging: We frame AM as the following sequence tagging problem. Each input token has an associated label from Y , where\nY = {(b, t, d, s) | b ∈ {B, I,O}, t ∈ {P,C,MC,⊥}, d ∈ {. . . ,−2,−1, 1, 2, . . . ,⊥}, s ∈ {Supp,Att, For,Ag,⊥}}. (1)\n4\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\nIn other words, Y consists of all four-tuples (b, t, d, s) where b is a BIO encoding indicating whether the current token is non-argumentative (O) or begins (B) or continues (I) a component; t indicates the type of the component (claim C, premise P, or major claim MC for our data). Moreover, d encodes the distance—measured in number of components—between the current component and the component it relates to. We encode the same d value for each token in a given component. Finally, s is the relation type (“stance”) between two components and its value may be Support (Supp), Attack (Att), or For or Against (Ag). We also have a special symbol ⊥ that indicates when a particular slot is not filled: e.g., a nonargumentative unit (b = O) has neither component type, nor relation, nor relation type. We refer to this framing as STagT (for “Simple Tagging”), where T refers to the tagger used. For the example from §1, our coding would hence be:\nSince it killed many (O,⊥,⊥,⊥) (B,P,1,Supp) (I,P,1,Supp) (I,P,1,Supp)\nmarine lives , tourism (I,P,1,Supp) (I,P,1,Supp) (O,⊥,⊥,⊥) (B,C,⊥,For)\nhas threatened nature . (I,C,⊥,For) (I,C,⊥,For) (I,C,⊥,For) (O,⊥, ⊥, ⊥)\nWhile the size of the label set Y is potentially infinite, we would expect it to be finite even in a potentially infinitely large data set, because humans also have only finite memory and are therefore expected to keep related components close in textual space. Indeed, as Figure 2 shows, in our PE essay data set about 30% of all relations between components have distance −1, that is, they follow the claim or premise that they attach to. Overall, around 2/3 of all relation distances d lie in {−2,−1, 1}. However, the figure also illustrates that there are indeed long-range dependencies: distance values between −11 and +10 are observed in the data.\nDependency Parsing methods can be classified into graph-based and transition-based approaches (Kiperwasser and Goldberg, 2016). Transitionbased parsers encode the parsing problem as a sequence of configurations which may be modified by application of actions such as shift, reduce, etc. The system starts with an initial configuration in which sentence elements are on a buffer and a stack, and a classifier successively decides which action to take next, leading to different configura-\n0\n5\n10\n15\n20\n25\n30\n−10 −5 0 5 10\n%\nd\nd\nFigure 2: Distribution of distances d between components in PE dataset.\ntions. The system terminates after a finite number of actions, and the parse tree is read off the terminal configuration. Graph-based parsers solve a structured prediction problem in which the goal is learning a scoring function over dependency trees such that correct trees are scored above all others.\nTraditional dependency parsers used handcrafted feature functions that look at “core” elements such as “word on top of the stack”, “POS of word on top of the stack”, and conjunctions of core features such as “word is X and POS is Y” (see McDonald et al. (2005)). Most neural parsers have not entirely abandoned feature engineering. Instead, they rely, for example, on encoding the core features of parsers as low-dimensional embedding vectors (Chen and Manning, 2014) but ignore feature combinations. Kiperwasser and Goldberg (2016) design a neural parser that uses only four features: the BiLSTM vector representations of the top 3 items on the stack and the first item on the buffer. In contrast, Dyer et al. (2015)’s neural parser associates each stack with a “stack LSTM” that encodes their contents. Actions are chosen based on the stack LSTM representations of the stacks, and no more feature engineering is necessary. Moreover, their parser has thus access to any part of the input, its history and stack contents.\nAM as Dependency Parsing: To frame a problem as a dependency parsing problem, each instance of the problem must be encoded as a directed tree, where tokens have heads, which in turn are labeled. For end-to-end AM, we propose the framing illustrated in Figure 3. We highlight two design decisions, the remaining are analogous and/or can be read off the figure.\n• The head of each non-argumentative text token is the document terminating token END, which is a punctuation mark in all our cases. The label of this link is O, the symbol for\n5\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\nnon-argumentative units.\n• The head of each token in a premise is the first token of the claim or premise that it links to. The label of each of these links is (b,P,Supp) or (b,P,Att) depending on whether a premise “supports” or “attacks” a claim or premise; b ∈ {B, I}.\n1 2 3 4 5 6 7 8 9 10 11 12\nO\n(B,P,Supp) (I,P,Supp)\nO\n(B,C,For)\nFigure 3: Dependency representation of sample sentence from §1. Links and selected labels.\nMulti-Task Learning Recently, there has been a lot of interest in so-called multi-task learning (MTL) scenarios, where several tasks are learned jointly (Søgaard and Goldberg, 2016; Peng and Dredze, 2016; Yang et al., 2016; Rusu et al., 2016; Héctor and Plank, 2017). It has been argued that such learning scenarios are closer to human learning because humans often transfer knowledge between several domains. In a neural context, MTL is often implemented via weight sharing: several tasks are trained in the same network architecture, thereby sharing a substantial portion of network’s parameters. This forces the network to learn generalized representations.\nIn the MTL framework of Søgaard and Goldberg (2016) the underlying model is a BiLSTM with several hidden layers. Then, given different tasks, each task k ‘feeds’ from one of the hidden layers in the network. In particular, the hidden states encoded in a specific layer are fed into a multiclass classifier fk. The same work has demonstrated that this MTL protocol may be successful when there is a hierarchy between tasks and ‘lower’ tasks feed from lower layers.\nAM as MTL: We use the same framework STagT for modeling AM as MTL. However, we in addition train auxiliary tasks in the network— each with a distinct label set Y ′.\nLSTM-ER Miwa and Bansal (2016) present a neural end-to-end system for identifying both entities as well as relations between them. Their entity\ndection system is a BLC tagger and their relation detection system is a neural net that predicts a relation for each pair of detected entities. This relation module is a TreeLSTM model that makes use of dependency tree information. In addition to decoupling entity and relation detection but jointly modeling them, pretraining on entities and scheduled sampling (Bengio et al., 2015) is applied to prevent low performance at early training stages of entity detection and relation classification. To adapt LSTM-ER for the argumentative structure encoded in the PE dataset, we model three types of entities (premise, claim, major claim) and four types of relations (for, against, support, attack).\nWe use the feature-based ILP model from Stab and Gurevych (2016) as a comparison system. This system solves the subtasks of AM— component segmentation, component typing, relation identification and typing—independently. Afterwards, it defines an ILP model with various constraints to enforce valid argumentation structure. As features it uses structural, lexical, syntactic and context features, cf. Stab and Gurevych (2016) and Persing and Ng (2016).\nSummarizing, we distinguish our framings in terms of modularity and in terms of their constraints. Modularity: Our dependency parsing framing and LSTM-ER are more modular than STagT because they de-couple relation information from entity information. However, part of this modularity can be regained by using STagT in an MTL setting. Moreover, since entity and relation information are considerably different, such a de-coupling may be advantageous. Constraints: LSTM-ER can, in principle, model any kind of— even many-to-many—relationships between detected entities. Thus, it is not guaranteed to produce trees, as we observe in AM datasets. STagT also does not need to produce trees, but it more severely restricts search space than does LSTMER: each token/component can only relate to one (and not several) other tokens/components. The same constraint is enforced by the dependency parsing framing. All of the tagging modelings, including LSTM-ER, are local models whereas our parsing framing is a global model: it globally enforces a tree structure on the token-level.\nFurther remarks: (1) part of the TreeLSTM modeling inherent to LSTM-ER is ineffective for our data because this modeling exploits dependency tree structures on the sentence level,\n6\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\nwhile relationships between components are almost never on the sentence level. In our data, roughly 92% of all relationships are between components that appear in different sentences. Secondly, (2) that a model enforces a constraint does not necessarily mean that it is more suitable for a respective task. It has frequently been observed that models tend to produce output consistent with constraints in their training data in such situations (Zhang et al., 2017; Héctor and Plank, 2017); thus, they have learned the constraints."
    }, {
      "heading" : "5 Experiments",
      "text" : "This section presents and discusses the empirical results for the AM framings outlined in §4. We relegate issues of pre-trained word embeddings, hyperparameter optimization and further practical issues to the supplementary material. Links to software used as well as some additional error analysis can also be found there.\nEvaluation Metric We adopt the evaluation metric suggested in Persing and Ng (2016). This computes true positives TP, false positives FP, and false negatives FN, and from these calculates component and relation F1 scores as F1 = 2TP2TP+FP+FN . For space reasons, we refer to Persing and Ng (2016) for specifics, but to illustrate, for components, true positives are defined as the set of components in the gold standard for which there exists a predicted component with the same type that ‘matches’. Persing and Ng (2016) define a notion of what we may term ‘level α matching’: for example, at the 100% level (exact match) predicted and gold components must have exactly the same spans, whereas at the 50% level they must only share at least 50% of their tokens (approximate match). We refer to these scores as C-F1 (100%) and C-F1 (50%), respectively. For relations, an analogous F1 score is determined, which we denote by R-F1 (100%) and R-F1 (50%). We note that R-F1 scores depend on C-F1 scores because correct relations must have correct arguments. We also define a ‘global’ F1 score, which is the F1score of C-F1 and R-F1.\nMost of our results are shown in Table 1.\n(a) Dependency Parsing We show results for the two feature-based parsers MST (McDonald et al., 2005), Mate (Bohnet and Nivre, 2012) as well as the neural parsers by Dyer et al. (2015) (LSTM-Parser) and Kiperwasser and Goldberg\n(2016) (Kiperwasser). We train and test all parsers on the paragraph level, because training them on essay level was typically too memory-exhaustive.\nMST mostly labels only non-argumentative units correctly, except for recognizing individual major claims, but never finds their exact spans (e.g., “tourism can create negative impacts on” while the gold major claim is “international tourism can create negative impacts on the destination countries”). Mate is slightly better and in particular recognizes several major claims correctly. Kiperwasser performs decently on the approximate match level, but not on exact level. Upon inspection, we find that the parser often predicts ‘too large’ component spans, e.g., by including following punctuation. The best parser by far is the LSTM-Parser. It is over 100% better than Kiperwasser on exact spans and still several percentage points on approximate spans.\nHow does performance change when we switch to the essay level? For the LSTM-Parser, the best performance on essay level is 32.84%/47.44% CF1 (100%/50% level), and 9.11%/14.45% on RF1, but performance result varied drastically between different parametrizations. Thus, the performance drop between paragraph and essay level is in any case immense.\nSince the employed features of modern featurebased parsers are rather general—such as distance between words or word identities—we had expected them to perform much better. The minimal feature set employed by Kiperwasser is apparently not sufficient for accurate AM but still a lot more powerful than the hand-crafted feature approaches. We hypothesize that the LSTMParser’s good performance, relative to the other parsers, is due to its encoding of the whole stack history—rather than just the top elements on the stack as in Kiperwasser— which makes it aware of much larger ‘contexts’. While the drop in performance from paragraph to essay level is expected, the LSTM-Parser’s deterioration is much more severe than the other models’ surveyed below. We believe that this is due to the very long sequences encountered on essay level. Dependency parsers’ global view upon the data may be too complex a modeling in such situations and/or would require much more training data: the number of possible trees to consider on n tokens may just be too huge a search space when n is large.\n7\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628\n629\n630\n631\n632\n633\n634\n635\n636\n637\n638\n639\n640\n641\n642\n643\n644\n645\n646\n647\n648\n649\n650\n651\n652\n653\n654\n655\n656\n657\n658\n659\n660\n661\n662\n663\n664\n665\n666\n667\n668\n669\n670\n671\n672\n673\n674\n675\n676\n677\n678\n679\n680\n681\n682\n683\n684\n685\n686\n687\n688\n689\n690\n691\n692\n693\n694\n695\n696\n697\n698\n699\nParagraph level Essay level\nAcc. C-F1 R-F1 F1 Acc. C-F1 R-F1 F1 100% 50% 100% 50% 100% 50% 100% 50% 100% 50% 100% 50%\nMST-Parser 31.23 0 6.90 0 1.29 0 2.17 Mate 22.71 2.72 12.34 2.03 4.59 2.32 6.69 Kiperwasser 52.80 26.65 61.57 15.57 34.25 19.65 44.01 LSTM-Parser 55.68 58.86 68.20 35.63 40.87 44.38 51.11 STagBLCC 59.34 66.69 74.08 39.83 44.02 49.87 55.22 60.46 63.23 69.49 34.82 39.68 44.90 50.51\nLSTM-ER 61.67 70.83 77.19 45.52 50.05 55.42 60.72 54.17 66.21 73.02 29.56 32.72 40.87 45.19\nILP 60.32 62.61 73.35 34.74 44.29 44.68 55.23\nTable 1: Performance of dependency parsers, STagBLCC, LSTM-ER and ILP (from top to bottom). The ILP model operates on both levels. Best scores in each column in bold (significant at p < 0.01; Two-sided Wilcoxon signed rank test, pairing F1 scores for documents).\n(b) Sequence Tagging For these experiments, we use the BLCC tagger from Ma and Hovy (2016) and refer to the resulting system as STagBLCC. Again, we observe that paragraph level is considerably easier than essay level. The major benefit is again seen for relations (about 5% points increase from essay to paragraph level). Overall, STagBLCC is ∼13% better than the best parser for C-F1 and ∼11% better for R-F1 on the paragraph level. Our explanation is that taggers are simpler local models, and thus need less training data and are less prone to overfitting. Moreover, they can much better deal with the long sequences because they are largely invariant to length: every subsequence of a sequence forms a valid input to them, while the same is not true for parsers—a subsequence of a sequence does typically not form a tree.\n(c) MTL As indicated, we use the MTL tagging framework from Søgaard and Goldberg (2016) for multi-task experiments. The underlying tagging framework is weaker than that of BLCC: there is no CNN which can take subword information into account and there are no dependencies between output labels: each tagging prediction is made independently of the other predictions. We refer to this system as STagBL.\nAccordingly, as Table 2 shows for the essay level (paragraph level omitted for space reasons), results are generally weaker: For exact match, C-F1 values are about ∼10% points below those of STagBLCC, while approximate match performances are much closer. Hence, the independence assumptions of the BL tagger apparently lead to more ‘local’ errors. An analogous trend holds for argument relations.\nAdditional Tasks: We find that when we train\nSTagBL with only its main task—with label set Y as in Eq. (1)—the overall result is worst. In contrast, when we include the ‘natural subtasks’ “C” (label set YC consists of the projection on the coordinates (b, t) in Y) and/or “R” (label set YR consists of the projection on the coordinates (d, s)), performance increases typically by a few percentage points. This indicates that complex sequence tagging may benefit when we train a “sublabeler” in the same neural architecture, a finding that may be particularly relevant for morphological POS tagging (Müller et al., 2013). Unlike Søgaard and Goldberg (2016), we do not find that the optimal architecture is the one in which “lower” tasks (such as C or R) feed from lower layers. In fact, in one of the best parametrizations the C task and the full task feed from the same layer in the deep BiLSTM. Moreover, we find that the C task is consistently more helpful as an auxiliary task than the R task.\nC-F1 R-F1 F1 100% 50% 100% 50% 100% 50%\nY-3 49.59 65.37 26.28 37.00 34.35 47.25\nY-3:YC -1 54.71 66.84 28.44 37.35 37.40 47.92 Y-3:YR-1 51.32 66.49 26.92 37.18 35.31 47.69 Y-3:YC -3 54.58 67.66 30.22 40.30 38.90 50.51 Y-3:YR-3 53.31 66.71 26.65 35.86 35.53 46.64 Y-3:YC -1:YR-2 52.95 67.84 27.90 39.71 36.54 50.09 Y-3:YC -3:YR-3 54.55 67.60 28.30 38.26 37.26 48.86\nTable 2: Performance of MTL sequence tagging approaches, essay level. Tasks separated by “:”. Layers from which tasks feed are indicated by respective numbers.\nOn essay level, (d) LSTM-ER performs very well on component identification (+5% C-F1 compared to STagBLCC), but rather poor on relation identification (-18% R-F1). Hence, its overall F1 on essay level is considerably below that of\n8\n701\n702\n703\n704\n705\n706\n707\n708\n709\n710\n711\n712\n713\n714\n715\n716\n717\n718\n719\n720\n721\n722\n723\n724\n725\n726\n727\n728\n729\n730\n731\n732\n733\n734\n735\n736\n737\n738\n739\n740\n741\n742\n743\n744\n745\n746\n747\n748\n749\n750\n751\n752\n753\n754\n755\n756\n757\n758\n759\n760\n761\n762\n763\n764\n765\n766\n767\n768\n769\n770\n771\n772\n773\n774\n775\n776\n777\n778\n779\n780\n781\n782\n783\n784\n785\n786\n787\n788\n789\n790\n791\n792\n793\n794\n795\n796\n797\n798\n799\nSTagBLCC. In contrast, LSTM-ER trained and tested on paragraph level substantially outperforms all other systems discussed, both for component as well as for relation identification.\nWe think that its generally excellent performance on components is due to LSTM-ER’s de-coupling of component and relation tasks. Our findings indicate that a similar result can be achieved for STagT via MTL when components and relations are included as auxiliary tasks, cf. Table 2. For example, the improvement of LSTM-ER over STagBLCC, for C-F1, roughly matches the increase for STagBL when including components and relations separately (Y-3:YC-3:YR-3) over not including them as auxiliary tasks (Y-3). Lastly, the better performance of LSTM-ER over STagBLCC for relations on paragraph level appears to be a consequence of its better performance on components. E.g., when both arguments are correctly predicted, STagBLCC has even higher chance of getting their relation correct than LSTM-ER (95.34% vs. 94.17%).\nWhy does LSTM-ER degrade so much on essay level for R-F1? As said, text sequences are much longer on essay level than on paragraph level— hence, there are on average many more entities on essay level. Thus, there are also many more possible relations between all entities discovered in a text—namely, there are O(2m 2 ) possible relations between m discovered components. Due to its generality, LSTM-ER considers all these relations as plausible, while STagT does not (for any of choice of T ): e.g., our coding explicitly constrains each premise to link to exactly one other component, rather than to 0, . . . ,m possible components, as LSTM-ER allows. In addition, our explicit coding of distance values d biases the learner T to reflect the distribution of distance values found in real essays—namely, that related components are typically close in terms of the number of components between them. In contrast, LSTM-ER only mildly prefers short-range dependencies over long-range dependencies, cf. Figure 4.\nThe (e) ILP model has access to both paragraph and essay level information and thus has always more information than all the neural systems compared to. Thus, it also knows in which paragraph in an essay it is. This is useful particularly for major claims, which always occur in first or last paragraphs in our data. Still, its performance is equal to or lower than that of LSTM-ER and STagBLCC\n0\n0.1\n0.2\n0.3\n0.4\n0.5\n0.6\n0.7\n0.8\n2 4 6 8 10\npr ob\n.c or\nre ct\n|d|\nLSTM-ER STagBLCC\nFigure 4: Probability of correct relation identification given true distance is |d|.\nwhen both are evaluated on paragraph level."
    }, {
      "heading" : "6 Conclusion",
      "text" : "We present the first study on neural end-to-end AM. We experimented with different framings, such as encoding AM as a dependency parsing problem, as a sequence tagging problem with particular label set, as a multi-task sequence tagging problem, and as a problem with both sequential and tree structure information. We show that (1) neural computational AM is as good or (substantially) better than a competing feature-based ILP formulation, while eliminating the need for manual feature engineering and costly ILP constraint designing. (2) BiLSTM taggers perform very well for component detection, as demonstrated for our STagT frameworks, for T = BLCC and T = BL, as well as for LSTM-ER (BLC tagger). (3) (Naively) coupling component and relation detection is not optimal, but both tasks should be treated seperately, but modeled jointly. (4) Relation detection is more difficult: when there are few entities in a text (“short documents”), a more general framework such as that provided in LSTM-ER performs reasonably well. When there are many entities (“long documents”), a more restrained modeling is preferable. These are also our policy recommendations. Our work yields new state-ofthe-art results in end-to-end AM on the PE dataset from Stab and Gurevych (2016).\nAnother possible framing, not considered here, is to frame AM as an encoder-decoder problem (Bahdanau et al., 2015; Vinyals et al., 2015). This is an even more general modeling than LSTM-ER. Its suitability for the end-to-end learning task is scope for future work, but its adequacy for component typing and relation identification has been investigated in research submitted during the preparation of our current work (Potash et al., 2017).\n9\n801\n802\n803\n804\n805\n806\n807\n808\n809\n810\n811\n812\n813\n814\n815\n816\n817\n818\n819\n820\n821\n822\n823\n824\n825\n826\n827\n828\n829\n830\n831\n832\n833\n834\n835\n836\n837\n838\n839\n840\n841\n842\n843\n844\n845\n846\n847\n848\n849\n850\n851\n852\n853\n854\n855\n856\n857\n858\n859\n860\n861\n862\n863\n864\n865\n866\n867\n868\n869\n870\n871\n872\n873\n874\n875\n876\n877\n878\n879\n880\n881\n882\n883\n884\n885\n886\n887\n888\n889\n890\n891\n892\n893\n894\n895\n896\n897\n898\n899"
    } ],
    "references" : [ {
      "title" : "Neural machine translation by jointly learning to align and translate",
      "author" : [ "Dzmitry Bahdanau", "Kyunghyun Cho", "Yoshua Bengio." ],
      "venue" : "Proc. ICLR.",
      "citeRegEx" : "Bahdanau et al\\.,? 2015",
      "shortCiteRegEx" : "Bahdanau et al\\.",
      "year" : 2015
    }, {
      "title" : "Scheduled sampling for sequence prediction with recurrent neural networks",
      "author" : [ "Samy Bengio", "Oriol Vinyals", "Navdeep Jaitly", "Noam Shazeer." ],
      "venue" : "C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors, Advances in",
      "citeRegEx" : "Bengio et al\\.,? 2015",
      "shortCiteRegEx" : "Bengio et al\\.",
      "year" : 2015
    }, {
      "title" : "Identifying justifications in written dialogs",
      "author" : [ "Or Biran", "Owen Rambow." ],
      "venue" : "Fifth IEEE International Conference on Semantic Computing (ICSC). pages 162–168.",
      "citeRegEx" : "Biran and Rambow.,? 2011",
      "shortCiteRegEx" : "Biran and Rambow.",
      "year" : 2011
    }, {
      "title" : "A transitionbased system for joint part-of-speech tagging and labeled non-projective dependency parsing",
      "author" : [ "Bernd Bohnet", "Joakim Nivre." ],
      "venue" : "Proceedings of the 2012 Joint Conference on Empirical Methods in Natural Language Processing and",
      "citeRegEx" : "Bohnet and Nivre.,? 2012",
      "shortCiteRegEx" : "Bohnet and Nivre.",
      "year" : 2012
    }, {
      "title" : "A fast and accurate dependency parser using neural networks",
      "author" : [ "Danqi Chen", "Christopher D Manning." ],
      "venue" : "Empirical Methods in Natural Language Processing (EMNLP).",
      "citeRegEx" : "Chen and Manning.,? 2014",
      "shortCiteRegEx" : "Chen and Manning.",
      "year" : 2014
    }, {
      "title" : "A unified architecture for natural language processing: Deep neural networks with multitask learning",
      "author" : [ "Ronan Collobert", "Jason Weston." ],
      "venue" : "Proceedings of the 25th International Conference on Machine Learning. ACM, New",
      "citeRegEx" : "Collobert and Weston.,? 2008",
      "shortCiteRegEx" : "Collobert and Weston.",
      "year" : 2008
    }, {
      "title" : "Transitionbased dependency parsing with stack long shortterm memory",
      "author" : [ "Chris Dyer", "Miguel Ballesteros", "Wang Ling", "Austin Matthews", "Noah A. Smith." ],
      "venue" : "Proceedings of the 53rd Annual Meeting of the Association for Computational Lin-",
      "citeRegEx" : "Dyer et al\\.,? 2015",
      "shortCiteRegEx" : "Dyer et al\\.",
      "year" : 2015
    }, {
      "title" : "Argument extraction for supporting public policy formulation",
      "author" : [ "Eirini Florou", "Stasinos Konstantopoulos", "Antonis Koukourikos", "Pythagoras Karampiperis." ],
      "venue" : "Proceedings of the 7th Workshop on Language Technology for Cultural Heritage, Social",
      "citeRegEx" : "Florou et al\\.,? 2013",
      "shortCiteRegEx" : "Florou et al\\.",
      "year" : 2013
    }, {
      "title" : "Exploiting debate portals for semi-supervised argumentation mining in user-generated web discourse",
      "author" : [ "Ivan Habernal", "Iryna Gurevych." ],
      "venue" : "In",
      "citeRegEx" : "Habernal and Gurevych.,? 2015",
      "shortCiteRegEx" : "Habernal and Gurevych.",
      "year" : 2015
    }, {
      "title" : "Argumentation Mining in User-Generated Web Discourse",
      "author" : [ "Ivan Habernal", "Iryna Gurevych." ],
      "venue" : "Computational Linguistics 43(1). In press. Preprint: http://arxiv.org/abs/1601.02403.",
      "citeRegEx" : "Habernal and Gurevych.,? 2016",
      "shortCiteRegEx" : "Habernal and Gurevych.",
      "year" : 2016
    }, {
      "title" : "When is multitask learning effective? semantic sequence prediction under varying data conditions",
      "author" : [ "Martnez Alonso Héctor", "Barbara Plank." ],
      "venue" : "Proceedings of EACL 2017 (long paper). Association for Computational Linguistics.",
      "citeRegEx" : "Héctor and Plank.,? 2017",
      "shortCiteRegEx" : "Héctor and Plank.",
      "year" : 2017
    }, {
      "title" : "Long short-term memory",
      "author" : [ "Sepp Hochreiter", "Jürgen Schmidhuber." ],
      "venue" : "Neural Comput. 9(8):1735– 1780. https://doi.org/10.1162/neco.1997.9.8.1735.",
      "citeRegEx" : "Hochreiter and Schmidhuber.,? 1997",
      "shortCiteRegEx" : "Hochreiter and Schmidhuber.",
      "year" : 1997
    }, {
      "title" : "Bidirectional LSTM-CRF models for sequence tagging",
      "author" : [ "Zhiheng Huang", "Wei Xu", "Kai Yu." ],
      "venue" : "CoRR abs/1508.01991. http://arxiv.org/abs/1508.01991.",
      "citeRegEx" : "Huang et al\\.,? 2015",
      "shortCiteRegEx" : "Huang et al\\.",
      "year" : 2015
    }, {
      "title" : "Simple and accurate dependency parsing using bidirectional lstm feature representations",
      "author" : [ "Eliyahu Kiperwasser", "Yoav Goldberg." ],
      "venue" : "Transactions of the Association for Computational Linguistics 4:313–327.",
      "citeRegEx" : "Kiperwasser and Goldberg.,? 2016",
      "shortCiteRegEx" : "Kiperwasser and Goldberg.",
      "year" : 2016
    }, {
      "title" : "Linking the thoughts: Analysis of argumentation structures in scientific publications",
      "author" : [ "Christian Kirschner", "Judith Eckle-Kohler", "Iryna Gurevych." ],
      "venue" : "Proceedings of the 2nd Workshop on Argumentation Mining held in conjunction with the 2015 Con-",
      "citeRegEx" : "Kirschner et al\\.,? 2015",
      "shortCiteRegEx" : "Kirschner et al\\.",
      "year" : 2015
    }, {
      "title" : "Finding the write stuff: Automatic identification of discourse structure in student essays",
      "author" : [ "Kevin Knight", "Daniel Marcu", "Jill Burstein." ],
      "venue" : "IEEE Intelligent Systems 18:32–39.",
      "citeRegEx" : "Knight et al\\.,? 2003",
      "shortCiteRegEx" : "Knight et al\\.",
      "year" : 2003
    }, {
      "title" : "Context dependent claim detection",
      "author" : [ "Ran Levy", "Yonatan Bilu", "Daniel Hershcovich", "Ehud Aharoni", "Noam Slonim." ],
      "venue" : "COLING 2014, 25th International Conference on Computational Linguistics, Proceedings of the Conference: Technical Papers,",
      "citeRegEx" : "Levy et al\\.,? 2014",
      "shortCiteRegEx" : "Levy et al\\.",
      "year" : 2014
    }, {
      "title" : "End-to-end sequence labeling via bi-directional lstm-cnns-crf",
      "author" : [ "Xuezhe Ma", "Eduard Hovy." ],
      "venue" : "Proceedings of the 54th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers). Association for Computational",
      "citeRegEx" : "Ma and Hovy.,? 2016",
      "shortCiteRegEx" : "Ma and Hovy.",
      "year" : 2016
    }, {
      "title" : "Non-projective dependency parsing using spanning tree algorithms",
      "author" : [ "Ryan McDonald", "Fernando Pereira", "Kiril Ribarov", "Jan Hajič." ],
      "venue" : "Proceedings of the Conference on Human Language Technology",
      "citeRegEx" : "McDonald et al\\.,? 2005",
      "shortCiteRegEx" : "McDonald et al\\.",
      "year" : 2005
    }, {
      "title" : "End-to-end relation extraction using lstms on sequences and tree structures",
      "author" : [ "Makoto Miwa", "Mohit Bansal." ],
      "venue" : "Proceedings of the 54th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers). Association for Compu-",
      "citeRegEx" : "Miwa and Bansal.,? 2016",
      "shortCiteRegEx" : "Miwa and Bansal.",
      "year" : 2016
    }, {
      "title" : "Automatic detection of arguments in legal texts",
      "author" : [ "Marie-Francine Moens", "Erik Boiy", "Raquel Mochales Palau", "Chris Reed." ],
      "venue" : "Proceedings of the 11th International Conference on Artificial Intelligence and Law. ACM, New",
      "citeRegEx" : "Moens et al\\.,? 2007",
      "shortCiteRegEx" : "Moens et al\\.",
      "year" : 2007
    }, {
      "title" : "Efficient higher-order CRFs for morphological tagging",
      "author" : [ "Thomas Müller", "Helmut Schmid", "Hinrich Schütze." ],
      "venue" : "Proceedings of the 2013 Conference on Empirical Methods in Natural Language Processing. Association for Computational Linguis-",
      "citeRegEx" : "Müller et al\\.,? 2013",
      "shortCiteRegEx" : "Müller et al\\.",
      "year" : 2013
    }, {
      "title" : "Argumentation mining: The detection, classification and structure of arguments in text",
      "author" : [ "Raquel Mochales Palau", "Marie-Francine Moens." ],
      "venue" : "Proceedings of the 12th International Conference on Artificial Intelligence and Law. ACM,",
      "citeRegEx" : "Palau and Moens.,? 2009",
      "shortCiteRegEx" : "Palau and Moens.",
      "year" : 2009
    }, {
      "title" : "Joint prediction in mst-style discourse parsing for argumentation mining",
      "author" : [ "Andreas Peldszus", "Manfred Stede." ],
      "venue" : "Proceedings of the 2015 Conference on Empirical Methods in Natural Language Processing. Association for Computa-",
      "citeRegEx" : "Peldszus and Stede.,? 2015",
      "shortCiteRegEx" : "Peldszus and Stede.",
      "year" : 2015
    }, {
      "title" : "An annotated corpus of argumentative microtexts",
      "author" : [ "Andreas Peldszus", "Manfred Stede." ],
      "venue" : "Argumentation and Reasoned Action: Proceedings of the 1st European Conference on Argumentation. Lisabon, pages 801–815.",
      "citeRegEx" : "Peldszus and Stede.,? 2016",
      "shortCiteRegEx" : "Peldszus and Stede.",
      "year" : 2016
    }, {
      "title" : "Multitask multi-domain representation learning for sequence tagging",
      "author" : [ "Nanyun Peng", "Mark Dredze." ],
      "venue" : "CoRR abs/1608.02689. http://arxiv.org/abs/1608.02689.",
      "citeRegEx" : "Peng and Dredze.,? 2016",
      "shortCiteRegEx" : "Peng and Dredze.",
      "year" : 2016
    }, {
      "title" : "Modeling argument strength in student essays",
      "author" : [ "Isaac Persing", "Vincent Ng." ],
      "venue" : "Proceedings of the 53rd Annual Meeting of the Association for Computational Linguistics and the 7th International Joint Conference on Natural Language Processing",
      "citeRegEx" : "Persing and Ng.,? 2015",
      "shortCiteRegEx" : "Persing and Ng.",
      "year" : 2015
    }, {
      "title" : "End-to-end argumentation mining in student essays",
      "author" : [ "Isaac Persing", "Vincent Ng." ],
      "venue" : "Proceedings of the 2016 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Tech-",
      "citeRegEx" : "Persing and Ng.,? 2016",
      "shortCiteRegEx" : "Persing and Ng.",
      "year" : 2016
    }, {
      "title" : "Here’s my point: Argumentation Mining with Pointer Networks",
      "author" : [ "Peter Potash", "Alexey Romanov", "Anna Rumshisky." ],
      "venue" : "Arxiv preprint https://arxiv.org/abs/1612.08994 .",
      "citeRegEx" : "Potash et al\\.,? 2017",
      "shortCiteRegEx" : "Potash et al\\.",
      "year" : 2017
    }, {
      "title" : "Language resources for studying argument",
      "author" : [ "Chris Reed", "Raquel Mochales-Palau", "Glenn Rowe", "Marie-Francine Moens." ],
      "venue" : "Proceedings of the Sixth International Conference on Language Resources and Evaluation. Marrakech, Morocco, LREC ’08,",
      "citeRegEx" : "Reed et al\\.,? 2008",
      "shortCiteRegEx" : "Reed et al\\.",
      "year" : 2008
    }, {
      "title" : "Show me your evidence - an automatic method for context dependent evidence detection",
      "author" : [ "Ruty Rinott", "Lena Dankin", "Carlos Alzate Perez", "Mitesh M. Khapra", "Ehud Aharoni", "Noam Slonim." ],
      "venue" : "Proceedings of the 2015 Conference on Em-",
      "citeRegEx" : "Rinott et al\\.,? 2015",
      "shortCiteRegEx" : "Rinott et al\\.",
      "year" : 2015
    }, {
      "title" : "Applying kernel methods to argumentation mining",
      "author" : [ "N. Rooney", "H. Wang", "F. Browne." ],
      "venue" : "TwentyFifth International FLAIRS Conference.",
      "citeRegEx" : "Rooney et al\\.,? 2012",
      "shortCiteRegEx" : "Rooney et al\\.",
      "year" : 2012
    }, {
      "title" : "Progressive neural networks",
      "author" : [ "Andrei A. Rusu", "Neil C. Rabinowitz", "Guillaume Desjardins", "Hubert Soyer", "James Kirkpatrick", "Koray Kavukcuoglu", "Razvan Pascanu", "Raia Hadsell." ],
      "venue" : "arXiv preprint arXiv:1606.04671 .",
      "citeRegEx" : "Rusu et al\\.,? 2016",
      "shortCiteRegEx" : "Rusu et al\\.",
      "year" : 2016
    }, {
      "title" : "Deep multi-task learning with low level tasks supervised at lower layers",
      "author" : [ "Anders Søgaard", "Yoav Goldberg." ],
      "venue" : "Proceedings of the 54th Annual Meeting of the Association for Computational Linguistics (Volume 2: Short Papers). Association for",
      "citeRegEx" : "Søgaard and Goldberg.,? 2016",
      "shortCiteRegEx" : "Søgaard and Goldberg.",
      "year" : 2016
    }, {
      "title" : "Evaluating argumentative and narrative essays using graphs",
      "author" : [ "Swapna Somasundaran", "Brian Riordan", "Binod Gyawali", "Su-Youn Yoon." ],
      "venue" : "COLING 2016, 26th International Conference on Computational Linguistics, Proceedings of the",
      "citeRegEx" : "Somasundaran et al\\.,? 2016",
      "shortCiteRegEx" : "Somasundaran et al\\.",
      "year" : 2016
    }, {
      "title" : "Parsing argumentation structures in persuasive essays",
      "author" : [ "Christian Stab", "Iryna Gurevych." ],
      "venue" : "Arxiv preprint https://arxiv.org/abs/1604.07370, under review .",
      "citeRegEx" : "Stab and Gurevych.,? 2016",
      "shortCiteRegEx" : "Stab and Gurevych.",
      "year" : 2016
    }, {
      "title" : "Pointer networks",
      "author" : [ "Oriol Vinyals", "Meire Fortunato", "Navdeep Jaitly." ],
      "venue" : "C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors, Advances in Neural Information Processing Systems 28, Curran Associates, Inc., pages",
      "citeRegEx" : "Vinyals et al\\.,? 2015",
      "shortCiteRegEx" : "Vinyals et al\\.",
      "year" : 2015
    }, {
      "title" : "Multi-task cross-lingual sequence tagging from scratch",
      "author" : [ "Zhilin Yang", "Ruslan Salakhutdinov", "William W. Cohen." ],
      "venue" : "CoRR abs/1603.06270.",
      "citeRegEx" : "Yang et al\\.,? 2016",
      "shortCiteRegEx" : "Yang et al\\.",
      "year" : 2016
    }, {
      "title" : "Using context to predict the purpose of argumentative writing revisions",
      "author" : [ "Fan Zhang", "Diane J. Litman." ],
      "venue" : "The Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies. pages",
      "citeRegEx" : "Zhang and Litman.,? 2016",
      "shortCiteRegEx" : "Zhang and Litman.",
      "year" : 2016
    }, {
      "title" : "Dependency parsing as head selection",
      "author" : [ "Xingxing Zhang", "Jianpeng Cheng", "Mirella Lapata." ],
      "venue" : "Proceedings of EACL 2017 (long papers). Association for Computational Linguistics.",
      "citeRegEx" : "Zhang et al\\.,? 2017",
      "shortCiteRegEx" : "Zhang et al\\.",
      "year" : 2017
    } ],
    "referenceMentions" : [ {
      "referenceID" : 27,
      "context" : "This involves several subtasks, such as: (a) separating argumentative units from non-argumentative units, also called ‘component segmentation’; (b) classifying argument components into classes such as “Premise” or “Claim”; (c) finding relations between argument components; (d) classifying relations into classes such as “Support” or “Attack” (Persing and Ng, 2016; Stab and Gurevych, 2016).",
      "startOffset" : 343,
      "endOffset" : 390
    }, {
      "referenceID" : 35,
      "context" : "This involves several subtasks, such as: (a) separating argumentative units from non-argumentative units, also called ‘component segmentation’; (b) classifying argument components into classes such as “Premise” or “Claim”; (c) finding relations between argument components; (d) classifying relations into classes such as “Support” or “Attack” (Persing and Ng, 2016; Stab and Gurevych, 2016).",
      "startOffset" : 343,
      "endOffset" : 390
    }, {
      "referenceID" : 29,
      "context" : "Hand-crafted features pose a problem because AM is to some degree an “arbitrary” problem in that the notion of “argument” critically relies on the underlying argumentation theory (Reed et al., 2008; Biran and Rambow, 2011; Habernal and Gurevych, 2015; Stab and Gurevych, 2016).",
      "startOffset" : 179,
      "endOffset" : 276
    }, {
      "referenceID" : 2,
      "context" : "Hand-crafted features pose a problem because AM is to some degree an “arbitrary” problem in that the notion of “argument” critically relies on the underlying argumentation theory (Reed et al., 2008; Biran and Rambow, 2011; Habernal and Gurevych, 2015; Stab and Gurevych, 2016).",
      "startOffset" : 179,
      "endOffset" : 276
    }, {
      "referenceID" : 8,
      "context" : "Hand-crafted features pose a problem because AM is to some degree an “arbitrary” problem in that the notion of “argument” critically relies on the underlying argumentation theory (Reed et al., 2008; Biran and Rambow, 2011; Habernal and Gurevych, 2015; Stab and Gurevych, 2016).",
      "startOffset" : 179,
      "endOffset" : 276
    }, {
      "referenceID" : 35,
      "context" : "Hand-crafted features pose a problem because AM is to some degree an “arbitrary” problem in that the notion of “argument” critically relies on the underlying argumentation theory (Reed et al., 2008; Biran and Rambow, 2011; Habernal and Gurevych, 2015; Stab and Gurevych, 2016).",
      "startOffset" : 179,
      "endOffset" : 276
    }, {
      "referenceID" : 23,
      "context" : "Two recent approaches to this end-to-end learning scenario are Persing and Ng (2016) and Stab and Gurevych (2016).",
      "startOffset" : 63,
      "endOffset" : 85
    }, {
      "referenceID" : 23,
      "context" : "Two recent approaches to this end-to-end learning scenario are Persing and Ng (2016) and Stab and Gurevych (2016). Both solve the end-to-end task by first training independent models for each subtask and then defining an integer linear programming (ILP) model that encodes global constraints such as that each premise has a parent, etc.",
      "startOffset" : 63,
      "endOffset" : 114
    }, {
      "referenceID" : 23,
      "context" : "Hence, it is not surprising that “discourse parsing” has been suggested for AM (Peldszus and Stede, 2015).",
      "startOffset" : 79,
      "endOffset" : 105
    }, {
      "referenceID" : 5,
      "context" : "Third, we frame AM as a multi-task (tagging) problem (Caruana, 1997; Collobert and Weston, 2008).",
      "startOffset" : 53,
      "endOffset" : 96
    }, {
      "referenceID" : 7,
      "context" : ", by Habernal and Gurevych (2016). The challenge in the end-to-end setting is to also include relations into the tagging scheme, which we realize by coding the distances between linked components into the tag label.",
      "startOffset" : 5,
      "endOffset" : 34
    }, {
      "referenceID" : 5,
      "context" : "Third, we frame AM as a multi-task (tagging) problem (Caruana, 1997; Collobert and Weston, 2008). We experiment with subtasks of AM— e.g., component detection—as auxiliary tasks and investigate whether this improves performance on the AM problem. Adding such subtasks can be seen as analogous to de-coupling, e.g., component detection from the full AM problem. Fourth, we evaluate the model of Miwa and Bansal (2016) that combines sequential (entity) and tree structure (relation) information and is in principle applicable to any problem where the aim is to extract entities and their relations.",
      "startOffset" : 69,
      "endOffset" : 417
    }, {
      "referenceID" : 22,
      "context" : "AM has applications in legal decision making (Palau and Moens, 2009; Moens et al., 2007), document summarization, and the analysis of scientific papers (Kirschner et al.",
      "startOffset" : 45,
      "endOffset" : 88
    }, {
      "referenceID" : 20,
      "context" : "AM has applications in legal decision making (Palau and Moens, 2009; Moens et al., 2007), document summarization, and the analysis of scientific papers (Kirschner et al.",
      "startOffset" : 45,
      "endOffset" : 88
    }, {
      "referenceID" : 14,
      "context" : ", 2007), document summarization, and the analysis of scientific papers (Kirschner et al., 2015).",
      "startOffset" : 71,
      "endOffset" : 95
    }, {
      "referenceID" : 38,
      "context" : "Its importance for the educational domain has been highlighted by recent work on writing assistance (Zhang and Litman, 2016) and essay scoring (Persing and Ng, 2015; Somasundaran et al.",
      "startOffset" : 100,
      "endOffset" : 124
    }, {
      "referenceID" : 26,
      "context" : "Its importance for the educational domain has been highlighted by recent work on writing assistance (Zhang and Litman, 2016) and essay scoring (Persing and Ng, 2015; Somasundaran et al., 2016).",
      "startOffset" : 143,
      "endOffset" : 192
    }, {
      "referenceID" : 34,
      "context" : "Its importance for the educational domain has been highlighted by recent work on writing assistance (Zhang and Litman, 2016) and essay scoring (Persing and Ng, 2015; Somasundaran et al., 2016).",
      "startOffset" : 143,
      "endOffset" : 192
    }, {
      "referenceID" : 7,
      "context" : "Most works on AM address subtasks of AM such as locating/typing components (Florou et al., 2013; Moens et al., 2007; Rooney et al., 2012; Knight et al., 2003; Levy et al., 2014; Rinott et al., 2015).",
      "startOffset" : 75,
      "endOffset" : 198
    }, {
      "referenceID" : 20,
      "context" : "Most works on AM address subtasks of AM such as locating/typing components (Florou et al., 2013; Moens et al., 2007; Rooney et al., 2012; Knight et al., 2003; Levy et al., 2014; Rinott et al., 2015).",
      "startOffset" : 75,
      "endOffset" : 198
    }, {
      "referenceID" : 31,
      "context" : "Most works on AM address subtasks of AM such as locating/typing components (Florou et al., 2013; Moens et al., 2007; Rooney et al., 2012; Knight et al., 2003; Levy et al., 2014; Rinott et al., 2015).",
      "startOffset" : 75,
      "endOffset" : 198
    }, {
      "referenceID" : 15,
      "context" : "Most works on AM address subtasks of AM such as locating/typing components (Florou et al., 2013; Moens et al., 2007; Rooney et al., 2012; Knight et al., 2003; Levy et al., 2014; Rinott et al., 2015).",
      "startOffset" : 75,
      "endOffset" : 198
    }, {
      "referenceID" : 16,
      "context" : "Most works on AM address subtasks of AM such as locating/typing components (Florou et al., 2013; Moens et al., 2007; Rooney et al., 2012; Knight et al., 2003; Levy et al., 2014; Rinott et al., 2015).",
      "startOffset" : 75,
      "endOffset" : 198
    }, {
      "referenceID" : 30,
      "context" : "Most works on AM address subtasks of AM such as locating/typing components (Florou et al., 2013; Moens et al., 2007; Rooney et al., 2012; Knight et al., 2003; Levy et al., 2014; Rinott et al., 2015).",
      "startOffset" : 75,
      "endOffset" : 198
    }, {
      "referenceID" : 7,
      "context" : "Most works on AM address subtasks of AM such as locating/typing components (Florou et al., 2013; Moens et al., 2007; Rooney et al., 2012; Knight et al., 2003; Levy et al., 2014; Rinott et al., 2015). Relatively few works address the full AM problem of component and relation identification. Peldszus and Stede (2016) present a corpus of microtexts containing only argumentatively relevant text of controlled complexity.",
      "startOffset" : 76,
      "endOffset" : 317
    }, {
      "referenceID" : 7,
      "context" : "Most works on AM address subtasks of AM such as locating/typing components (Florou et al., 2013; Moens et al., 2007; Rooney et al., 2012; Knight et al., 2003; Levy et al., 2014; Rinott et al., 2015). Relatively few works address the full AM problem of component and relation identification. Peldszus and Stede (2016) present a corpus of microtexts containing only argumentatively relevant text of controlled complexity. To our best knowledge, Stab and Gurevych (2016) created the only corpus of attested high quality which annotates the AM problem in its entire complexity: it contains token-level annotations of components, their types, as well as relations and their types.",
      "startOffset" : 76,
      "endOffset" : 468
    }, {
      "referenceID" : 35,
      "context" : "We use the dataset of persuasive essays (PE) from Stab and Gurevych (2016), which contains student essays written in response to controversial topics such as “competition or cooperation—which is better?” The corpus consists of 402 essays, 80 of which are reserved for testing.",
      "startOffset" : 50,
      "endOffset" : 75
    }, {
      "referenceID" : 11,
      "context" : "We choose particular RNNs, namely, LSTMs (Hochreiter and Schmidhuber, 1997), which are popular for being able to address vanishing/exploding gradients problems.",
      "startOffset" : 41,
      "endOffset" : 75
    }, {
      "referenceID" : 12,
      "context" : "This class of models is called BiLSTM-CRF (BLC) (Huang et al., 2015).",
      "startOffset" : 48,
      "endOffset" : 68
    }, {
      "referenceID" : 11,
      "context" : "We choose particular RNNs, namely, LSTMs (Hochreiter and Schmidhuber, 1997), which are popular for being able to address vanishing/exploding gradients problems. In addition to considering a left-to-right flow of information, bidirectional LSTMs also capture information to the right of the current input token. The most recent generation of neural tagging models add label dependencies to BiLSTMs (BL), so that successive output decisions are not made independently. This class of models is called BiLSTM-CRF (BLC) (Huang et al., 2015). The model of Ma and Hovy (2016) adds convolutional neural nets (CNNs) on the character-level to BiLSTM-CRFs, leading to BiLSTM-CRF-CNN (BLCC) models.",
      "startOffset" : 42,
      "endOffset" : 569
    }, {
      "referenceID" : 13,
      "context" : "Dependency Parsing methods can be classified into graph-based and transition-based approaches (Kiperwasser and Goldberg, 2016).",
      "startOffset" : 94,
      "endOffset" : 126
    }, {
      "referenceID" : 4,
      "context" : "Instead, they rely, for example, on encoding the core features of parsers as low-dimensional embedding vectors (Chen and Manning, 2014) but ignore feature combinations.",
      "startOffset" : 111,
      "endOffset" : 135
    }, {
      "referenceID" : 15,
      "context" : "Traditional dependency parsers used handcrafted feature functions that look at “core” elements such as “word on top of the stack”, “POS of word on top of the stack”, and conjunctions of core features such as “word is X and POS is Y” (see McDonald et al. (2005)).",
      "startOffset" : 238,
      "endOffset" : 261
    }, {
      "referenceID" : 4,
      "context" : "Instead, they rely, for example, on encoding the core features of parsers as low-dimensional embedding vectors (Chen and Manning, 2014) but ignore feature combinations. Kiperwasser and Goldberg (2016) design a neural parser that uses only four features: the BiLSTM vector representations of the top 3 items on the stack and the first item on the buffer.",
      "startOffset" : 112,
      "endOffset" : 201
    }, {
      "referenceID" : 4,
      "context" : "Instead, they rely, for example, on encoding the core features of parsers as low-dimensional embedding vectors (Chen and Manning, 2014) but ignore feature combinations. Kiperwasser and Goldberg (2016) design a neural parser that uses only four features: the BiLSTM vector representations of the top 3 items on the stack and the first item on the buffer. In contrast, Dyer et al. (2015)’s neural parser associates each stack with a “stack LSTM” that encodes their contents.",
      "startOffset" : 112,
      "endOffset" : 386
    }, {
      "referenceID" : 33,
      "context" : "Multi-Task Learning Recently, there has been a lot of interest in so-called multi-task learning (MTL) scenarios, where several tasks are learned jointly (Søgaard and Goldberg, 2016; Peng and Dredze, 2016; Yang et al., 2016; Rusu et al., 2016; Héctor and Plank, 2017).",
      "startOffset" : 153,
      "endOffset" : 266
    }, {
      "referenceID" : 25,
      "context" : "Multi-Task Learning Recently, there has been a lot of interest in so-called multi-task learning (MTL) scenarios, where several tasks are learned jointly (Søgaard and Goldberg, 2016; Peng and Dredze, 2016; Yang et al., 2016; Rusu et al., 2016; Héctor and Plank, 2017).",
      "startOffset" : 153,
      "endOffset" : 266
    }, {
      "referenceID" : 37,
      "context" : "Multi-Task Learning Recently, there has been a lot of interest in so-called multi-task learning (MTL) scenarios, where several tasks are learned jointly (Søgaard and Goldberg, 2016; Peng and Dredze, 2016; Yang et al., 2016; Rusu et al., 2016; Héctor and Plank, 2017).",
      "startOffset" : 153,
      "endOffset" : 266
    }, {
      "referenceID" : 32,
      "context" : "Multi-Task Learning Recently, there has been a lot of interest in so-called multi-task learning (MTL) scenarios, where several tasks are learned jointly (Søgaard and Goldberg, 2016; Peng and Dredze, 2016; Yang et al., 2016; Rusu et al., 2016; Héctor and Plank, 2017).",
      "startOffset" : 153,
      "endOffset" : 266
    }, {
      "referenceID" : 10,
      "context" : "Multi-Task Learning Recently, there has been a lot of interest in so-called multi-task learning (MTL) scenarios, where several tasks are learned jointly (Søgaard and Goldberg, 2016; Peng and Dredze, 2016; Yang et al., 2016; Rusu et al., 2016; Héctor and Plank, 2017).",
      "startOffset" : 153,
      "endOffset" : 266
    }, {
      "referenceID" : 10,
      "context" : ", 2016; Héctor and Plank, 2017). It has been argued that such learning scenarios are closer to human learning because humans often transfer knowledge between several domains. In a neural context, MTL is often implemented via weight sharing: several tasks are trained in the same network architecture, thereby sharing a substantial portion of network’s parameters. This forces the network to learn generalized representations. In the MTL framework of Søgaard and Goldberg (2016) the underlying model is a BiLSTM with several hidden layers.",
      "startOffset" : 8,
      "endOffset" : 478
    }, {
      "referenceID" : 1,
      "context" : "In addition to decoupling entity and relation detection but jointly modeling them, pretraining on entities and scheduled sampling (Bengio et al., 2015) is applied to prevent low performance at early training stages of entity detection and relation classification.",
      "startOffset" : 130,
      "endOffset" : 151
    }, {
      "referenceID" : 18,
      "context" : "LSTM-ER Miwa and Bansal (2016) present a neural end-to-end system for identifying both entities as well as relations between them.",
      "startOffset" : 8,
      "endOffset" : 31
    }, {
      "referenceID" : 1,
      "context" : "In addition to decoupling entity and relation detection but jointly modeling them, pretraining on entities and scheduled sampling (Bengio et al., 2015) is applied to prevent low performance at early training stages of entity detection and relation classification. To adapt LSTM-ER for the argumentative structure encoded in the PE dataset, we model three types of entities (premise, claim, major claim) and four types of relations (for, against, support, attack). We use the feature-based ILP model from Stab and Gurevych (2016) as a comparison system.",
      "startOffset" : 131,
      "endOffset" : 529
    }, {
      "referenceID" : 1,
      "context" : "In addition to decoupling entity and relation detection but jointly modeling them, pretraining on entities and scheduled sampling (Bengio et al., 2015) is applied to prevent low performance at early training stages of entity detection and relation classification. To adapt LSTM-ER for the argumentative structure encoded in the PE dataset, we model three types of entities (premise, claim, major claim) and four types of relations (for, against, support, attack). We use the feature-based ILP model from Stab and Gurevych (2016) as a comparison system. This system solves the subtasks of AM— component segmentation, component typing, relation identification and typing—independently. Afterwards, it defines an ILP model with various constraints to enforce valid argumentation structure. As features it uses structural, lexical, syntactic and context features, cf. Stab and Gurevych (2016) and Persing and Ng (2016).",
      "startOffset" : 131,
      "endOffset" : 889
    }, {
      "referenceID" : 1,
      "context" : "In addition to decoupling entity and relation detection but jointly modeling them, pretraining on entities and scheduled sampling (Bengio et al., 2015) is applied to prevent low performance at early training stages of entity detection and relation classification. To adapt LSTM-ER for the argumentative structure encoded in the PE dataset, we model three types of entities (premise, claim, major claim) and four types of relations (for, against, support, attack). We use the feature-based ILP model from Stab and Gurevych (2016) as a comparison system. This system solves the subtasks of AM— component segmentation, component typing, relation identification and typing—independently. Afterwards, it defines an ILP model with various constraints to enforce valid argumentation structure. As features it uses structural, lexical, syntactic and context features, cf. Stab and Gurevych (2016) and Persing and Ng (2016). Summarizing, we distinguish our framings in terms of modularity and in terms of their constraints.",
      "startOffset" : 131,
      "endOffset" : 915
    }, {
      "referenceID" : 39,
      "context" : "It has frequently been observed that models tend to produce output consistent with constraints in their training data in such situations (Zhang et al., 2017; Héctor and Plank, 2017); thus, they have learned the constraints.",
      "startOffset" : 137,
      "endOffset" : 181
    }, {
      "referenceID" : 10,
      "context" : "It has frequently been observed that models tend to produce output consistent with constraints in their training data in such situations (Zhang et al., 2017; Héctor and Plank, 2017); thus, they have learned the constraints.",
      "startOffset" : 137,
      "endOffset" : 181
    }, {
      "referenceID" : 26,
      "context" : "Evaluation Metric We adopt the evaluation metric suggested in Persing and Ng (2016). This computes true positives TP, false positives FP, and false negatives FN, and from these calculates component and relation F1 scores as F1 = 2TP 2TP+FP+FN .",
      "startOffset" : 62,
      "endOffset" : 84
    }, {
      "referenceID" : 26,
      "context" : "Evaluation Metric We adopt the evaluation metric suggested in Persing and Ng (2016). This computes true positives TP, false positives FP, and false negatives FN, and from these calculates component and relation F1 scores as F1 = 2TP 2TP+FP+FN . For space reasons, we refer to Persing and Ng (2016) for specifics, but to illustrate, for components, true positives are defined as the set of components in the gold standard for which there exists a predicted component with the same type that ‘matches’.",
      "startOffset" : 62,
      "endOffset" : 298
    }, {
      "referenceID" : 26,
      "context" : "Evaluation Metric We adopt the evaluation metric suggested in Persing and Ng (2016). This computes true positives TP, false positives FP, and false negatives FN, and from these calculates component and relation F1 scores as F1 = 2TP 2TP+FP+FN . For space reasons, we refer to Persing and Ng (2016) for specifics, but to illustrate, for components, true positives are defined as the set of components in the gold standard for which there exists a predicted component with the same type that ‘matches’. Persing and Ng (2016) define a notion of what we may term ‘level α matching’: for example, at the 100% level (exact match) predicted and gold components must have exactly the same spans, whereas at the 50% level they must only share at least 50% of their tokens (approximate match).",
      "startOffset" : 62,
      "endOffset" : 523
    }, {
      "referenceID" : 18,
      "context" : "(a) Dependency Parsing We show results for the two feature-based parsers MST (McDonald et al., 2005), Mate (Bohnet and Nivre, 2012) as well as the neural parsers by Dyer et al.",
      "startOffset" : 77,
      "endOffset" : 100
    }, {
      "referenceID" : 3,
      "context" : ", 2005), Mate (Bohnet and Nivre, 2012) as well as the neural parsers by Dyer et al.",
      "startOffset" : 14,
      "endOffset" : 38
    }, {
      "referenceID" : 3,
      "context" : ", 2005), Mate (Bohnet and Nivre, 2012) as well as the neural parsers by Dyer et al. (2015) (LSTM-Parser) and Kiperwasser and Goldberg (2016) (Kiperwasser).",
      "startOffset" : 15,
      "endOffset" : 91
    }, {
      "referenceID" : 3,
      "context" : ", 2005), Mate (Bohnet and Nivre, 2012) as well as the neural parsers by Dyer et al. (2015) (LSTM-Parser) and Kiperwasser and Goldberg (2016) (Kiperwasser).",
      "startOffset" : 15,
      "endOffset" : 141
    }, {
      "referenceID" : 17,
      "context" : "(b) Sequence Tagging For these experiments, we use the BLCC tagger from Ma and Hovy (2016) and refer to the resulting system as STagBLCC.",
      "startOffset" : 72,
      "endOffset" : 91
    }, {
      "referenceID" : 21,
      "context" : "This indicates that complex sequence tagging may benefit when we train a “sublabeler” in the same neural architecture, a finding that may be particularly relevant for morphological POS tagging (Müller et al., 2013).",
      "startOffset" : 193,
      "endOffset" : 214
    }, {
      "referenceID" : 32,
      "context" : "(c) MTL As indicated, we use the MTL tagging framework from Søgaard and Goldberg (2016) for multi-task experiments.",
      "startOffset" : 60,
      "endOffset" : 88
    }, {
      "referenceID" : 21,
      "context" : "This indicates that complex sequence tagging may benefit when we train a “sublabeler” in the same neural architecture, a finding that may be particularly relevant for morphological POS tagging (Müller et al., 2013). Unlike Søgaard and Goldberg (2016), we do not find that the optimal architecture is the one in which “lower” tasks (such as C or R) feed from lower layers.",
      "startOffset" : 194,
      "endOffset" : 251
    }, {
      "referenceID" : 0,
      "context" : "Another possible framing, not considered here, is to frame AM as an encoder-decoder problem (Bahdanau et al., 2015; Vinyals et al., 2015).",
      "startOffset" : 92,
      "endOffset" : 137
    }, {
      "referenceID" : 36,
      "context" : "Another possible framing, not considered here, is to frame AM as an encoder-decoder problem (Bahdanau et al., 2015; Vinyals et al., 2015).",
      "startOffset" : 92,
      "endOffset" : 137
    }, {
      "referenceID" : 28,
      "context" : "Its suitability for the end-to-end learning task is scope for future work, but its adequacy for component typing and relation identification has been investigated in research submitted during the preparation of our current work (Potash et al., 2017).",
      "startOffset" : 228,
      "endOffset" : 249
    }, {
      "referenceID" : 33,
      "context" : "Our work yields new state-ofthe-art results in end-to-end AM on the PE dataset from Stab and Gurevych (2016). Another possible framing, not considered here, is to frame AM as an encoder-decoder problem (Bahdanau et al.",
      "startOffset" : 84,
      "endOffset" : 109
    } ],
    "year" : 2017,
    "abstractText" : "We investigate neural techniques for endto-end computational argumentation mining. We frame the problem as a tokenbased dependency parsing as well as a token-based sequence tagging model, including a multi-task learning setup. Contrary to models that operate on the argument component level, we find that framing the problem as dependency parsing leads to subpar performance results. In contrast, less complex (local) tagging models based on BiLSTMs perform robustly across classification scenarios, being able to catch long-range dependencies inherent to the argumentation mining problem. Moreover, we find that jointly learning ‘natural’ subtasks, in a multi-task learning setup, improves performance.",
    "creator" : "LaTeX with hyperref package"
  }
}